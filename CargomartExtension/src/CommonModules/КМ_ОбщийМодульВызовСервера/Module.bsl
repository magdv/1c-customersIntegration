
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаписатьТекстВЛог(ИмяФайлаЛога, ТекстСообщения, Статус = Неопределено, 
						ДобавитьТекущуюДату = Истина, Протокол = "", ВыводитьСообщения = Истина, СоздатьКаталогЛога = Ложь) Экспорт
	
	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Обычное;
	КонецЕсли;
	
	Если ДобавитьТекущуюДату Тогда
		
		//@skip-check use-non-recommended-method
		ТекстСообщения = "[" + Строка(ТекущаяДата()) + "] "+ТекстСообщения;
		
	КонецЕсли;
	
	Если ВыводитьСообщения = Истина Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Статус);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФайлаЛога)
		И ТипЗнч(ИмяФайлаЛога) = Тип("Строка") Тогда
		
		Попытка
			тФайл = Новый Файл(ИмяФайлаЛога);
			
			Если СоздатьКаталогЛога = Истина Тогда
				СоздатьКаталог(Лев(тФайл.Путь, СтрДлина(тФайл.Путь)-1));
			КонецЕсли;
			
			ЗТ_Лог = Новый ЗаписьТекста;
			ЗТ_Лог.Открыть(ИмяФайлаЛога, КодировкаТекста.UTF8,,Истина);
			ЗТ_Лог.ЗаписатьСтроку(ТекстСообщения);
			ЗТ_Лог.Закрыть();
		Исключение
			
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("Каргомарт.ЛогированиеВФайлы", УровеньЖурналаРегистрации.Ошибка,,, 
				"Ошибка записи в лог-файл """ + ИмяФайлаЛога + """." + Символы.ПС + ТекстОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Протокол = Протокол + ?(Протокол="", "", Символы.ПС) + ТекстСообщения;

КонецПроцедуры

Функция ТестПодключения(Организация, НастройкиКаргомарт) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Лог", 		"");
	Результат.Вставить("КодОшибки", 0);
	
	СоединениеHTTP 					= КМ_ОбщийМодульСервер.ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
	
	Токен 							= КМ_ОбщийМодульСервер.ПолучитьТокенАвторизацииКаргомарт(Организация, НастройкиКаргомарт, СоединениеHTTP, Результат);
	
	Результат.Вставить("Токен", Токен);
	
	Возврат Результат;
	
КонецФункции

//Процедура трансляции информации об ошибках. 
//
//Параметры:
//	ИнформацияОбОшибке - ИнформацияОбОшибке - используется при необходимости вызвать исключение при трансляции ошибки
//	ИмяСобытия - 			Строка
//	ПротоколОшибок - 		Строка
//	ТекстОшибки - 			Строка
//	ВызыватьИсключение - 	Булево
//	Сообщать - 				Булево
//	ОтправлятьНаПочту - 	Булево
//	РПП - 					Структура - Профиль рассылки почты для отправки сообщений.
//	ЗаписьЖР - 				Булево
Процедура ОбработкаОшибок(ИнформацияОбОшибке, ИмяСобытия, ПротоколОшибок, ТекстОшибки, 
	ВызыватьИсключение = Истина, Сообщать = Истина, РПП = Неопределено, ЗаписьЖР = Истина) Экспорт
	
	Если ЗаписьЖР = Истина Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда 
		
		ПротоколОшибок = ПротоколОшибок + 
		"─────────────────────────────────────────────────────────────────────────
		|" + ТекстОшибки + Символы.ПС;
		
		Если Сообщать  = Истина Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РПП) Тогда	
		//	ОтправитьНаПочту(ИмяСобытия, ТекстОшибки, РПП);
		КонецЕсли;
		
	КонецЕсли;

	Если ВызыватьИсключение = Истина Тогда
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьДопСведениеВНаборы(ДопСведение, МассивНаборовСведений, Протокол = "") Экспорт
	
	Результат = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|		ПО НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = НаборыДополнительныхРеквизитовИСведений.Ссылка
	|			И (НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство = &ИскомоеСведение)
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка В(&МассивНаборовСведений)";
	Запрос.УстановитьПараметр("МассивНаборовСведений", 	МассивНаборовСведений);
	Запрос.УстановитьПараметр("ИскомоеСведение", 		ДопСведение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивОбъектовНаборов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Свойство = Null Тогда
			
			НаборОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СтрокаСведение = НаборОбъект.ДополнительныеСведения.Добавить();
			СтрокаСведение.Свойство = ДопСведение;
			МассивОбъектовНаборов.Добавить(НаборОбъект);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НаборОбъект из МассивОбъектовНаборов Цикл
		Попытка
			НаборОбъект.Записать();
		Исключение
			
			Протокол = Протокол + ?(Протокол = "", "", Символы.ПС) + "Не удалось добавить в набор сведений """ + НаборОбъект.Ссылка 
				+ """ сведение """ + ДопСведение + """.";
				
			Результат = Ложь;
				
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьДопРеквизит(НаименованиеРеквизита, ИмяРеквизита, МассивНаборовСведений, ОписаниеТипаРеквизита) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка 					КАК Ссылка,
	|	ДополнительныеРеквизитыИСведения.ПометкаУдаления 			КАК ПометкаУдаления,
	|	ДополнительныеРеквизитыИСведения.Заголовок 					КАК Заголовок,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения 				КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Виден 						КАК Виден,
	|	ДополнительныеРеквизитыИСведения.Доступен 					КАК Доступен,
	|	ДополнительныеРеквизитыИСведения.Имя 						КАК Имя,
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение 	КАК ЭтоДополнительноеСведение,
	|	ДополнительныеРеквизитыИСведения.НаборСвойств 				КАК НаборСвойств
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Наименование = &НаименованиеРеквизита";
	Запрос.УстановитьПараметр("НаименованиеРеквизита", НаименованиеРеквизита);
	
	Выборка 			= Запрос.Выполнить().Выбрать();
	РеквизитОбъект 		= Неопределено;
	
	Если Выборка.Количество() = 0 Тогда
		РеквизитОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	Иначе
		
		Выборка.Следующий();
		Если 	Выборка.ПометкаУдаления 			= Истина
			ИЛИ Выборка.ТипЗначения 				<> ОписаниеТипаРеквизита
			ИЛИ Выборка.Виден 						= Ложь
			ИЛИ Выборка.Доступен 					= Ложь
			ИЛИ Выборка.Имя 						<> ИмяРеквизита
			ИЛИ Выборка.Заголовок 					<> НаименованиеРеквизита
			ИЛИ Выборка.ЭтоДополнительноеСведение 	= Ложь
			ИЛИ Выборка.НаборСвойств 				<> МассивНаборовСведений[0] Тогда
			
			РеквизитОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		Иначе
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитОбъект.ПометкаУдаления 				= Ложь;
	РеквизитОбъект.ТипЗначения 					= ОписаниеТипаРеквизита;
	РеквизитОбъект.Виден 						= Истина;
	РеквизитОбъект.Доступен 					= Истина;
	РеквизитОбъект.Имя 							= ИмяРеквизита;
	РеквизитОбъект.Заголовок 					= НаименованиеРеквизита;
	РеквизитОбъект.Наименование 				= НаименованиеРеквизита;
	РеквизитОбъект.ЭтоДополнительноеСведение 	= Истина;
	РеквизитОбъект.НаборСвойств 				= МассивНаборовСведений[0];
	
	//Не будем обрабатывать исключение при записи. Пусть всплывает.
	РеквизитОбъект.Записать();
	
	Протокол = "";
	ДобавитьДопСведениеВНаборы(РеквизитОбъект.Ссылка, МассивНаборовСведений, Протокол);
	
	Если ЗначениеЗаполнено(Протокол) Тогда
		ОбщегоНазначения.СообщитьПользователю(Протокол);
	КонецЕсли;
	
	Возврат РеквизитОбъект.Ссылка;
	
КонецФункции

// Инициализировать вид контактной информации (Создать при отсутствии, либо 
// обновить, если не соответствует указанным параметрам).
// 
// Параметры:
//  ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации
//  ГруппаНаименование - Строка - Группа наименование
//  Наименование - Строка - Наименование
//  ДополнительныеРеквизиты  - Структура, Неопределено - Дополнительные реквизиты
// 
// Возвращаемое значение:
//  Произвольный - Инициализировать вид контактной информации
Функция ИнициализироватьВидКонтактнойИнформации(ТипКонтактнойИнформации, ГруппаНаименование, Наименование, ДополнительныеРеквизиты = Неопределено) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Родитель.Наименование КАК ГруппаНаименование,
	|	ВидыКонтактнойИнформации.Тип КАК ТипКонтактнойИнформации,
	|	ВидыКонтактнойИнформации.ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Наименование = &Наименование";
	
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		ТочкаВставки 	= СтрНайти(Запрос.Текст, ",");
		ДопПоляЗапроса 	= "";
		
		Для Каждого ДополнительныйРеквизит из ДополнительныеРеквизиты Цикл
			ДопПоляЗапроса = ДопПоляЗапроса + "
			|	ВидыКонтактнойИнформации." + ДополнительныйРеквизит.Ключ + ",";
		КонецЦикла;
		
		Запрос.Текст = Лев(Запрос.Текст,ТочкаВставки) + ДопПоляЗапроса + Сред(Запрос.Текст, ТочкаВставки + 1);		
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка 		= Запрос.Выполнить().Выбрать();
	ВКИОбъект 		= Неопределено;
	
	Если Выборка.Количество() = 0 Тогда
		
		СсылкиНаОбъектыКонтактнойИнформации = КМ_ОбщийМодульПовтИсп.МодульЯдро().СсылкиНаОбъектыКонтактнойИнформации();
		
		ВКИОбъект = СсылкиНаОбъектыКонтактнойИнформации.СправочникСсылка.СоздатьЭлемент();
		ВКИОбъект.Наименование = Наименование;
		
	Иначе
		
		Выборка.Следующий();
		
		РасхождениеВДопРеквизитах = Ложь;
		
		Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
			Для Каждого ДополнительныйРеквизит из ДополнительныеРеквизиты Цикл
				Если Выборка[ДополнительныйРеквизит.Ключ] <> ДополнительныйРеквизит.Значение Тогда
					
					РасхождениеВДопРеквизитах = Истина;
					Прервать;
				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если 	Выборка.ПометкаУдаления 			= Истина
			ИЛИ Выборка.ГруппаНаименование 			<> ГруппаНаименование
			ИЛИ Выборка.ТипКонтактнойИнформации 	<> ТипКонтактнойИнформации
			ИЛИ РасхождениеВДопРеквизитах Тогда
			
			ВКИОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		Иначе
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	ВКИОбъект.Родитель 			= СсылкиНаОбъектыКонтактнойИнформации.СправочникСсылка.НайтиПоНаименованию(ГруппаНаименование, Истина);
	ВКИОбъект.ПометкаУдаления 	= Ложь;
	ВКИОбъект.Тип 				= ТипКонтактнойИнформации;
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Для Каждого ДополнительныйРеквизит из ДополнительныеРеквизиты Цикл
			ВКИОбъект[ДополнительныйРеквизит.Ключ] = ДополнительныйРеквизит.Значение;
		КонецЦикла;
	КонецЕсли;
	
	//Не будем обрабатывать исключение при записи. Пусть всплывает.
	ВКИОбъект.Записать();
	
	Возврат ВКИОбъект.Ссылка;	
	
КонецФункции

//Функция получения настроек Каргомарт.
//
//Параметры:
//	Организация - СправочникСсылка.Организации - Организация для получения настроек интеграции с Каргомартом
//Возвращаемое значение:
//	Структура
//Функция ПолучитьНастройкиКаргомарт(Организация) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК Справочник.ЗначенияСвойствОбъектов).ПолноеНаименование КАК Значение
//	|ИЗ
//	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//	|ГДЕ
//	|	ДополнительныеСведения.Объект = &Организация
//	|	И ДополнительныеСведения.Свойство = &РеквизитНастройкиКаргомарт";
//	
//	Запрос.УстановитьПараметр("Организация", 				Организация);
//	Запрос.УстановитьПараметр("РеквизитНастройкиКаргомарт", КМ_ОбщийМодульПовтИсп.РеквизитНастройкиКаргомарт());
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() = Ложь Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Попытка
//		НастройкиКаргомарт = ЗначениеИзСтрокиВнутр(Выборка.Значение);
//	Исключение
//		Возврат Неопределено;
//	КонецПопытки;
//	
//	Если ТипЗнч(НастройкиКаргомарт) <> Тип("Структура")
//		ИЛИ НастройкиКаргомарт.Свойство("АдресСервера") = Ложь 
//		ИЛИ ЗначениеЗаполнено(НастройкиКаргомарт.АдресСервера) = Ложь Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//			
//	УстановитьПривилегированныйРежим(Истина);
//	
//	НастройкиКаргомарт.Вставить("Логин", 	Строка(ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "ЛогинКаргомарт")));
//	НастройкиКаргомарт.Вставить("Пароль", 	Строка(ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "ПарольКаргомарт")));
//	
//	УстановитьПривилегированныйРежим(Ложь);
//		
//	НастройкиКаргомарт = КМ_ОбщийМодульПовтИсп.МодульЯдро().НастройкиКаргомарт(Организация, НастройкиКаргомарт);
//
//	Возврат НастройкиКаргомарт;
//	
//КонецФункции

Функция СохранитьНастройкиКаргомарт(Организация, НастройкиКаргомарт) Экспорт
	
	РегистрСведенийСсылкаДополнительныеСведения = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("РегистрыСведений_ДополнительныеСведения");
			
		Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") 
		ИЛИ ТипЗнч(НастройкиКаргомарт) <> Тип("Структура")
		ИЛИ НастройкиКаргомарт.Свойство("АдресСервера") = Ложь 
		ИЛИ ЗначениеЗаполнено(НастройкиКаргомарт.АдресСервера) = Ложь
		ИЛИ НастройкиКаргомарт.Свойство("Логин") = Ложь
		ИЛИ НастройкиКаргомарт.Свойство("Пароль") = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Логин 		= НастройкиКаргомарт.Логин;
	Пароль 		= НастройкиКаргомарт.Пароль;
		
	НастройкиКаргомарт.Удалить("Логин");
	НастройкиКаргомарт.Удалить("Пароль");
	
	МЗап = РегистрСведенийСсылкаДополнительныеСведения.СоздатьМенеджерЗаписи();
	МЗап.Объект 	= Организация;
	МЗап.Свойство 	= КМ_ОбщийМодульПовтИсп.РеквизитНастройкиКаргомарт();
	МЗап.Прочитать();
	СвЗнОбъект = Неопределено;
	
	Если МЗап.Выбран() Тогда
		СвЗн = МЗап.Значение;
		Если ТипЗнч(СвЗн) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") И ЗначениеЗаполнено(СвЗн) Тогда
			СвЗнОбъект = СвЗн.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	Если СвЗнОбъект = Неопределено Тогда
		СвЗнОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	КонецЕсли;
	
	СвЗнОбъект.Наименование 		= "Настройки Каргомарт для организации """ + Организация + """";
	СвЗнОбъект.ПолноеНаименование 	= ЗначениеВСтрокуВнутр(НастройкиКаргомарт);
	СвЗнОбъект.Владелец 			= КМ_ОбщийМодульПовтИсп.РеквизитНастройкиКаргомарт();
	
	МЗап.Объект 	= Организация;
	МЗап.Свойство 	= КМ_ОбщийМодульПовтИсп.РеквизитНастройкиКаргомарт();
	
	Попытка
		
		СвЗнОбъект.Записать();
		//@skip-check wrong-type-expression
		МЗап.Значение 	= СвЗнОбъект.Ссылка;
		МЗап.Записать();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Организация, Логин, "ЛогинКаргомарт");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Организация, Пароль, "ПарольКаргомарт");
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		
		ОбщегоНазначения.СообщитьПользователю(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Ложь;
		
	КонецПопытки;
	
	//Убиваем кэш настроек ++
	ИмяОрганизации = СтрЗаменить(Строка(Организация)," ", "");
	ИмяОрганизации = СтрЗаменить(Строка(ИмяОрганизации),"""", "");
	
	КМ_ОбщийМодульПовтИсп.МодульЯдро().ОчиститьКэш("НастройкиКаргомарт" + ИмяОрганизации);
	//Убиваем кэш настроек --
	
	Возврат Истина;
	
КонецФункции

Процедура КМ_ПриЗаписиДляОбмена(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	ТипИсточника 	= ТипЗнч( Источник);
	Организация 	= Неопределено;
	
	Если ТипИсточника = Тип("СправочникОбъект.КМ_ПунктыПогрузкиВыгрузки")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.КМ_Сотрудники") Тогда
		Организация = Источник.Владелец;
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.КМ_Заказ") Тогда
		Организация = Источник.Организация;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Статус 		= КМ_ОБщийМодульСервер.ОпределитьСтатусВыгрузкиОбъекта(Источник, Организация);  
	
	Если Источник.ПометкаУдаления Тогда
		
		Если Статус Тогда
			
			МенеджерРегистра 	= РегистрыСведений.КМ_ДанныеДляВыгрузки;
			НаборЗаписейРегистра 	= МенеджерРегистра.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.ОбъектСсылка.Установить(Источник.Ссылка);
			НаборЗаписейРегистра.Отбор.Организация.Установить(Организация);
			НаборЗаписейРегистра.Очистить();
			НаборЗаписейРегистра.Записать();
			
		КонецЕсли;	
			
	Иначе
		
		Если НЕ Статус Тогда
	
			МенеджерЗаписи 	  =  РегистрыСведений.КМ_ДанныеДляВыгрузки.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Активность =  Истина;
			МенеджерЗаписи.ОбъектСсылка =  Источник.Ссылка;
			МенеджерЗаписи.Организация    =  Организация;
			МенеджерЗаписи.ТипОбъекта   =  Строка(ТипЗнч(Источник.Ссылка));
			МенеджерЗаписи.Записать(Истина);

		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ИмпортЗаказовИзКаргомарт(Организация, ДатаНачалаПоиска = Неопределено, ПриоритетБД = Истина, МассивНомеровДляЗагрузки = Неопределено) Экспорт

	Результат = КМ_ОбщийМодульСервер.ПолучитьДанныеЗаказовИзКаргомарт(Организация, ДатаНачалаПоиска, МассивНомеровДляЗагрузки);
	
	Если Результат.КодОшибки <> 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Заказы = Результат.Заказы;
	ПолученныйНомерТекущегоЗапроса = Результат.ПолученныйНомерТекущегоЗапроса;
	Результат.Удалить("Заказы");
	
	Если Заказы.Количество() > 0 Тогда
		Результат.Лог = Результат.Лог + "Записываю данные о заказах в БД." + Символы.ПС;
	Иначе 	
		Результат.Лог = Результат.Лог + "Нет полученных данных о заказах." + Символы.ПС;
	КонецЕсли;
	
	СтрокаНомераЗаказов = "";
		
	Для Каждого СтрЗаказа из Заказы Цикл
		
		НомерЗаказаКаргомарт 		= Формат(СтрЗаказа.Значение.order.serialId,"ЧГ=0");
		ЗаказКаргомарт 				= КМ_ОбщийМодульСервер.НайтиЗаказВБазе(НомерЗаказаКаргомарт, Организация);
		
		Если СтрЗаказа.Значение.order.statusId = 8 И НЕ ЗначениеЗаполнено(ЗаказКаргомарт) Тогда
			
			Результат.Лог = Результат.Лог + "Пропущен архивный заказ №" + НомерЗаказаКаргомарт + "..." + Символы.ПС;
			Продолжить;
			
		КонецЕсли;
		
		СтрокаНомераЗаказов 	= СтрокаНомераЗаказов + НомерЗаказаКаргомарт + Символы.ПС;
		РезультатЗаписи 		= КМ_ОбщийМодульСервер.СоздатьОбновитьЗаказПоПолученнымДаннымИзКМ(Организация, ЗаказКаргомарт, СтрЗаказа.Значение);
		Результат.Лог 			= Результат.Лог + РезультатЗаписи.Лог;
		
		Если РезультатЗаписи.КодОшибки <> 0 Тогда
			
			Если ЗначениеЗаполнено(ЗаказКаргомарт) Тогда

				Попытка
					
					МЗап = РегистрыСведений.КМ_СтатусыОбновленияЗаказовИзКМ.СоздатьМенеджерЗаписи();
					МЗап.Заказ 		= ЗаказКаргомарт;
					МЗап.Статус 	= Перечисления.КМ_ВидыСтатусовОбновленияЗаказаИзКМ.ОшибкаОбновления;
					МЗап.Активность = Истина;
					МЗап.Период 	= ТекущаяДата();

					МЗап.Записать(Истина);
					
				Исключение
					
					Инфо = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					Результат.Лог = Результат.Лог + "Ошибка записи в РС ""Статусы обновления заказов из Каргомарт"" ошибки обновления.
						|"	+ Инфо + Символы.ПС;
						 
				КонецПопытки;
				
			КонецЕсли;
			
			Результат.КодОшибки = РезультатЗаписи.КодОшибки;
			Результат.Описание = РезультатЗаписи.Описание;
			Возврат Результат;
			
		КонецЕсли;
			
	КонецЦикла;

	
	
	Результат.Лог = Результат.Лог + "─────────────────────────────────────────────────────────────────────────
		|";
	
	Если ЗначениеЗаполнено(ПолученныйНомерТекущегоЗапроса) Тогда
		
		Результат.Лог = Результат.Лог + "Сохраняю номер последнего запроса: " + ПолученныйНомерТекущегоЗапроса + "." + Символы.ПС;
		КМ_ОбщийМодульСервер.СохранитьНомерПоследнегоЗапросаКаргомарт(Организация, ПолученныйНомерТекущегоЗапроса);
		
	КонецЕсли;
	
	Если СтрокаНомераЗаказов <> "" Тогда
		Результат.Лог = Результат.Лог + "Успешно загружены заказы с номерами: " + Символы.ПС + СтрокаНомераЗаказов;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапуститьФоновоеОбновлениеЗаказа(Организация, НомерЗаказа) Экспорт
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		КодОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Код");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
	СтрокаНаименованиеЗадания = "ОбновлениеЗаказа_" + КодОрганизации + "_" + НомерЗаказа;
	
	Отбор 				= Новый Структура;
	Отбор.Вставить("Наименование", 	СтрокаНаименованиеЗадания);
	Отбор.Вставить("Состояние", 	СостояниеФоновогоЗадания.Активно);
	
	УИДЗадания 			= Новый УникальныйИдентификатор();
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеЗадания 	= ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если НайденныеЗадания.Количество() > 0 Тогда
		УИДЗадания = НайденныеЗадания[0].УникальныйИдентификатор;
	Иначе
		
		МассивНомеровДляЗагрузки = Новый Массив;
		МассивНомеровДляЗагрузки.Добавить(НомерЗаказа);
		
		ПараметрыЗапуска = Новый Массив;
		ПараметрыЗапуска.Добавить(Организация);
		ПараметрыЗапуска.Добавить(Неопределено);//ДатаНачалаПоиска
		ПараметрыЗапуска.Добавить(Истина);//ПриоритетБД
		ПараметрыЗапуска.Добавить(МассивНомеровДляЗагрузки);
		ФоновыеЗадания.Выполнить(
			"КМ_ОбщийМодульВызовСервера.ПроксиДляФЗИмпортЗаказовИзКаргомарт", 
			ПараметрыЗапуска, 
			УИДЗадания, 
			СтрокаНаименованиеЗадания);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат УИДЗадания;
	
КонецФункции

Функция ПроверкаЗавершенияОбновленияВФоне(Организация, ИД, МоментЗапускаОбновленияЗаказаС_КМ) Экспорт
	
	//Сначала проверим наличие исполняющегося фонового задания, 
	//затем наличие нового статуса обновления в РС "КМ_СтатусыОбновленияЗаказовИзКМ"
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		КодОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Код");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаНаименованиеЗадания = "ОбновлениеЗаказа_" + КодОрганизации + "_" + ИД;
	
	Отбор 				= Новый Структура;
	Отбор.Вставить("Наименование", 	СтрокаНаименованиеЗадания);
	Отбор.Вставить("Состояние", 	СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеЗадания 	= ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если НайденныеЗадания.Количество() > 0 Тогда
		Возврат Неопределено;
	Иначе
		
		Запрос = новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КМ_Заказ.Ссылка,
		|	КМ_СтатусыОбновленияЗаказовИзКМСрезПоследних.Статус,
		|	КМ_СтатусыОбновленияЗаказовИзКМСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.КМ_СтатусыОбновленияЗаказовИзКМ.СрезПоследних КАК КМ_СтатусыОбновленияЗаказовИзКМСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КМ_Заказ КАК КМ_Заказ
		|		ПО КМ_СтатусыОбновленияЗаказовИзКМСрезПоследних.Заказ = КМ_Заказ.Ссылка
		|ГДЕ
		|	КМ_Заказ.Организация = &Организация
		|	И КМ_Заказ.ИД = &ИД
		|	И КМ_Заказ.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Организация", 	Организация);
		Запрос.УстановитьПараметр("ИД", 			ИД);
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() И Результат.Период >= МоментЗапускаОбновленияЗаказаС_КМ Тогда
			Возврат Результат.Статус;
		Иначе
			Возврат Перечисления.КМ_ВидыСтатусовОбновленияЗаказаИзКМ.ОшибкаОбновления;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ПроксиДляФЗИмпортЗаказовИзКаргомарт(Организация, ДатаНачалаПоиска = Неопределено, ПриоритетБД = Истина, МассивНомеровДляЗагрузки = Неопределено, Результат = Неопределено) Экспорт
	
	Результат = ИмпортЗаказовИзКаргомарт(Организация, ДатаНачалаПоиска, ПриоритетБД, МассивНомеровДляЗагрузки);
	
	Если Результат.КодОшибки <> 0 Тогда
		ЗаписьЖурналаРегистрации("Каргомарт.ИмпортЗаказов.Ошибка", УровеньЖурналаРегистрации.Ошибка,,, Результат.Лог);
	КонецЕсли;

КонецПроцедуры

Функция ВыгрузитьДанныеВКаргомарт(Организация) Экспорт
	
	Результат 		= КМ_ОбщийМодульКлиентСервер.ИнициализироватьСтруктуруВозврата();
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	=
	"ВЫБРАТЬ
	|	КМ_ДанныеДляВыгрузки.ОбъектСсылка КАК ОбъектСсылка,
	|	ВЫБОР
	|		КОГДА КМ_ДанныеДляВыгрузки.ТипОбъекта = ""Каргомарт заказ""
	|			ТОГДА 3
	|		КОГДА КМ_ДанныеДляВыгрузки.ТипОбъекта = ""ПунктыПогрузкиВыгрузкиCargomart""
	|			ТОГДА 2
	|		КОГДА КМ_ДанныеДляВыгрузки.ТипОбъекта = ""Сотрудники Каргомарт""
	|			ТОГДА 1
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК ПорядокВыгрузки,
	|	КМ_ДанныеДляВыгрузки.ТипОбъекта
	|ИЗ
	|	РегистрСведений.КМ_ДанныеДляВыгрузки КАК КМ_ДанныеДляВыгрузки
	|ГДЕ
	|	КМ_ДанныеДляВыгрузки.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокВыгрузки
	|ИТОГИ
	|	КОЛИЧЕСТВО(ОбъектСсылка)
	|ПО
	|	ПорядокВыгрузки";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаОбъектыБД 	= Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		МассивОбъектыБД 	= Новый Массив;
		
		Пока ВыборкаОбъектыБД.Следующий() Цикл
			МассивОбъектыБД.Добавить(ВыборкаОбъектыБД.ОбъектСсылка);
		КонецЦикла;
		
		
		Если Выборка.ПорядокВыгрузки = 1 Тогда
			РезультатВыгрузки = КМ_ОбщийМодульСервер.СинхронизироватьСправочникКМ_Сотрудники(Организация, Истина, МассивОбъектыБД, Новый Массив);
		ИначеЕсли Выборка.ПорядокВыгрузки = 2 Тогда
			РезультатВыгрузки = КМ_ОбщийМодульСервер.СинхронизацияСправочникКМ_ПунктыПогрузкиВыгрузки(Организация, Истина, МассивОбъектыБД, Новый Массив);
		ИначеЕсли Выборка.ПорядокВыгрузки = 3 Тогда
			РезультатВыгрузки = КМ_ОбщийМодульСервер.ВыгрузитьОпубликоватьЧерновикиЗаказовНаКаргомарт(Организация, МассивОбъектыБД);
		КонецЕсли;
		
		Результат.Лог = Результат.Лог + РезультатВыгрузки.Лог;
		
		Если РезультатВыгрузки.КодОшибки <> 0 Тогда
			
			Результат.КодОшибки = РезультатВыгрузки.КодОшибки;
			Результат.Описание = РезультатВыгрузки.Описание;
			Возврат Результат;
			
		Иначе
			Попытка

				НачатьТранзакцию();
				
				НЗ 						= РегистрыСведений.КМ_ДанныеДляВыгрузки.СоздатьНаборЗаписей();
				НЗ.Отбор.Организация.Установить(Организация);

				Для Каждого ОбъектБД Из МассивОбъектыБД Цикл

					НЗ.Отбор.ОбъектСсылка.Установить(ОбъектБД);
					НЗ.Записать();

				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				Инфо = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Результат.кодОшибки = 14;
				Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки) + Символы.ПС 
					+ Инфо;
				
				Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;
				Возврат Результат;
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
