#Область СлужебныйПрограммныйИнтерфейс

Функция ПодключитьОбработкуБП(ИмяМакета) Экспорт
	
	Обработка = Обработки.КМ_РабочееМесто;
	
	ФайлЯдра = Обработка.ПолучитьМакет(ИмяМакета);
	
	АдресОбработки	 = ПоместитьВоВременноеХранилище(ФайлЯдра);
	
	БезопасныйРежим			 = Ложь;
	
	Попытка
		ЗащитаОтОпасныхДействий = Новый("ОписаниеЗащитыОтОпасныхДействий");
	Исключение 
	КонецПопытки;
	
	Если ЗащитаОтОпасныхДействий <> Неопределено Тогда
		ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
	КонецЕсли;	
	
	ИмяОбработки = Неопределено;
	
	Если ЗащитаОтОпасныхДействий = Неопределено Тогда
		
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресОбработки, ИмяОбработки, БезопасныйРежим);
		
	Иначе
		
		ИмяОбработки = ВнешниеОбработки.Подключить(АдресОбработки, ИмяОбработки, БезопасныйРежим, ЗащитаОтОпасныхДействий);
		
	КонецЕсли;
	
	Результат = ВнешниеОбработки.Создать(ИмяОбработки, Ложь);
	
	УдалитьИзВременногоХранилища(АдресОбработки);
	
	Возврат Результат;
	
КонецФункции

#Область РаботаСПунктами

//Проверяет разная ли длина строк и повторное сравнение с обрезкой ВхСтроки из КМ
//
// Параметры:
// 	ИмяРеквизитаБД 	- Строка - Имя реквизита объекта методанных
// 	ИмяСтрокиКМЛог 	- Строка - Имя свойства структуры пункта пришедшего из КМ
// 	СтрокаБД 		- СтрокаТаблицыЗначений - Строка ТЗ из БД
// 	СтрокаКМ 		- Структура - Структура пункта пришедшего из КМ
// 	 
// Возвращаемое значение - Структура:
//  Результат.КодОшибка 	- Если строки равны после приведения их к одинаковой длине тогда 0
//  Результат.Лог 					- Лог 
//
Функция ПодробноеСравнениеСтрокБДКМ(ИмяРеквизитаБД, ИмяСтрокиКМЛог, СтрокаБД, СтрокаКМ)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки", 1);
	Результат.Вставить("Описание",  "");
	Результат.Вставить("Лог",  		"");
	
	ДлинаСтрокиКМ 			= СтрДлина(СтрокаКМ); 
	ДлинаСтрокиРеквизита 	= Метаданные.Справочники.КМ_ПунктыПогрузкиВыгрузки.Реквизиты[ИмяРеквизитаБД].Тип.КвалификаторыСтроки.Длина;
		
	Если ДлинаСтрокиРеквизита < ДлинаСтрокиКМ Тогда
			
		Результат.Лог = Результат.Лог + "Длина строки " + ИмяСтрокиКМЛог + ": " + Строка(ДлинаСтрокиКМ) 
							+ " больше длины реквизита " + ИмяРеквизитаБД + ": " + Строка(ДлинаСтрокиРеквизита);
								
		Если СтрокаБД = Лев(СтрокаКМ, ДлинаСтрокиРеквизита) Тогда
			Результат.КодОшибки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Возврат числа координат длина 8 точность 6
// ВходящиеПараметры:
// 	Строка - СтрокаКоординат из Каргомарта
// Возвращаемое значение:
//  Число - длина 8 точность 6
Функция ПреобразоватьКоординатуВ_ФорматБД(СтрокаКоординат)
	
	Если (Найти(СтрокаКоординат,",") = 3) И (Найти(СтрокаКоординат,"-") = 0) Тогда // вида хх.ххххххххххххх
	
		СтрокаКоординат = Число(Лев(СтрокаКоординат, 9));
	
	ИначеЕсли (Найти(СтрокаКоординат,",") = 2) И (Найти(СтрокаКоординат,"-") = 0) Тогда // вида х.ххххххххххххх
		
		// Приводим к виду хх.ххххххххххххх
		Врм = "0";
		Врм = Врм + СтрокаКоординат;
				
		СтрокаКоординат = Число(Лев(Врм, 9));
	
	ИначеЕсли (Найти(СтрокаКоординат,",") = 4) И (Найти(СтрокаКоординат,"-") > 0) Тогда // вида -хх.ххххххххххххх
	
		СтрокаКоординат = Число(Лев(СтрокаКоординат, 10));
	
	ИначеЕсли (Найти(СтрокаКоординат,",") = 3) И (Найти(СтрокаКоординат,"-") > 0) Тогда // вида -х.ххххххххххххх

		// Приводим к виду -хх.ххххххххххххх	
		Врм = "-0";
		Врм = Врм + Прав(СтрокаКоординат, СтрДлина(СтрокаКоординат) - 1);
				
		СтрокаКоординат = Число(Лев(Врм, 10));
	Иначе
		
		СтрокаКоординат = 0;
		
	КонецЕсли;
	
	Возврат СтрокаКоординат;
	
КонецФункции
	
Функция СохранитьОбновитьПунктВ_БД(Организация, СтрокаКВыгрузке, Результат, НайденыеКЛкЗаписи = Неопределено, НайденыеКЛкУдалению = Неопределено)
	
	ЛогПункта = "";
	
	Если ЗначениеЗаполнено(СтрокаКВыгрузке.Ссылка) Тогда
		СпрОбъект = СтрокаКВыгрузке.Ссылка.ПолучитьОбъект();
	Иначе
		СпрОбъект = Справочники.КМ_ПунктыПогрузкиВыгрузки.СоздатьЭлемент();
		СпрОбъект.УстановитьНовыйКод();
	КонецЕсли;
	
	СпрОбъект.ИД 						= СтрокаКВыгрузке.ИД;
	СпрОбъект.Владелец 					= Организация;
	СпрОбъект.ПолноеНаименование 		= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("title"), 		СтрокаКВыгрузке.ДанныеКМ.title, "");
	СпрОбъект.Наименование 				= СпрОбъект.ПолноеНаименование;
	СпрОбъект.КЛАДР 					= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("code"), 			
											СтрокаКВыгрузке.ДанныеКМ.code, "");
	СпрОбъект.Адрес = ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("address"), 		СтрокаКВыгрузке.ДанныеКМ.address, "");
	
	СпрОбъект.НаселенныйПункт 			= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("localityname"), СтрокаКВыгрузке.ДанныеКМ.localityname, "");
	СпрОбъект.НомерДома 				= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("house"), СтрокаКВыгрузке.ДанныеКМ.house, "");
	
	Если СтрокаКВыгрузке.ДанныеКМJSON.Свойство("data") 
		И СтрокаКВыгрузке.ДанныеКМJSON.data.Свойство("locality")
		И СтрокаКВыгрузке.ДанныеКМJSON.data.locality.Свойство("name")
		И СтрокаКВыгрузке.ДанныеКМJSON.data.locality.Свойство("type") 
		И СтрокаКВыгрузке.ДанныеКМJSON.data.locality.Свойство("region")
		И СтрокаКВыгрузке.ДанныеКМJSON.data.locality.Свойство("fullName") Тогда
		
			СпрОбъект.АдресДляКМ.Очистить();
		
			НоваяСтрока 						= СпрОбъект.АдресДляКМ.Добавить();
			
			//СтрокаКВыгрузке.АдресДляКМ = Неопределено если ГАР не найден в адресном классификаторе
			НоваяСтрока.garGuid 				= ?(СтрокаКВыгрузке.АдресДляКМ <> Неопределено, 
													СтрокаКВыгрузке.АдресДляКМ.garGuid, "");
				
			НоваяСтрока.code 					= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("code"), 			
													СтрокаКВыгрузке.ДанныеКМ.code, "");
			НоваяСтрока.countryCode 			= ?(Лев(НоваяСтрока.code, 3) = "001",
													"RUS", ""); //alpha3-код страны (ОКСМ)
			НоваяСтрока.regionName 				= СтрокаКВыгрузке.ДанныеКМJSON.data.locality.region;
			НоваяСтрока.standardizedAddress 	= СтрокаКВыгрузке.ДанныеКМJSON.data.locality.fullName;
			
	КонецЕсли;
	
	СпрОбъект.Комментарий 				= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("comment"), 		СтрокаКВыгрузке.ДанныеКМ.comment, "");
	
//Если ошибки в координатах вкл. лог:
//	ЛогПункта = ЛогПункта + "Координаты до функции ""Формат"": 
//	|ШиротаКМ  " + ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("latitude"),		СтрокаКВыгрузке.ДанныеКМ.latitude, 	"0") + "
//	|ДолготаКМ " + ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("longitude"), 	СтрокаКВыгрузке.ДанныеКМ.longitude, "0") + "
//	|";
	
	ШиротаКМ = ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("latitude"),Формат(СтрокаКВыгрузке.ДанныеКМ.latitude, "ЧГ=0;"), "0");
	ДолготаКМ = ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("longitude"), Формат(СтрокаКВыгрузке.ДанныеКМ.longitude, "ЧГ=0;"), "0");
	
//	ЛогПункта = ЛогПункта + "Координаты после функции ""Формат"": 
//	|ШиротаКМ  " + ШиротаКМ + "
//	|ДолготаКМ " + ДолготаКМ + "
//	|";
	
	ШиротаКМ = ПреобразоватьКоординатуВ_ФорматБД(ШиротаКМ);
	ДолготаКМ = ПреобразоватьКоординатуВ_ФорматБД(ДолготаКМ);
	
//	ЛогПункта = ЛогПункта + "Координаты после функции ""ПреобразоватьКоординатуВ_ФорматБД"" : 
//	|ШиротаКМ  " + ?(ШиротаКМ = "0", "0, скорее всего ошибка формата вх.координат должн быть DD.DDDD", ШиротаКМ) + "
//	|ДолготаКМ " + ?(ДолготаКМ = "0", "0, скорее всего ошибка формата вх.координат должн быть DD.DDDD", ДолготаКМ) + "
//	|";
	
	СпрОбъект.КоординатыШирота 			= ШиротаКМ;
	СпрОбъект.КоординатыДолгота 		= ДолготаКМ;
	СпрОбъект.ФормаОрганизации 			= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("legalStatus"), 	СтрокаКВыгрузке.ДанныеКМ.legalStatus, 0);
	СпрОбъект.ЮридическоеНаименование 	= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("legalname"), 	СтрокаКВыгрузке.ДанныеКМ.legalname, "");
	СпрОбъект.ДетальнаяИнформация 		= КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(СтрокаКВыгрузке.ДанныеКМJSON);
	
	Если СтрокаКВыгрузке.ДанныеКМ.Свойство("contact")
		И ТипЗнч(СтрокаКВыгрузке.ДанныеКМ.contact) = Тип("Массив")
		И ЗначениеЗаполнено(СтрокаКВыгрузке.ДанныеКМ.contact) Тогда
		
		СпрОбъект.КонтактнаяИнформация.Очистить();
			
		Для Каждого Элемент Из СтрокаКВыгрузке.ДанныеКМ.contact Цикл
			
			НоваяСтрока 				= СпрОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрока.КонтактноеЛицо 	= ?(Элемент.Свойство("name"), 	Элемент.name, "");
			НоваяСтрока.Телефон 		= ?(Элемент.Свойство("phone"), 	Элемент.phone, "");
			
			Если Элемент.Свойство("ext") Тогда
				НоваяСтрока.Добавочный 	= Элемент.ext;
			КонецЕсли;
			
			ЛогПункта = ЛогПункта + "Контактное лицо " + Строка(?(Элемент.Свойство("name"), Элемент.name, "")) + " в Пункт """ 
								+ ?(ЗначениеЗаполнено(СпрОбъект.ИД), Строка(СпрОбъект.ИД), СпрОбъект.ПолноеНаименование) 
									+ """, ТЗ КонтактнаяИнформация добавлено.
										|";
				
			Результат.Лог = Результат.Лог + ЛогПункта; 
			
		КонецЦикла;
	
	КонецЕсли;
	
	ЛогПункта = ЛогПункта + "Записываю данные пункта """ + СпрОбъект.ПолноеНаименование + """ в БД...
					|";
	
	СпрОбъект.ЛогЗагрузки = ЛогПункта;
			
	Результат.Лог = Результат.Лог + "Записываю данные пункта """ + СпрОбъект.ПолноеНаименование + """ в БД...
					|";
	
	Попытка
				
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		СпрОбъект.Записать();
		
		Результат.Лог = Результат.Лог + "Запись завершена успешно.
			|";
	
	Исключение
		
		Инфо 					= ИнформацияОбОшибке();
		ИнфоДетальная 			= ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
		Результат.КодОшибки 	= 14;
		Результат.Описание 		= КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки) + Символы.ПС
			+ ИнфоДетальная;
		Результат.Лог 			= Результат.Лог + Результат.Описание + Символы.ПС;
		 
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьПунктВКаргомарт(СоединениеHTTP, Токен, СтрокаКВыгрузке, Организация, Результат, ТаблицаСоответствияКонтактныхЛиц = Неопределено)

	ДанныеЗапроса = Новый Структура;
	
	Если ЗначениеЗаполнено(СтрокаКВыгрузке.ПолноеНаименование)  Тогда
		ДанныеЗапроса.Вставить("title", СтрокаКВыгрузке.ПолноеНаименование);
	КонецЕсли;
	
	region = Новый Структура();
	region.Вставить("garGuid", СтрокаКВыгрузке.АдресДляКМ.garGuid);
	region.Вставить("name", СтрокаКВыгрузке.АдресДляКМ.regionName);
	
	items = Новый Структура();
	items.Вставить("region", region);
	
	addressObject = Новый Структура();	
	addressObject.Вставить("countryCode", СтрокаКВыгрузке.АдресДляКМ.countryCode);
	addressObject.Вставить("code", СтрокаКВыгрузке.АдресДляКМ.code);
	addressObject.Вставить("items", items);
	addressObject.Вставить("garGuid", Строка(СтрокаКВыгрузке.АдресДляКМ.garGuid));
	addressObject.Вставить("standardizedAddress", СтрокаКВыгрузке.АдресДляКМ.standardizedAddress);
	ДанныеЗапроса.Вставить("addressObject", addressObject);
    
    Если ЗначениеЗаполнено(СтрокаКВыгрузке.КонтактноеЛицо) Тогда
    	
		ДанныеЗапроса.Вставить("contact", Новый Массив);
		
		Для каждого Стр из СтрокаКВыгрузке.Строки Цикл
			ДанныеЗапроса.contact.Добавить(Стр.КонтактноеЛицо);
		КонецЦикла;
		
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", 	"application/json");
	Заголовки.Вставить("Accept", 		"application/json"); 
	Заголовки.Вставить("Authorization",	Токен);
	
	СтрокаЗапроса = "/api/v2/storage-point";
	
	ЗапросHTTP_ЗаписьПункта 				= Новый HTTPЗапрос(СокрЛП(СтрокаЗапроса));
	ЗапросHTTP_ЗаписьПункта.Заголовки 		= Заголовки;
	ЗапросHTTP_ЗаписьПункта.УстановитьТелоИзСтроки(КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(ДанныеЗапроса), 
		КодировкаТекста.UTF8, 
		ИспользованиеByteOrderMark.НеИспользовать);
	
	Результат.Лог = Результат.Лог + "Отправляю данные о пункте """ + СтрокаКВыгрузке.ПолноеНаименование + """ в Каргомарт...
		|";
	
	Попытка
		
		ПересозданныйПункт = Ложь;
			
		Если ЗначениеЗаполнено(СтрокаКВыгрузке.ИД) Тогда
			
			ЗапросHTTP_ЗаписьПункта.АдресРесурса = ЗапросHTTP_ЗаписьПункта.АдресРесурса + "/" 
													+ Формат(СтрокаКВыгрузке.ИД, "ЧГ=0;"); 
			
			ОтветHTTP = СоединениеHTTP.Записать(ЗапросHTTP_ЗаписьПункта);
		Иначе
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP_ЗаписьПункта);
		КонецЕсли;
			
		Если ОтветHTTP.КодСостояния = 404 Тогда
			
			ЗапросHTTP_ЗаписьПункта.АдресРесурса = СтрокаЗапроса;
			
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP_ЗаписьПункта);
			
			ПересозданныйПункт = Истина;
			
		КонецЕсли;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
		
		Результат.КодОшибки = 3;
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			СтрокаЗапроса,
			СоединениеHTTP.Порт,
			"Токен",
			СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
		
		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( Инфо, "Каргомарт.ОтправкаДанныхОПункте.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь);
		
	КонецПопытки;

	СтрокаОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
		
	Если ОтветHTTP.КодСостояния <> 200
		И ОтветHTTP.КодСостояния <> 201 Тогда
		
		СтрокаОтвет = ?(ЗначениеЗаполнено(СтрокаОтвет), Символы.ПС + "Сообщение от сервера: " + Символы.ПС, "")+ СтрокаОтвет;
		
		Результат.КодОшибки = 3;
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			СтрокаЗапроса,
			СоединениеHTTP.Порт,
			"Токен",
		"Код HTTP-ответа:" + ОтветHTTP.КодСостояния + СтрокаОтвет);
		
		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок(, "Каргомарт.ОтправкаДанныхОПункте.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь);
		
	Иначе
		
		Результат.Лог = Результат.Лог + "Данные отправлены успешно.
			|";
		Если НЕ ЗначениеЗаполнено(СтрокаКВыгрузке.ИД) ИЛИ ПересозданныйПункт Тогда
			
			СтруктураОтвет = КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаОтвет);
			
			Если СтруктураОтвет.Свойство("data") 
				И СтруктураОтвет.data.Свойство("storagePoint")
				И ТипЗнч(СтруктураОтвет.data.storagePoint) = Тип("Массив")
				И СтруктураОтвет.data.storagePoint.Количество() > 0
				И СтруктураОтвет.data.storagePoint[0].Свойство("id") Тогда
				
				СтрокаКВыгрузке.ДанныеКМ 		= ОбщегоНазначения.СкопироватьРекурсивно(СтруктураОтвет.data.storagePoint[0]);
				СтрокаКВыгрузке.ДанныеКМJSON 	= ОбщегоНазначения.СкопироватьРекурсивно(СтруктураОтвет);
				СтрокаКВыгрузке.ИД 				= СтруктураОтвет.data.storagePoint[0].id;
				
				Результат = СохранитьОбновитьПунктВ_БД(Организация, СтрокаКВыгрузке, Результат);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПунктаРазличаются(Строка)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки", 0);
	Результат.Вставить("Описание",  "");
	Результат.Вставить("Лог",  		"");
	
	КоординатыЛог = "Координаты до ""Формат"": 
	|ШиротаКМ  " + ?(Строка.ДанныеКМ.Свойство("latitude"), Строка.ДанныеКМ.latitude, "0") + "
	|ДолготаКМ " + ?(Строка.ДанныеКМ.Свойство("longitude"), Строка.ДанныеКМ.longitude, "0") + "
	|";
	
	ШиротаКМ 	= ?(Строка.ДанныеКМ.Свойство("latitude"), Формат(Строка(Строка.ДанныеКМ.latitude), "ЧГ=0;"), "0");
	ДолготаКМ 	= ?(Строка.ДанныеКМ.Свойство("longitude"), Формат(Строка(Строка.ДанныеКМ.longitude), "ЧГ=0;"), "0");
	
	КоординатыЛог = Результат.Лог + "Координаты до преобразования, полсе ""Формат"" : 
	|ШиротаКМ  " + ШиротаКМ + "
	|ДолготаКМ " + ДолготаКМ + "
	|";
	
	ШиротаКМ 	= ПреобразоватьКоординатуВ_ФорматБД(ШиротаКМ);
	ДолготаКМ 	= ПреобразоватьКоординатуВ_ФорматБД(ДолготаКМ);
	
	КоординатыЛог = Результат.Лог + "Координаты после преобразования, полсе ""Формат"" : 
	|ШиротаКМ  " + ШиротаКМ + "
	|ДолготаКМ " + ДолготаКМ + "
	|";
	 	
	
    Если Строка.ПолноеНаименование <> ?(Строка.ДанныеКМ.Свойство("title"), Строка.ДанныеКМ.title, "") Тогда
		
		ПодробноеСравнение = ПодробноеСравнениеСтрокБДКМ("ПолноеНаименование", "title", Строка.НаселенныйПункт, ?(Строка.ДанныеКМ.Свойство("title"), Строка.ДанныеКМ.title, ""));
		
		Результат.КодОшибки 	= ПодробноеСравнение.КодОшибки;
		Результат.Лог 			= Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + ". " + ПодробноеСравнение.Лог + Символы.ПС;
		
		Возврат Результат;
		
	КонецЕсли;

    Если Строка.НаселенныйПункт <> ?(Строка.ДанныеКМ.Свойство("localityname"), Строка.ДанныеКМ.localityname, "") Тогда
		
		ПодробноеСравнение = ПодробноеСравнениеСтрокБДКМ("НаселенныйПункт", "localityname", Строка.НаселенныйПункт, ?(Строка.ДанныеКМ.Свойство("localityname"), Строка.ДанныеКМ.localityname, ""));
		
		Результат.КодОшибки 	= ПодробноеСравнение.КодОшибки;
		Результат.Лог 					= Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + ". " + ПодробноеСравнение.Лог + Символы.ПС;
		
		Возврат Результат;
		
	КонецЕсли;

    Если Строка.КЛАДР <> ?(Строка.ДанныеКМ.Свойство("code"), Строка.ДанныеКМ.code, "") Тогда
		
		Результат.КодОшибки = 1;
		Результат.Лог = Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + ". КЛАДРБД:"  + Строка(Строка.КЛАДР) + " <> КЛАДРКМ " + Строка(?(Строка.ДанныеКМ.Свойство("code"), Строка.ДанныеКМ.code, "")) + Символы.ПС;
		
		Возврат Результат;
		
	КонецЕсли;

    Если Строка.Адрес <> ?(Строка.ДанныеКМ.Свойство("address"), Строка.ДанныеКМ.address, "") Тогда
		
		ПодробноеСравнение = ПодробноеСравнениеСтрокБДКМ("Адрес", "address", Строка.Адрес, ?(Строка.ДанныеКМ.Свойство("address"), Строка.ДанныеКМ.address, ""));
		
		Результат.КодОшибки 	= ПодробноеСравнение.КодОшибки;
		Результат.Лог 					= Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + ". " + ПодробноеСравнение.Лог + Символы.ПС;
		
		Возврат Результат;
				
	КонецЕсли;

    Если Строка.НомерДома <> ?(Строка.ДанныеКМ.Свойство("house"), Строка.ДанныеКМ.house, "") Тогда
		
		ПодробноеСравнение = ПодробноеСравнениеСтрокБДКМ("НомерДома", "house", Строка.НомерДома, ?(Строка.ДанныеКМ.Свойство("house"), Строка.ДанныеКМ.house, ""));
		
		Результат.КодОшибки 	= ПодробноеСравнение.КодОшибки;
		Результат.Лог 					= Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + ". " + ПодробноеСравнение.Лог + Символы.ПС;
		
		Возврат Результат;
		
	КонецЕсли;

    Если Строка.КоординатыШирота <> ШиротаКМ Тогда
    	
		Результат.КодОшибки = 1;
		Результат.Лог = Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + "." + КоординатыЛог + "ШиротаБД:"  + Строка(Строка.КоординатыШирота) + " <> ШиротаКМ " + Строка(ШиротаКМ) + Символы.ПС;
		
		Возврат Результат;
		
	КонецЕсли;

    Если Строка.КоординатыДолгота <> ДолготаКМ Тогда
    	
		Результат.КодОшибки = 1;
		Результат.Лог = Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + "." + КоординатыЛог + "ДолготаБД:"  + Строка(Строка.КоординатыДолгота) + " <> ДолготаКМ " + Строка(ДолготаКМ) + Символы.ПС;
		
		Возврат Результат;
		
	КонецЕсли;

    Если Строка.ФормаОрганизации <> ?(Строка.ДанныеКМ.Свойство("legalStatus"), Строка.ДанныеКМ.legalStatus, 0) Тогда
		
		Результат.КодОшибки = 1;
		Результат.Лог = Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + ". Форма организации БД:"  + Строка(Строка.ФормаОрганизации) + " <> Форма организации КМ " + Строка(?(Строка.ДанныеКМ.Свойство("legalStatus"), Строка.ДанныеКМ.legalStatus, 0)) + Символы.ПС;
		
		Возврат Результат;
		
	КонецЕсли;

    Если Строка.ЮридическоеНаименование <> ?(Строка.ДанныеКМ.Свойство("legalname"), Строка.ДанныеКМ.legalname, "") Тогда
		
		ПодробноеСравнение = ПодробноеСравнениеСтрокБДКМ("ЮридическоеНаименование", "legalname", Строка.ЮридическоеНаименование, ?(Строка.ДанныеКМ.Свойство("legalname"), Строка.ДанныеКМ.legalname, ""));
		
		Результат.КодОшибки 	= ПодробноеСравнение.КодОшибки;
		Результат.Лог 			= Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + ". " + ПодробноеСравнение.Лог + Символы.ПС;
		
		Возврат Результат;
		
    КонецЕсли;
    
    //Строка.КонтактноеЛицо это строка дерева значений в ней сейчас количество контактных лиц лежит.
    Если ЗначениеЗаполнено(Строка.КонтактноеЛицо) = Ложь 
    	И Строка.ДанныеКМ.Свойство("contact") = Ложь Тогда
    	//Ничего не делаем нет контактных лиц. 
    ИначеЕсли ЗначениеЗаполнено(Строка.КонтактноеЛицо) = Ложь 
    		И Строка.ДанныеКМ.Свойство("contact") = Истина
    		И ТипЗнч(Строка.ДанныеКМ.contact) = Тип("Массив")
    		И ЗначениеЗаполнено(Строка.ДанныеКМ.contact) = Ложь   Тогда
 		//Ничего не делаем нет контактных лиц.
    ИначеЕсли ЗначениеЗаполнено(Строка.КонтактноеЛицо) = Истина
    	И Строка.ДанныеКМ.Свойство("contact")  = Истина
    	И ТипЗнч(Строка.ДанныеКМ.contact) = Тип("Массив")
    	И ЗначениеЗаполнено(Строка.ДанныеКМ.contact) = Истина
    	И (
    		(
    		Строка.Строки.Количество() = Строка.ДанныеКМ.contact.Количество() 
    		ИЛИ 
    		(
    			Строка.КонтактноеЛицо = 0 И Строка.ДанныеКМ.contact.Количество() = 1
    		)
    		)
    	  ) Тогда
    	//Когда количество контактных лиц совпадает в БД и КМ, сравниваем их.
    	Итр = 0;
    	
    	Для Каждого стр из Строка.Строки Цикл
    		
    		КонтактноеЛицоВБД = Новый Соответствие();
    		КонтактноеЛицоВБД.Вставить("Имя", 			стр.КонтактноеЛицо.name);
    		КонтактноеЛицоВБД.Вставить("ДлинаИмени", 	СтрДлина(КонтактноеЛицоВБД["Имя"]));
    		КонтактноеЛицоВБД.Вставить("Телефон", 		стр.КонтактноеЛицо.phone);
    		
    		КонтактноеЛицоВКМ = Новый Соответствие();
    		КонтактноеЛицоВКМ.Вставить("Имя", 		?(Строка.ДанныеКМ.contact[Итр].Свойство("name"), Строка.ДанныеКМ.contact[Итр].name, ""));
    		КонтактноеЛицоВКМ.Вставить("ДлинаИмени", СтрДлина(КонтактноеЛицоВКМ["Имя"]));
    		КонтактноеЛицоВКМ.Вставить("Телефон", 	?(Строка.ДанныеКМ.contact[Итр].Свойство("phone"), Строка.ДанныеКМ.contact[Итр].phone, ""));
    		    		    		
    		Если КонтактноеЛицоВБД["Имя"] = Лев(КонтактноеЛицоВКМ["Имя"], СтрДлина(КонтактноеЛицоВБД["Имя"]))
    			И КонтактноеЛицоВБД["Телефон"] = КонтактноеЛицоВКМ["Телефон"] Тогда
    			
    			Итр = Итр + 1;
    			
    			Продолжить;
    		
//    		ИначеЕсли КонтактноеЛицоВБД["ДлинаИмени"] <> КонтактноеЛицоВКМ["ДлинаИмени"] Тогда
//    			
//    			ТекстЛог = "Контактное лицо не совпадает, разница в длине имени:
//    			|В БД: " + КонтактноеЛицоВБД["ДлинаИмени"] + "
//    			|В КМ: " + КонтактноеЛицоВКМ["ДлинаИмени"] + "
//    			|Дополнительная информация:";
//    			
    		Иначе
    			ТекстЛог = "Контактное лицо не совпадает:";
    		КонецЕсли;   	
    			
    		Результат.КодОшибки = 1;
    		
    		ТекстЛог =  ТекстЛог + "
    		|Имя:
    		|В БД: " + КонтактноеЛицоВБД["Имя"] + "
    		|В КМ: " + КонтактноеЛицоВКМ["Имя"] + "
    		|Телефон:
    		|В БД: " + КонтактноеЛицоВБД["Телефон"] + "
    		|В КМ: " + КонтактноеЛицоВКМ["Телефон"] + "
    		|";
    		
    		Результат.КодОшибки = 1;
    		
    		Результат.Лог = Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + ". "  + Символы.ПС + ТекстЛог;
    	    		
    		Возврат Результат;	
    		
    	КонецЦикла;
    	
    ИначеЕсли Строка.ДанныеКМ.Свойство("contact")  = Истина
    		И ТипЗнч(Строка.ДанныеКМ.contact) = Тип("Массив")
    		И ЗначениеЗаполнено(Строка.ДанныеКМ.contact) = Истина Тогда
    	
	    	ТекстЛог =  " Количество контактных лиц не совпадает:
	    		|В БД:
	    		|";
	    	//Расшифруем для лога
	    	Итр = 0;
	    	Для Каждого стр из Строка.Строки Цикл
	    		
	    		КонтактноеЛицоВБД =	стр.КонтактноеЛицо.name;
	    		
	    		ТекстЛог = ТекстЛог + КонтактноеЛицоВБД + Символы.ПС;
	    		
	    	КонецЦикла;
	    	
	    	ТекстЛог = ТекстЛог + "В КМ:
	    		|";
	    	
	    	Для Каждого стр из Строка.ДанныеКМ.contact Цикл
	    		
	    		КонтактноеЛицоВКМ = ?(стр.Свойство("name"), стр.name, "");
	    		
	    		ТекстЛог = ТекстЛог + КонтактноеЛицоВКМ + Символы.ПС;
	    		
	    	КонецЦикла;
	    	
	    	Результат.КодОшибки = 1;
	    	
    		Результат.Лог = Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + ". "  + Символы.ПС + ТекстЛог;
    	    		
    		Возврат Результат;
    		   		  				
    Иначе
    	
    	Результат.КодОшибки = 1;
		
		ТекстЛог =  "Другие причины не совпадения контктных лиц, информация:
		| Строка.КонтактноеЛицо (Количество, т.к. это строка дерева значений) = " + 
			Строка(Строка.КонтактноеЛицо) + "
		| Строка.ДанныеКМ.Свойство(""contact"") = " + 
			?(Строка.ДанныеКМ.Свойство("contact") = Истина, "Истина", "Ложь") + "
		| ТипЗнч(Строка.ДанныеКМ.contact) = " + 
			?(Строка.ДанныеКМ.Свойство("contact") = Истина, ТипЗнч(Строка.ДанныеКМ.contact), "Неопределено") + "
		| Строка.ДанныеКМ.contact (если массив то количество) = " + 
			?(Строка.ДанныеКМ.Свойство("contact") = Истина, ?(ТипЗнч(Строка.ДанныеКМ.contact) = Тип("Массив"), Строка.ДанныеКМ.contact.Количество(), Строка.ДанныеКМ.contact), "Нет данного свойства") + "";
    	
		Результат.Лог = Результат.Лог + "ИД Пункта: "+ Строка(Строка.ИД) + ". "  + Символы.ПС + ТекстЛог;
		
		Возврат Результат;
        	
    КонецЕсли;    
	
	Возврат Результат;

КонецФункции

Функция СинхронизацияСправочникКМ_ПунктыПогрузкиВыгрузки(Организация, ПриоритетБД = Ложь, 
												ПунктыБД = Неопределено, ПунктыКМ = Неопределено) Экспорт

Результат = Новый Структура;
	Результат.Вставить("КодОшибки", 0);
	Результат.Вставить("Описание",  "");
	Результат.Вставить("Лог",  		"");
	
	#Область ПроверкаВхПараметров
	
	НеВерныеПараметры = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда	
		
		Результат.Лог = Результат.Лог + "Параметр Организация не может быть пустым...
						|";
	
		НеВерныеПараметры = Истина;
	
	КонецЕсли;
	
	Если (ПунктыКМ <> Неопределено) И (ТипЗнч(ПунктыКМ) <> Тип("Массив")) Тогда	
		
		Результат.Лог = Результат.Лог + "Не верно передан параметр ПунктыКМ...
						|";
	
		НеВерныеПараметры = Истина;
	
	КонецЕсли;
						
	Если (ПунктыБД <> Неопределено)	И (ТипЗнч(ПунктыБД) <> Тип("Массив")) Тогда	
			
		Результат.Лог = Результат.Лог + "Не верно передан параметр ПунктыБП...
						|";						
		
		НеВерныеПараметры = Истина;
	
	ИначеЕсли (ПунктыБД <> Неопределено) И (ТипЗнч(ПунктыБД) = Тип("Массив")) 
				И (ПунктыБД.Количество() > 0) 
					И (ТипЗнч(ПунктыБД[0]) <> Тип("СправочникСсылка.КМ_ПунктыПогрузкиВыгрузки")) Тогда	
		
		Результат.Лог = Результат.Лог + "Не верный тип (должен быть СправочникСсылка.КМ_ПунктыПогрузкиВыгрузки)"
						+ "элементов в массиве параметра ПунктыБП...
						|";						
		
		НеВерныеПараметры = Истина;
		
	КонецЕсли;	
	
	Если НеВерныеПараметры Тогда
		
		Результат.КодОшибки = 1;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, Организация);
		Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;
		
		Возврат Результат;
		
	КонецЕсли;
	#КонецОбласти
	
	Результат.Лог = Результат.Лог + "Получаю настройки связи с Каргомарт...
		|";
	
	НастройкиКаргомарт = КМ_ОбщийМодульВызовСервера.ПолучитьНастройкиКаргомарт(Организация);

	Если НастройкиКаргомарт = Неопределено Тогда
		
		Результат.КодОшибки = 1;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, Организация);
		Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;
		Возврат Результат;
		
	Иначе
		 Результат.Лог = Результат.Лог + "Настройки получены.
			|";
	КонецЕсли;
			
	//Получение данных БД.
	Результат.Лог = Результат.Лог + "Получаю данные из БД...
		|";

	ЗапросПункты = Новый Запрос;
	ЗапросПункты.Текст = 
	"ВЫБРАТЬ
	|	КМ_ПунктыПогрузкиВыгрузки.ИД КАК ИД,
	|	КМ_ПунктыПогрузкиВыгрузки.ПолноеНаименование КАК ПолноеНаименование,
	|	КМ_ПунктыПогрузкиВыгрузки.НаселенныйПункт КАК НаселенныйПункт,
	|	КМ_ПунктыПогрузкиВыгрузки.КЛАДР КАК КЛАДР,
	|	КМ_ПунктыПогрузкиВыгрузки.Адрес КАК Адрес,
	|	КМ_ПунктыПогрузкиВыгрузки.НомерДома КАК НомерДома,
	|	КМ_ПунктыПогрузкиВыгрузки.Комментарий КАК Комментарий,
	|	КМ_ПунктыПогрузкиВыгрузки.КоординатыШирота КАК КоординатыШирота,
	|	КМ_ПунктыПогрузкиВыгрузки.КоординатыДолгота КАК КоординатыДолгота,
	|	КМ_ПунктыПогрузкиВыгрузки.ФормаОрганизации КАК ФормаОрганизации,
	|	КМ_ПунктыПогрузкиВыгрузки.ЮридическоеНаименование КАК ЮридическоеНаименование,
	|	КМ_ПунктыПогрузкиВыгрузки.Ссылка КАК Ссылка,
	|	КМ_ПунктыПогрузкиВыгрузки.Владелец КАК Организация,
	|	КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация.КонтактноеЛицо КАК КонтактноеЛицоИмя,
	|	КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация.Телефон КАК Телефон,
	|	КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация.Добавочный КАК Добавочный,
	|	КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.garGuid,
	|	КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.countryCode,
	|	КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.code,
	|	КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.regionName,
	|	КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.standardizedAddress
	|ИЗ
	|	Справочник.КМ_ПунктыПогрузкиВыгрузки КАК КМ_ПунктыПогрузкиВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КМ_ПунктыПогрузкиВыгрузки.КонтактнаяИнформация КАК
	|			КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация
	|		ПО КМ_ПунктыПогрузкиВыгрузки.Ссылка = КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КМ_ПунктыПогрузкиВыгрузки.АдресДляКМ КАК КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ
	|		ПО КМ_ПунктыПогрузкиВыгрузки.Ссылка = КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.Ссылка
	|ГДЕ
	|	НЕ КМ_ПунктыПогрузкиВыгрузки.ПометкаУдаления
	|	И КМ_ПунктыПогрузкиВыгрузки.Владелец = &Организация
	|	И &УсловиеОтбора";

	ЗапросПункты.УстановитьПараметр("Организация", Организация);
	
	Если  (ПунктыБД = Неопределено)  И (ПунктыКМ = Неопределено) Тогда
		ЗапросПункты.УстановитьПараметр("УсловиеОтбора", Истина);
	ИначеЕсли (ПунктыКМ <> Неопределено) И (ПунктыБД = Неопределено) Тогда

			ЗапросПункты.Текст = СтрЗаменить(ЗапросПункты.Текст, "&УсловиеОтбора", 
				"КМ_ПунктыПогрузкиВыгрузки.ИД В (&ПунктыКМ)");
			
			ЗапросПункты.УстановитьПараметр("ПунктыКМ", ПунктыКМ);
			
	ИначеЕсли (ПунктыКМ = Неопределено) И (ПунктыБД <> Неопределено) Тогда
		
		ЗапросПункты.Текст = СтрЗаменить(ЗапросПункты.Текст, "&УсловиеОтбора", 
				"КМ_ПунктыПогрузкиВыгрузки.Ссылка В (&ПунктыБД)");
		
		ЗапросПункты.УстановитьПараметр("ПунктыБД", ПунктыБД);		
				
	КонецЕсли;
		
	Если (ПунктыКМ <> Неопределено) И (ПунктыБД <> Неопределено) Тогда
			
			ТекстДопЗапроса = " 
			|ОБЪЕДИНИТЬ ВСЕ
			|" + ЗапросПункты.Текст;
					
			ТекстДопЗапроса = СтрЗаменить(ТекстДопЗапроса, "&УсловиеОтбора", 
				"КМ_ПунктыПогрузкиВыгрузки.ИД В (&ПунктыКМ)");
				
			ЗапросПункты.Текст = СтрЗаменить(ЗапросПункты.Текст, "&УсловиеОтбора", 
				"КМ_ПунктыПогрузкиВыгрузки.Ссылка В (&ПунктыБД)");
					
			ЗапросПункты.Текст = ЗапросПункты.Текст + ТекстДопЗапроса;
			
			ЗапросПункты.УстановитьПараметр("ПунктыБД", ПунктыБД);
			ЗапросПункты.УстановитьПараметр("ПунктыКМ", ПунктыКМ);
	
	КонецЕсли;
	
	ЗапросПункты.Текст = ЗапросПункты.Текст + Символы.ПС + "ИТОГИ
						|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтактноеЛицо),
						|	МАКСИМУМ(КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.garGuid) КАК garGuid,
						|	МАКСИМУМ(КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.countryCode) КАК countryCode,
						|	МАКСИМУМ(КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.code) КАК code,
						|	МАКСИМУМ(КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.regionName) КАК regionName,
						|	МАКСИМУМ(КМ_ПунктыПогрузкиВыгрузкиАдресДляКМ.standardizedAddress) КАК standardizedAddress
						|ПО	
						|	Ссылка";
	
	СпособОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
	
	ТаблицаСоответствия = Новый ДеревоЗначений;
	
	ТаблицаСоответствия = ЗапросПункты.Выполнить().Выгрузить(СпособОбхода);
	
	ТаблицаСоответствия.Колонки.Добавить("КонтактноеЛицо",,,);
	
	Для Каждого КонтактныеЛица из ТаблицаСоответствия.Строки Цикл
		
		КонтактныеЛица.КонтактноеЛицо = КонтактныеЛица.КонтактноеЛицоИмя; //Копируем кол-во строк
		
		Для каждого КонтактныеЛицаСтрока из КонтактныеЛица.Строки Цикл
		
			СтруктураДанны 					= Новый Структура("name, phone, ext");
			СтруктураДанны.name 			= КонтактныеЛицаСтрока.КонтактноеЛицоИмя;
			СтруктураДанны.phone 			= КонтактныеЛицаСтрока.Телефон;
			СтруктураДанны.ext 				= КонтактныеЛицаСтрока.Добавочный;

			КонтактныеЛицаСтрока.КонтактноеЛицо = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанны);
		
		КонецЦикла;
			
	КонецЦикла;
	
	ТаблицаСоответствия.Колонки.Удалить(ТаблицаСоответствия.Колонки.Найти("КонтактноеЛицоИмя"));
	ТаблицаСоответствия.Колонки.Удалить(ТаблицаСоответствия.Колонки.Найти("Телефон"));
	ТаблицаСоответствия.Колонки.Удалить(ТаблицаСоответствия.Колонки.Найти("Добавочный"));
	
	ТаблицаСоответствия.Колонки.Добавить("АдресДляКМ",,,);
	
	Для Каждого СтрокаТаблицы из ТаблицаСоответствия.Строки Цикл
		
		ВременнаяСтруктура = Новый Структура;
		ВременнаяСтруктура.Вставить("garGuid", 				СтрокаТаблицы.garGuid);
		ВременнаяСтруктура.Вставить("countryCode", 			СтрокаТаблицы.countryCode);
		ВременнаяСтруктура.Вставить("code", 				СтрокаТаблицы.code);
		ВременнаяСтруктура.Вставить("regionName", 			СтрокаТаблицы.regionName);
		ВременнаяСтруктура.Вставить("standardizedAddress", 	СтрокаТаблицы.standardizedAddress);	
		
		СтрокаТаблицы.АдресДляКМ = ОбщегоНазначения.СкопироватьРекурсивно(ВременнаяСтруктура);
			
	КонецЦикла;
	
	ТаблицаСоответствия.Колонки.Удалить(ТаблицаСоответствия.Колонки.Найти("garGuid"));
	ТаблицаСоответствия.Колонки.Удалить(ТаблицаСоответствия.Колонки.Найти("countryCode"));
	ТаблицаСоответствия.Колонки.Удалить(ТаблицаСоответствия.Колонки.Найти("code"));
	ТаблицаСоответствия.Колонки.Удалить(ТаблицаСоответствия.Колонки.Найти("regionName"));
	ТаблицаСоответствия.Колонки.Удалить(ТаблицаСоответствия.Колонки.Найти("standardizedAddress"));
	
	СписокКолонок = "";
	
	Для Каждого КолонкаТаб из ТаблицаСоответствия.Колонки Цикл
		СписокКолонок = СписокКолонок + ?(СписокКолонок = "", "", ",") + КолонкаТаб.Имя;
	КонецЦикла;
	
	Результат.Лог = Результат.Лог + "Получено " + ТаблицаСоответствия.Строки.Количество() + " записей.
		|";

	ТС = Новый ОписаниеТипов("Структура");
	ТаблицаСоответствия.Колонки.Добавить("ДанныеКМ", ТС, "ДанныеКМ");
	ТС = Новый ОписаниеТипов("Структура");
	ТаблицаСоответствия.Колонки.Добавить("ДанныеКМJSON", ТС, "ДанныеКМJSON");
	ТС = Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСоответствия.Колонки.Добавить("ОбновитьГАР", ТС, "ОбновитьГАР"); //Нужен обязательно ГАР для загрузки на КМ
	ТС = Новый ОписаниеТипов("Булево");
	ТаблицаСоответствия.Колонки.Добавить("НетВБД", ТС, "НетВБД");
	
	//Получение данных КМ.
	Результат.Лог = Результат.Лог + "Получаю данные из Каргомарт...
		|";
	
	СоединениеHTTP 	= ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
	
	Токен 			= ПолучитьТокенАвторизацииКаргомарт(Организация, НастройкиКаргомарт, СоединениеHTTP, Результат);
	
	Если Токен = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", 		"application/json"); 
	Заголовки.Вставить("Authorization",	Токен);

    АдресРесурса = "/api/v2/storage-point";
    
	ЗапрашиваемыйМассив = Новый Массив;
	СтрокаФильтра 		= "";
	
	Если ТипЗнч(ПунктыКМ) = Тип("Массив") Тогда
		
		Для Каждого ПунктКМ из ПунктыКМ Цикл
			ЗапрашиваемыйМассив.Добавить(ПунктКМ);
		КонецЦикла;
		
		Для Каждого СтрокаПунктБД Из ТаблицаСоответствия.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаПунктБД.ИД) Тогда
				Если ЗапрашиваемыйМассив.Найти(СтрокаПунктБД.ИД) = Неопределено Тогда
					ЗапрашиваемыйМассив.Добавить(СтрокаПунктБД.ИД);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ПунктКМ из ЗапрашиваемыйМассив Цикл
			СтрокаФильтра = СтрокаФильтра + "&" + "selectedIds[]=" + Формат(ПунктКМ, "ЧГ=0;");
		КонецЦикла;
		
	КонецЕсли;

	НомерСтраницы 		= 1;
	ПолученоЭлементов 	= 0;
	ПрерватьЗагрузку 	= Ложь;
	
	Пока Не ПрерватьЗагрузку Цикл //Пока не перестанет приходить следующая страница данных.
	
	СтрокаЗапроса = АдресРесурса + "?" + "page=" + Формат(НомерСтраницы, "ЧГ=0") + "&perPage=60" + СтрокаФильтра;
		ЗапросHTTP_ПолучитьСотрудников 				= Новый HTTPЗапрос(СокрЛП(СтрокаЗапроса));
		ЗапросHTTP_ПолучитьСотрудников.Заголовки 	= Заголовки;

		Попытка
			ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP_ПолучитьСотрудников);
		Исключение

			ИО = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);

			Результат.КодОшибки = 3;
			ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, СоединениеHTTP.Сервер,
				СтрокаЗапроса, СоединениеHTTP.Порт, "Токен", СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС,
				Символы.ПС + Символы.Таб));

			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеСпискаПунктов.ОбращениеК_HTTP_Сервису",
				Результат.Лог, ТекстОшибки, Ложь);
			Возврат Результат;

		КонецПопытки;

		СтрокаJSON 			= ОтветHTTP.ПолучитьТелоКакСтроку();
		
		Если ОтветHTTP.КодСостояния > 200 Тогда
			
			ТекстОшибки = "Сервер вернул код " + ОтветHTTP.КодСостояния + Символы.ПС
				+ "Текст сообщения:
				|" + СтрокаJSON;
			Результат.КодОшибки = 3;
			ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, СоединениеHTTP.Сервер,
				СтрокаЗапроса, СоединениеHTTP.Порт, "Токен", СтрЗаменить( ТекстОшибки, Символы.ПС,
				Символы.ПС + Символы.Таб));

			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеСпискаПунктов.ОбращениеК_HTTP_Сервису",
				Результат.Лог, ТекстОшибки, Ложь);
			Возврат Результат;
			
		КонецЕсли;

		ПолученныеДанныеСтруктура 	= КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаJSON);

		Если ПолученныеДанныеСтруктура = Неопределено 
			ИЛИ НЕ ПолученныеДанныеСтруктура.Свойство("data")
			ИЛИ НЕ ПолученныеДанныеСтруктура.data.Свойство("storagePoint") Тогда

			Результат.КодОшибки = 6;
			ТекстОшибки 		= КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, СтрокаJSON);
			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеСпискаПунктов.ПроверкаФорматаДанных",
				Результат.Лог, ТекстОшибки, Ложь);

			Продолжить;

		КонецЕсли;

		//Обработка_тела_сообщения
			
		locality = Новый Соответствие();
		
		Если ПолученныеДанныеСтруктура.data.Свойство("locality") Тогда
		
			Для каждого Элемент из ПолученныеДанныеСтруктура.data.locality Цикл
				locality.Вставить(Элемент.id, Элемент);
			КонецЦикла;
		
		КонецЕсли;
		
		Для Каждого СтруктураПункт из ПолученныеДанныеСтруктура.data.storagePoint Цикл
			Если ТипЗнч(ПунктыКМ) = Тип("Массив") И ЗапрашиваемыйМассив.Найти(СтруктураПункт.id) = Неопределено Тогда
				ПрерватьЗагрузку 	= Истина;
			Иначе
				
				ПолученныеДанныеПунктСтруктура = Неопределено;
				
				ПолученныеДанныеПунктСтруктура = Новый Структура ("data", Новый Структура);			
				ПолученныеДанныеПунктСтруктура.data.Вставить("storagePoint", СтруктураПункт);

				Если locality.Получить(СтруктураПункт.code) <> Неопределено  Тогда	
						ПолученныеДанныеПунктСтруктура.data.Вставить("locality", locality.Получить(СтруктураПункт.code));
				КонецЕсли;
				
				ПолученоЭлементов 	= ПолученоЭлементов + 1;
				
				НайденнаяСтрока	= ТаблицаСоответствия.Строки.Найти(СтруктураПункт.id, "ИД");
				
				Если НайденнаяСтрока = Неопределено Тогда
					
					НайденнаяСтрока 		= ТаблицаСоответствия.Строки.Добавить();
					НайденнаяСтрока.ИД 		= СтруктураПункт.id;
					НайденнаяСтрока.НетВБД 	= Истина;
					
				КонецЕсли;
				
				НайденнаяСтрока.ДанныеКМJSON	= ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ПолученныеДанныеПунктСтруктура));													
				НайденнаяСтрока.ДанныеКМ 		= ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураПункт));
				
				//Ищем есть ли ГАР, если нет, помечаем и будем потом искать в адресном классификаторе
				//++
				Если НайденнаяСтрока.ДанныеКМJSON.Свойство("data")
					И НайденнаяСтрока.ДанныеКМJSON.data.Свойство("storagePoint") 
					И НайденнаяСтрока.ДанныеКМJSON.data.storagePoint.Свойство("addressObject")
					И НайденнаяСтрока.ДанныеКМJSON.data.storagePoint.addressObject.Свойство("garGuid")
					И ЗначениеЗаполнено(НайденнаяСтрока.ДанныеКМJSON.data.storagePoint.addressObject.garGuid) = Ложь Тогда
		
				НайденнаяСтрока.ОбновитьГАР = 1;	
				
				ИначеЕсли НайденнаяСтрока.ДанныеКМJSON.Свойство("data")
				 	И НайденнаяСтрока.ДанныеКМJSON.data.Свойство("storagePoint")
					И НайденнаяСтрока.ДанныеКМJSON.data.storagePoint.Свойство("addressObject") = Ложь Тогда
				
				//Даже если addressObject нет, то при обновлении пункта, придется его создать и нужен будет ГАР.	
				НайденнаяСтрока.ОбновитьГАР = 1;	
				ИначеЕсли НайденнаяСтрока.ДанныеКМJSON.Свойство("data")
					И НайденнаяСтрока.ДанныеКМJSON.data.Свойство("storagePoint") 
					И НайденнаяСтрока.ДанныеКМJSON.data.storagePoint.Свойство("addressObject")
					И НайденнаяСтрока.ДанныеКМJSON.data.storagePoint.addressObject.Свойство("garGuid")
					И ЗначениеЗаполнено(НайденнаяСтрока.ДанныеКМJSON.data.storagePoint.addressObject.garGuid) = Истина Тогда
				
					Если НайденнаяСтрока.АдресДляКМ = Неопределено Тогда
						
						ВременнаяСтруктура = Новый Структура;
						ВременнаяСтруктура.Вставить("garGuid", НайденнаяСтрока.ДанныеКМJSON.data.storagePoint.addressObject.garGuid);
						
						НайденнаяСтрока.АдресДляКМ = ОбщегоНазначения.СкопироватьРекурсивно(ВременнаяСтруктура);
						
					Иначе
					
						НайденнаяСтрока.АдресДляКМ.garGuid = НайденнаяСтрока.ДанныеКМJSON.data.storagePoint.addressObject.garGuid;
					
					КонецЕсли;
				
				КонецЕсли;
				
				//--
				
			КонецЕсли;
		КонецЦикла;

		//Обработка пагинации.
		Если ПолученныеДанныеСтруктура.data.pagination.page < НомерСтраницы
			Или ПолученныеДанныеСтруктура.data.pagination.total = ПолученоЭлементов Тогда
				// Обошли все страницы

			Результат.Лог = Результат.Лог + "Получены все страницы данных ("
				+ ПолученныеДанныеСтруктура.data.pagination.page + " страниц, "
				+ ПолученныеДанныеСтруктура.data.pagination.total + " пунктов)." + Символы.ПС;
			Прервать;

		КонецЕсли;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;

	Результат.Лог = Результат.Лог + "Получено " + ПолученоЭлементов + " записей.
		|";
	
	ОЧ = Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСоответствия.Колонки.Добавить("Действие", ОЧ, , );
	
	Если (ПунктыКМ = Неопределено) И (ПунктыБД <> Неопределено) Тогда
	//Запрашиваем ИД из базы ВСЕХ пунктов, ПунктыБД  <> Неопределено, а ПунктыКМ = Неопределено в этом случае, если ПриоритетБД = Истина
	//то Обновляем в КМ только нужный пункт и получем только НОВЫЕ.	
	
	//Запрашиваем все ИД из БД
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КМ_ПунктыПогрузкиВыгрузки.ИД
			|ИЗ
			|	Справочник.КМ_ПунктыПогрузкиВыгрузки КАК КМ_ПунктыПогрузкиВыгрузки
			|ГДЕ
			|	НЕ КМ_ПунктыПогрузкиВыгрузки.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ИДПунктов = Новый Соответствие;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИДПунктов.Вставить(ВыборкаДетальныеЗаписи.ИД, ВыборкаДетальныеЗаписи.ИД);
		КонецЦикла;
	
	//ИДПунктов - список ИД из БД
		
		Для Каждого Строка из ТаблицаСоответствия.Строки Цикл
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			//Этоновый пункт которого нет в БД
			//Но проверяем может это пункт в массиве ПунктыБД 
				Если ПунктыБД.Найти(Строка.Ссылка) <> Неопределено Тогда
				//Тогда смотря какой приоритет, нет смысла сравнивать Пункты
					Если ПриоритетБД = Истина Тогда
						//Пункт
						Строка.Действие = 1;//Обновить данные в КМ
						
					Иначе
						
						Строка.Действие = 2;//Обновить данные в БД
					
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(Строка.ИД) И ИДПунктов.Получить(Строка.ИД) = Неопределено Тогда
						
					Строка.Действие = 2;//Создать пункт в БД ПриоритетБД в любом случае Ложь - так надо 
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
	ИначеЕсли (ПунктыКМ <> Неопределено) И (ПунктыБД = Неопределено) Тогда	
		//Запрашиваем ИД из базы ВСЕХ пунктов, ПунктыБД  = Неопределено, а ПунктыКМ <> Неопределено в этом случае, если ПриоритетБД = Ложь
		//то Обновляем в БД только нужный пункт и отправляем только НОВЫЕ.	
		
		//Ищем в ТЗ Пункты у которыйх не заполнено поле ДанныеКМ, значит такой пункт не сопоставлен и он новый
		
		НовыеПунктыИзБД = ТаблицаСоответствия.Строки.НайтиСтроки(Новый Структура("ДанныеКМ", "")); //Выбираем все пункты которые не сопоставлены
			
		Для каждого Элемент из НовыеПунктыИзБД Цикл
			
			Элемент.Действие = 1; //Новые загружаем в КМ
			
		КонецЦикла;	
		
		Для каждого Элемент из ПунктыКМ ЦИкл
			
			//Теперь нужные пункты записываем в базу
			НайденнаяСтрока = ТаблицаСоответствия.Строки.Найти(Элемент, "ИД");
			НайденнаяСтрока.Действие = 2; //Записываем в БД
								
		КонецЦикла;
			
	Иначе	
	
		Для Каждого Строка из ТаблицаСоответствия.Строки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ИД) Тогда
				Строка.Действие = 1;//Выгрузить на Каргомарт
			ИначеЕсли НЕ ЗначениеЗаполнено(Строка.ДанныеКМ) Тогда
				Строка.Действие = 1;//Выгрузить на Каргомарт
			Иначе
				
				Если Не Строка.НетВБД Тогда
				
					ПунктыРазличны = ДанныеПунктаРазличаются(Строка);
					
					Результат.Лог = Результат.Лог + ПунктыРазличны.Лог;
					
					Если ПунктыРазличны.КодОшибки <> 0 Тогда 
						Если ПриоритетБД = Истина 
							И ЗначениеЗаполнено(Строка.Ссылка) Тогда
							Строка.Действие = 1;//Выгрузить на Каргомарт
						Иначе
							Строка.Действие = 2;//Обновить данные в БД
						КонецЕсли;
					Иначе
						Строка.Действие = 0;//Действие не требуется. Данные о сотруднике синхронны.
					КонецЕсли;
				
				ИначеЕсли ПриоритетБД = Ложь Тогда  
					Строка.Действие = 2;//Обновить данные в БД
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
		
	ТаблицаСоответствия.Строки.Сортировать("Действие");

	//Выгрузить на Каргомарт++

	Отбор = Новый Структура;
	Отбор.Вставить("Действие", 1);
	ОтобранныеСтроки = ТаблицаСоответствия.Строки.НайтиСтроки(Отбор);
		
	Если ОтобранныеСтроки.Количество() > 0 Тогда
		//Теперь на КМ нужен ГАР, его мы ищем в адресном классификаторе БД
		
		Результат.Лог = Результат.Лог + "Найдено  " + ОтобранныеСтроки.Количество() + " записей к выгрузке на Каргомарт.
						|	Выгружаю...";
		
		Для Каждого СтрокаКВыгрузке из ОтобранныеСтроки Цикл
			
			ВыгрузитьПунктВКаргомарт(СоединениеHTTP, Токен, СтрокаКВыгрузке, Организация, Результат);						
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Выгрузить на Каргомарт--

	//Обновить данные в БД++

	#Область ГАРизАдресногоКлассификатора
	
	Отбор = Новый Структура;	
	Отбор.Вставить("ОбновитьГАР", 1);	
	ОтобранныеСтроки = ТаблицаСоответствия.Строки.НайтиСтроки(Отбор);
	
	Если ОтобранныеСтроки.Количество() > 0 Тогда
		
		Результат.Лог = Результат.Лог + "Найдено  " + ОтобранныеСтроки.Количество() + " записей Пунктов к обновлению ГАР из адресного классификатора (из БД).
						|Обновляю...
						|";
		
		//Теперь на КМ нужен ГАР, его мы ищем в адресном классификаторе БД
		
		ГАРы 	= Новый ТаблицаЗначений();
		ОЧ = Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ГАРы.Колонки.Добавить("ИД", ОЧ);
		ОЧ = Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(17, 0, ДопустимыйЗнак.Неотрицательный));
		ГАРы.Колонки.Добавить("КЛАДР", ОЧ);
		ТС = Новый ОписаниеТипов("УникальныйИдентификатор");
		ГАРы.Колонки.Добавить("ГАР", ТС);
		
		Для Каждого СтрокаКВыгрузке из ОтобранныеСтроки Цикл
			
			НоваяСтрока 		= ГАРы.Добавить();
			НоваяСтрока.ИД 		= СтрокаКВыгрузке.ИД;
			
			КЛАДР = 1; //если КЛАДР = 0 вернуться все ГАРы, присваем 1
			
			Попытка
				
				Если СтрокаКВыгрузке.КЛАДР <> Неопределено Тогда
				//первые 3 символа это код страны
					КЛАДР = Число(Прав(СтрокаКВыгрузке.КЛАДР, СтрДлина(СтрокаКВыгрузке.КЛАДР) - 3));
				ИначеЕсли ЗначениеЗаполнено(СтрокаКВыгрузке.ДанныеКМ.code) = Истина Тогда
					КЛАДР = Число(Прав(СтрокаКВыгрузке.ДанныеКМ.code, СтрДлина(СтрокаКВыгрузке.ДанныеКМ.code) - 3));
				КонецЕсли;
				
			Исключение
				
				Результат.Лог = Результат.Лог + "Ошибка преобразования строки в число, (КЛАДР - 3 первых символа = Искомый КЛАДР). 
								|Пункта ИД " + Строка(СтрокаКВыгрузке.ИД) + "
								|КЛАДР: " + СтрокаКВыгрузке.КЛАДР + "
								|";
				
			КонецПопытки;
			
			НоваяСтрока.КЛАДР 	= КЛАДР; //При 0 возвращаются все ГАРы в запросе
			
			Если КЛАДР = 1 Тогда
				
				Результат.Лог = Результат.Лог + "У пункта (ИД " + Строка(СтрокаКВыгрузке.ИД) + ") не корректный КЛАДР:
								|" + СтрокаКВыгрузке.КЛАДР + "
								|";
				
				НоваяСтрока.КЛАДР = 1;				
								 
			КонецЕсли;
			
			НоваяСтрока.КЛАДР 	= КЛАДР;
			 
		КонецЦикла; 
		
		ГАРы = НайтиГАРыВАдресномКлассификаторе(ГАРы);
				
		Для Каждого ГАР из ГАРы Цикл			
			Если ЗначениеЗаполнено(ГАР.ГАР) = Истина Тогда
				
				НайденнаяСтрока = ТаблицаСоответствия.Строки.Найти(ГАР.ИД, "ИД");
				
				Если НайденнаяСтрока = Неопределено Тогда
					
					Результат.Лог = Результат.Лог + "Путкт с ИД " + Строка(ГАР.ИД) + " не найден в таблице соответствий...
									|Дополнительная информация:
									|ИД: 	" + Строка(ГАР.ИД) + "
									|ГАР: 	" + Строка(ГАР.ГАР) + "
									|КЛАДР 	" + Строка(ГАР.КЛАДР) + "
									|";
					
				Иначе
					
					Если НайденнаяСтрока.АдресДляКМ = Неопределено Тогда
						
						ВременнаяСтруктура = Новый Структура;
						ВременнаяСтруктура.Вставить("garGuid", ГАР.ГАР);
						
						НайденнаяСтрока.АдресДляКМ = ОбщегоНазначения.СкопироватьРекурсивно(ВременнаяСтруктура);
						
					Иначе
					
						НайденнаяСтрока.АдресДляКМ.garGuid = ГАР.ГАР;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;			
		КонецЦикла;
		
	Иначе
		Результат.Лог = Результат.Лог + "Обновление ГАР из адресного классификатора не требуется." + Символы.ПС;			
	КонецЕсли;
	
	#КонецОбласти

	Отбор = Новый Структура;
	Отбор.Вставить("Действие", 2);	
	ОтобранныеСтроки 			= ТаблицаСоответствия.Строки.НайтиСтроки(Отбор);
	
	Если ОтобранныеСтроки.Количество() > 0 Тогда
		
		Результат.Лог = Результат.Лог + "Найдено  " + ОтобранныеСтроки.Количество() + " записей Пунктов к загрузке из Каргомарта."
						+ Символы.ПС + "Загружаю...";
				
		Для Каждого СтрокаКВыгрузке из ОтобранныеСтроки Цикл

			Результат = СохранитьОбновитьПунктВ_БД(Организация, СтрокаКВыгрузке, Результат);
						
		КонецЦикла;
		
	Иначе
		Результат.Лог = Результат.Лог + "Загрузка данных пункта из Каргомарт не требуется." + Символы.ПС;			
	КонецЕсли;
	
	//Обновить данные в БД--
	
	Возврат Результат;

КонецФункции

Функция УдалитьКонтактноеЛицоИзБД(Организация, СтрокаКВыгрузке, Результат)
	
	Результат.Лог = Результат.Лог + "Записываю данные контактного лица." + Символы.ПС;
	
	ЗапросПункт = Новый Запрос;
	ЗапросПункт.Текст =
		"ВЫБРАТЬ
		|	КМ_ПунктыПогрузкиВыгрузки.Ссылка
		|ИЗ
		|	Справочник.КМ_ПунктыПогрузкиВыгрузки КАК КМ_ПунктыПогрузкиВыгрузки
		|ГДЕ
		|	НЕ КМ_ПунктыПогрузкиВыгрузки.ПометкаУдаления
		|	И КМ_ПунктыПогрузкиВыгрузки.ИД = &ИД
		|	И КМ_ПунктыПогрузкиВыгрузки.Владелец = &Организация";
	
	ЗапросПункт.УстановитьПараметр("ИД", СтрокаКВыгрузке.storagePointId);
	ЗапросПункт.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = ЗапросПункт.Выполнить();
	
	Если РезультатЗапроса.Пустой() ТОгда
	
		Результат.Лог = Результат.Лог + "Пункт (storagePointId: " + Строка(СтрокаКВыгрузке.ДанныеИзКМ.storagePointId) + ")не найден." + Символы.ПС;
	
		Возврат Результат;
	
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	НайденныеСтроки = СпрОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("id, КонтактноеЛицо", СтрокаКВыгрузке.id, СтрокаКВыгрузке.name));
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		
		Результат.Лог = Результат.Лог + "Найдено больше одной строки в ТЗ Контактная информация Пункта "  + Строка(СтрокаКВыгрузке.storagePointId) 
									+ ". Строка поиска id и КонтактноеЛицо: " + Строка(СтрокаКВыгрузке.id) + " " + СтрокаКВыгрузке.name 
									+ ". Процесс удаления прерван.
									|";	
		
		Возврат Результат;
	
	ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
		
		Результат.Лог = Результат.Лог + "Не найдено ни одной строки в ТЗ Контактная информация Пункта "  + Строка(СтрокаКВыгрузке.storagePointId) 
									+ ". Строка поиска id и КонтактноеЛицо: " + Строка(СтрокаКВыгрузке.id) + " " + СтрокаКВыгрузке.name 
									+ ". Процесс удаления прерван.
									|";	
		
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
			
		СпрОбъект.КонтактнаяИнформация.Удалить(НайденныеСтроки[0]);
		
		Результат.Лог = Результат.Лог + "Удаление строки в ТЗ КонтактнаяИнформация пункта с ИД " 
							+ СтрокаКВыгрузке.storagePointId + ". Успешно" + Символы.ПС;
		
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		СпрОбъект.Записать();
		
		Результат.Лог = Результат.Лог + "Изменения внесены в пункт с ИД " + СтрокаКВыгрузке.storagePointId 
							+ ". Успешно" + Символы.ПС;
	
	Исключение
	
		Инфо 					= ИнформацияОбОшибке();
		ИнфоДетальная 			= ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
		Результат.КодОшибки 	= 14;
		Результат.Описание 		= КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки) + Символы.ПС
									+ ИнфоДетальная;
		Результат.Лог 			= Результат.Лог + Результат.Описание + Символы.ПС;
				
		Возврат Результат;
	
	КонецПопытки;
	
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьКонтактноеЛицоИзКМ(СоединениеHTTP, Токен, Организация, СтрокаКВыгрузке, Результат)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", 		"*/*"); 
	Заголовки.Вставить("Authorization",	Токен);
					
	СтрокаЗапроса = "/api/v2/storage-point";
					
	ЗапросHTTP_ЗаписьКонтактноеЛицо 				= Новый HTTPЗапрос(СокрЛП(СтрокаЗапроса));
	ЗапросHTTP_ЗаписьКонтактноеЛицо.Заголовки 		= Заголовки;
					
	Результат.Лог = Результат.Лог + "Удаляю данные о контактном лице id """ + Строка(СтрокаКВыгрузке.id) + """ в Каргомарт...
						|";
			
	Попытка
						
			ЗапросHTTP_ЗаписьКонтактноеЛицо.АдресРесурса = СтрокаЗапроса + "/"
					                                         + Формат(СтрокаКВыгрузке.storagePointId, "ЧГ=0;")
						                                         + "/contact/" + Формат(СтрокаКВыгрузке.id, "ЧГ=0;");
				                                         
			ОтветHTTP = СоединениеHTTP.Удалить(ЗапросHTTP_ЗаписьКонтактноеЛицо); 
			
			Результат.Лог = Результат.Лог + "Данные о контактном лице id """ + Строка(СтрокаКВыгрузке.id) + """ Удалены в Каргомарт...
								|";
			                                         
	Исключение
						
		Инфо = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
						
		Результат.КодОшибки = 3;
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
						СоединениеHTTP.Сервер,
						СтрокаЗапроса,
						СоединениеHTTP.Порт,
						Токен,
						СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
						
		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( Инфо, "Каргомарт.УдалениеДанныхОКонтактномЛице.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь);
						
	КонецПопытки;
					
	СтрокаОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
				
	Если ОтветHTTP.КодСостояния <> 200
			И ОтветHTTP.КодСостояния <> 204 Тогда
						
		СтрокаОтвет = ?(ЗначениеЗаполнено(СтрокаОтвет), Символы.ПС + "Сообщение от сервера: " + Символы.ПС, "")+ СтрокаОтвет;
						
		Результат.КодОшибки = 3;
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
						СоединениеHTTP.Сервер,
						СтрокаЗапроса,
						СоединениеHTTP.Порт,
						Токен,
						"Код HTTP-ответа:" + ОтветHTTP.КодСостояния + СтрокаОтвет);
						
						КМ_ОбщийМодульВызовСервера.ОбработкаОшибок(, "Каргомарт.УдалениеДанныхОКонтактномЛице.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ПолучитьДанныеЗаказовИзКаргомарт(Организация, ДатаНачалаПоиска = Неопределено, МассивНомеровДляЗагрузки = Неопределено) Экспорт
	
	Результат = КМ_ОбщийМодульКлиентСервер.ИнициализироватьСтруктуруВозврата();
	
	ИмеетсяОтборПоНомерамЗаказов 	= ТипЗнч(МассивНомеровДляЗагрузки) = Тип("Массив") И МассивНомеровДляЗагрузки.Количество() > 0;
	
	НастройкиКаргомарт 				= КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьНастройкиКаргомарт(Организация);
	СоединениеHTTP 					= ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
	Токен 							= ПолучитьТокенАвторизацииКаргомарт(Организация, 
										НастройкиКаргомарт, 
										СоединениеHTTP, 
										Результат);
	
	Если Токен = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивСтатусыЗагружаемыхЗаказов = Новый Массив;
	МассивСтатусыЗагружаемыхЗаказов.Добавить("3");//3 - опубликован
	МассивСтатусыЗагружаемыхЗаказов.Добавить("4");//4 - торги
	МассивСтатусыЗагружаемыхЗаказов.Добавить("5");//5 - торги завершены, находится на этапе обработки
	МассивСтатусыЗагружаемыхЗаказов.Добавить("6");//6 - в рейсе
	МассивСтатусыЗагружаемыхЗаказов.Добавить("7");//7 - исполнен
	МассивСтатусыЗагружаемыхЗаказов.Добавить("8");//8 - архивный
	МассивСтатусыЗагружаемыхЗаказов.Добавить("110");//110 - Отказ перевозчика
	МассивСтатусыЗагружаемыхЗаказов.Добавить("120");//120 - Отказ отправителя
	МассивСтатусыЗагружаемыхЗаказов.Добавить("130");//130 - Заказ отменен отправителем
	МассивСтатусыЗагружаемыхЗаказов.Добавить("140");//140 - Заказ отменен по обоюдному согласию
	
		
	Заказы = Новый Соответствие;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", 		"application/json"); 
	Заголовки.Вставить("Authorization",	Токен);
	
	НомерТекущегоЗапроса 			= ПолучитьНомерПоследнегоЗапросаКаргомарт(Организация);
	ПолученныйНомерТекущегоЗапроса 	= Неопределено;
	ФильтрЗагружамыхСтатусов 		= "";
	
	Для Каждого ЗагружаемыйСтатусЗаказа из МассивСтатусыЗагружаемыхЗаказов Цикл
		
		//&filter[status][]=" + ЗагружаемыйСтатусЗаказа
		//Тут сформировать массив загружаемых статусов,  и на него переделать всё.
		ФильтрЗагружамыхСтатусов = ФильтрЗагружамыхСтатусов + ?(ФильтрЗагружамыхСтатусов = "", "", "&") + "filter[status][]=" + ЗагружаемыйСтатусЗаказа;
		
	КонецЦикла;
		
	Результат.Лог 		= Результат.Лог + "Начинаю загрузку заказов..." + Символы.ПС;
	
	МассивУИДЗаказов 	= Новый Массив;
	
	Если ИмеетсяОтборПоНомерамЗаказов Тогда
		
		ШаблонДляЗаявки = "/api/v2/order/ids?filter[serial]=[НомерЗаказа]&filter[kind][]=expeditor&" + ФильтрЗагружамыхСтатусов + "&page=1&perPage=20";
		Для Каждого ЭлементМассива Из МассивНомеровДляЗагрузки Цикл
			
			СтрокаЗапроса = СокрЛП(СтрЗаменить(ШаблонДляЗаявки, "[НомерЗаказа]", ЭлементМассива));
			
			ЗапросHTTP_ПолучитьЗаказ = Новый HTTPЗапрос(СокрЛП(СтрокаЗапроса));
			ЗапросHTTP_ПолучитьЗаказ.Заголовки = Заголовки;
			
			Попытка
				ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP_ПолучитьЗаказ);
			Исключение
				
				ИО = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
				
				Результат.КодОшибки = 3;
				ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
					СоединениеHTTP.Сервер,
					СтрокаЗапроса,
					СоединениеHTTP.Порт,
					"******",
					СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
				
				КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеСпискаЗаказов.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь);
				Возврат Результат;
				
			КонецПопытки;
			
			СтрокаJSON 		= ОтветHTTP.ПолучитьТелоКакСтроку();
			СтруктураЗаказа = КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаJSON);
			
			Если СтруктураЗаказа = Неопределено Тогда
				
				Результат.КодОшибки = 6;
				ТекстОшибки 		= КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
					СтрокаJSON);
				КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеЗаказа.ПроверкаФорматаДанных", Результат.Лог, ТекстОшибки, Ложь);
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтруктураЗаказа.data.order.Количество() > 0 Тогда
				
				Для Каждого УИДЗаказа Из СтруктураЗаказа.data.order Цикл
					Если МассивУИДЗаказов.Найти(УИДЗаказа) = Неопределено Тогда
						МассивУИДЗаказов.Добавить(УИДЗаказа);
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				ТекстОшибки = "Не удалось получить заказ №" + ЭлементМассива + "
				|─────────────────────────────────────────────────────────────────────────
				|	Cервер:		" + СоединениеHTTP.Сервер + "
				|	Путь:		" + СтрокаЗапроса + "
				|	Порт:		" + СоединениеHTTP.Порт + "
				|	Токен:		******
				|─────────────────────────────────────────────────────────────────────────
				|	Ответ:
				|	" + СтрокаJSON;
				КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеЗаказа.ПроверкаФорматаДанных", Результат.Лог, ТекстОшибки, Ложь);
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НомерСтраницы 		= 1;
		ПолученоЭлементов 	= 0;
		ШаблонСтрокаЗапроса = "/api/v2/order/ids?" + ФильтрЗагружамыхСтатусов 
			+ ?(ЗначениеЗаполнено(ДатаНачалаПоиска), "&filter[kind][]=expeditor&filter[loadingFrom]=" + Формат( ДатаНачалаПоиска, "ДФ=yyyy-MM-dd"), "") + "&page=[НомерСтраницы]&perPage=60";	
		
		Если ЗначениеЗаполнено(НомерТекущегоЗапроса) Тогда
			
			Заголовки.Вставить("X-Modify-From-Event", Формат(НомерТекущегоЗапроса + 1,"ЧГ="));
			Результат.Лог = Результат.Лог + "Загрузка данных, начиная с метки событий №" + Формат(НомерТекущегоЗапроса,"ЧГ=") + Символы.ПС;
			
		КонецЕсли;
		
		Пока Истина Цикл //Пока не перестанет приходить следующая страница данных.
			
			СтрокаЗапроса = СтрЗаменить(ШаблонСтрокаЗапроса, "[НомерСтраницы]", НомерСтраницы);
			
			ЗапросHTTP = Новый HTTPЗапрос(СокрЛП(СтрокаЗапроса));
			ЗапросHTTP.Заголовки = Заголовки;
			
			Попытка
				ОтветHTTP  = СоединениеHTTP.Получить(ЗапросHTTP);
			Исключение
				
				ИО = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
				
				Результат.КодОшибки = 3;
				ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
					СоединениеHTTP.Сервер,
					СтрокаЗапроса,
					СоединениеHTTP.Порт,
					"******",
					СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
				
				КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеСпискаЗаказов.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь);
				Возврат Результат;
				
			КонецПопытки;
			
			Если ОтветHTTP.Заголовки.Получить("X-Last-Event-Num") <> Неопределено И ПолученныйНомерТекущегоЗапроса = Неопределено Тогда
				
				ПолученныйНомерТекущегоЗапроса = ОтветHTTP.Заголовки["X-Last-Event-Num"];
				Если КМ_ОбщийМодульКлиентСервер.ЭтоЧисло(ПолученныйНомерТекущегоЗапроса) Тогда
					ПолученныйНомерТекущегоЗапроса = Число(ПолученныйНомерТекущегоЗапроса);
				Иначе
					ПолученныйНомерТекущегоЗапроса = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаJSON = ОтветHTTP.ПолучитьТелоКакСтроку();
			ПолученныеДанныеСтруктура  = КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаJSON);
			
			Если Не ПолученныеДанныеСтруктура.Свойство("data") Тогда
				
				Результат.Лог = Результат.Лог + "Ошибка " + Строка(ПолученныеДанныеСтруктура.message[0].code)
								+ " " + ПолученныеДанныеСтруктура.message[0].title + Символы.ПС; 
				
				Возврат Результат;
				
			КонецЕсли;
			
			Для Каждого УИДЗаказа Из ПолученныеДанныеСтруктура.data.order Цикл
				
				ПолученоЭлементов = ПолученоЭлементов + 1;
				
				Если МассивУИДЗаказов.Найти(УИДЗаказа) = Неопределено Тогда
					МассивУИДЗаказов.Добавить(УИДЗаказа);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПолученныеДанныеСтруктура.data.pagination.page < НомерСтраницы ИЛИ ПолученныеДанныеСтруктура.data.pagination.total = ПолученоЭлементов Тогда
				// Обошли все страницы
				
				Результат.Лог = Результат.Лог + "Получены все страницы данных (" + ПолученныеДанныеСтруктура.data.pagination.page + " страниц, " + ПолученныеДанныеСтруктура.data.pagination.total + " заказов)." + Символы.ПС;
				Прервать;
				
			КонецЕсли;
			
			НомерСтраницы = НомерСтраницы + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивУИДЗаказов.Количество() > 0 Тогда
		Результат.Лог = Результат.Лог + "Загружаю тела заказов." + Символы.ПС;
	КонецЕсли;
	
	Для Каждого УИДЗаказа Из МассивУИДЗаказов Цикл
		
		СтрокаЗапроса 				= "/api/v2/order/" + УИДЗаказа;
		ЗапросHTTP_ПолучитьЗаказ 	= Новый HTTPЗапрос(СтрокаЗапроса);	
		ЗапросHTTP_ПолучитьЗаказ.Заголовки.Вставить("Accept", 			"application/json"); 
		ЗапросHTTP_ПолучитьЗаказ.Заголовки.Вставить("Authorization",	Токен);
		
		Попытка
			ОтветHTTP  = СоединениеHTTP.Получить(ЗапросHTTP_ПолучитьЗаказ);
		Исключение
			
			ИО = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
			
			Результат.КодОшибки = 3;
			ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
				СоединениеHTTP.Сервер,
				СтрокаЗапроса,
				СоединениеHTTP.Порт,
				"******",
				СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
			
			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеЗаказа.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь);
			Возврат Результат;
			
		КонецПопытки;
		
		СтрокаJSON 			= ОтветHTTP.ПолучитьТелоКакСтроку();
		ПолученныеДанныеСтруктура  	= КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаJSON);
			
		//**** Фильтр тестовых данных *****
		ЭтоТестовыйЗаказчик 	= Ложь;
		НомерЗаказаКаргомарт 	= Неопределено;
		
		Если ПолученныеДанныеСтруктура.Свойство("data") 
			И ПолученныеДанныеСтруктура.data.Свойство("order")  
			И ПолученныеДанныеСтруктура.data.order.Свойство("serialId") Тогда
				НомерЗаказаКаргомарт = ПолученныеДанныеСтруктура.data.order.serialId;
		Иначе
			
			ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(4,
				СоединениеHTTP.Сервер,
				СтрокаЗапроса,
				СоединениеHTTP.Порт,
				Токен,
				"не найдено поле ""serialId"". 
				|" + "Полученные данные: " + "
				|" + СтрокаJSON + "
				|─────────────────────────────────────────────────────────────────────────");
			
			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеЗаказа.ПроверкаФорматаДанных", Результат.Лог, ТекстОшибки, Ложь);
			Продолжить;
			
		КонецЕсли;

//		Если НомерЗаказаКаргомарт <> Неопределено
//			И ПолученныеДанныеСтруктура.data.Свойство("company") Тогда
//			Для Каждого СтрКонтр Из ПолученныеДанныеСтруктура.data.company Цикл
//				Если СтрКонтр.Свойство("isDirectSender")
//					И СтрКонтр.Свойство("id")
//					И СтрКонтр.isDirectSender И СтрЗаменить(СтрКонтр.id, "-", "") = "9ae2e53ccf86c85a4ad7efc4e7962da0" Тогда
//
//					ЭтоТестовыйЗаказчик = Истина;
//
//					Результат.Лог = Результат.Лог + "Пропускаю тестовый заказ " + Формат(
//					НомерЗаказаКаргомарт, "ЧГ=0") + "." + Символы.ПС;
//					Прервать;
//
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
		
//		Если НомерЗаказаКаргомарт <> Неопределено  
//			И ПолученныеДанныеСтруктура.data.order.Свойство("carrierId")
//			И СтрЗаменить(ПолученныеДанныеСтруктура.data.order.carrierId, "-", "") = "38ecbfd7bf0c9df4576e209cea9ba1cd"
//			Или ЭтоТестовыйЗаказчик = Истина Тогда
//			Продолжить;
//		КонецЕсли;

		Заказы.Вставить(УИДЗаказа, ПолученныеДанныеСтруктура.data);
			
	КонецЦикла;
	
	Результат.Вставить("Заказы", Заказы);
	Результат.Вставить("ПолученныйНомерТекущегоЗапроса", ПолученныйНомерТекущегоЗапроса);
	Возврат Результат;
	
КонецФункции

Функция НайтиЗаказВБазе(ИдентификаторКаргомарт, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КМ_Заказ.Ссылка
	|ИЗ
	|	Документ.КМ_Заказ КАК КМ_Заказ
	|ГДЕ
	|	КМ_Заказ.ИД = &ИдентификаторКаргомарт
	|	И КМ_Заказ.Организация = &Организация";
	Запрос.УстановитьПараметр("ИдентификаторКаргомарт", ИдентификаторКаргомарт);
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СоздатьОбновитьЗаказПоПолученнымДаннымИзКМ(Организация, Заказ, ПолученныеДанные) Экспорт
	
	Результат 			= КМ_ОбщийМодульКлиентСервер.ИнициализироватьСтруктуруВозврата();
	ЗаказОбъект 		= Неопределено;
	ДетальнаяИнформация = КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(ПолученныеДанные);
	
	Если НЕ ПолученныеДанные.Свойство("order") Тогда
		
		Результат.КодОшибки = 20;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, "order");
		Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;
		
	Иначе

		Если Не ЗначениеЗаполнено(Заказ) Или ТипЗнч(Заказ) <> Тип("ДокументСсылка.КМ_Заказ")
			Или Не ОбщегоНазначения.СсылкаСуществует(Заказ) Тогда

			Если ПолученныеДанные.order.Свойство("externalId") И ЗначениеЗаполнено(ПолученныеДанные.order.externalId) Тогда

				УИДЗаказа 	= Новый УникальныйИдентификатор(
					ВосстановитьУИД(ПолученныеДанные.order.externalId));
				Заказ 		= Документы.КМ_Заказ.ПолучитьСсылку(УИДЗаказа);

				Если ОбщегоНазначения.СсылкаСуществует(Заказ) Тогда
					ЗаказОбъект = Заказ.ПолучитьОбъект();
				Иначе
					ЗаказОбъект = Документы.КМ_Заказ.СоздатьДокумент();
					ЗаказОбъект.Дата = ТекущаяДата();

				КонецЕсли;

			КонецЕсли;

		Иначе
			
			//Тут следует сравнить поле с детальной информацией заказа в БД и пришедшие данные. Если они одинаковы, то
			//обновлять заказ не требуется.
			//В виду того, что среди данных есть поле "serverTime", которое всегда новое, сравнивать будем лишь 
			//структуру "order". Считаем, что если она одинакова, то заказ не изменялся.
			ДетальнаяИнформацияБД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "ДетальнаяИнформация");
			СтрДетальнаяИнформацияБД = КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(ДетальнаяИнформацияБД);
			
			Если  НЕ СтрДетальнаяИнформацияБД.Свойство("order")
				ИЛИ НЕ ПолученныеДанные.Свойство("order") 
				ИЛИ КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(СтрДетальнаяИнформацияБД.order) 
				<> КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(ПолученныеДанные.order) Тогда
				ЗаказОбъект = Заказ.ПолучитьОбъект();
			КонецЕсли;
				
		КонецЕсли;
		
		Если ЗаказОбъект <> Неопределено Тогда

			ЗаказОбъект.ДетальнаяИнформация 			= ДетальнаяИнформация;
			ЗаказОбъект.Организация 					= Организация;
			ЗаказОбъект.УсловияПеревозкиДополнительно 	= ?(ПолученныеДанные.order.Свойство("carriageDetail"),
				ПолученныеДанные.order.carriageDetail, "");
			ЗаказОбъект.ТипГрузовика 					= ?(ПолученныеДанные.order.Свойство("truckTypeId"),
				ПолученныеДанные.order.truckTypeId, 0);
			ЗаказОбъект.ТоннажАвто 						= ?(ПолученныеДанные.order.Свойство("cargoWeight"),
				ПолученныеДанные.order.cargoWeight, 0);
			ЗаказОбъект.КубатураАвто 					= ?(ПолученныеДанные.order.Свойство("cargoCapacity"),
				ПолученныеДанные.order.cargoCapacity, 0);
			ЗаказОбъект.ВесГруза 						= ?(ПолученныеДанные.order.Свойство("loadWeight"),
				ПолученныеДанные.order.loadWeight, 0);
			ЗаказОбъект.ОбъемГруза 						= ?(ПолученныеДанные.order.Свойство("loadCapacity"),
				ПолученныеДанные.order.loadCapacity, 0);
			ЗаказОбъект.ОписаниеГруза 					= ?(ПолученныеДанные.order.Свойство("cargoType"),
				ПолученныеДанные.order.cargoType, "");
			ЗаказОбъект.СуммаСНДС 						= ?(ПолученныеДанные.order.Свойство("openPrice"), Число(
			ПолученныеДанные.order.openPrice), 0);
			ЗаказОбъект.СтавкаНДС 						= ?(ПолученныеДанные.order.Свойство("vatRate"),
				ПолученныеДанные.order.vatRate, 0);

			Если ПолученныеДанные.order.Свойство("temperature") Тогда

				ЗаказОбъект.ТемператураОт = ?(ПолученныеДанные.order.temperature.Свойство("from"),
					ПолученныеДанные.order.temperature.from, -50);
				ЗаказОбъект.ТемператураДо = ?(ПолученныеДанные.order.temperature.Свойство("to"),
					ПолученныеДанные.order.temperature.to, 50);

			КонецЕсли;

			СтрокаТипыПогрузки = "";

			Если ПолученныеДанные.order.Свойство("loading") Тогда
				Для Каждого ТипПогрузки Из ПолученныеДанные.order.loading Цикл
					СтрокаТипыПогрузки = СтрокаТипыПогрузки + ТипПогрузки + " ";
				КонецЦикла;
			КонецЕсли;

			ЗаказОбъект.ТипПогрузкиРазгрузки = СтрокаТипыПогрузки;

			СтрокаДопОборудование 	= "";

			Если ПолученныеДанные.order.Свойство("device") Тогда
				Для Каждого ДопОборудование Из ПолученныеДанные.order.device Цикл
					СтрокаДопОборудование = СтрокаДопОборудование + ДопОборудование + Символы.ПС;
				КонецЦикла;
			КонецЕсли;

			ЗаказОбъект.ДопОборудованиеМашины 	= СтрокаДопОборудование;

			СтрокаУсловияПеревозки 				= "";

			Если ПолученныеДанные.order.Свойство("conditions") Тогда
				Для Каждого УсловиеПеревозки Из ПолученныеДанные.order.conditions Цикл
					СтрокаУсловияПеревозки = СтрокаУсловияПеревозки + УсловиеПеревозки + Символы.ПС;
				КонецЦикла;
			КонецЕсли;

			ЗаказОбъект.УсловияПеревозки 		= СтрокаУсловияПеревозки;

			ЗаказОбъект.КомментарийПоОплате 	= ?(ПолученныеДанные.order.Свойство("paymentDetail"),
				ПолученныеДанные.order.paymentDetail, "");

			СтрокаМетки 						= "";

			Если ПолученныеДанные.order.Свойство("tag") Тогда
				Для Каждого Метка Из ПолученныеДанные.order.tag Цикл
					СтрокаМетки = СтрокаМетки + Метка + Символы.ПС;
				КонецЦикла;
			КонецЕсли;

			ЗаказОбъект.Метки 					= СтрокаМетки;

			ЗаказОбъект.СтратегияЗаданияЦены 	= ?(ПолученныеДанные.order.Свойство("priceStrategyType"),
				ПолученныеДанные.order.priceStrategyType, "");
			ЗаказОбъект.ТипЗаказа 				= ?(ПолученныеДанные.order.Свойство("biddingType"),
				ПолученныеДанные.order.biddingType, "express");

			Если ПолученныеДанные.order.Свойство("bidding") Тогда

				ЗаказОбъект.ШагИзмененияЦеныЗаказа 	= ?(ПолученныеДанные.order.bidding.Свойство("stepBid"),
					ПолученныеДанные.order.bidding.stepBid, 0);
				ЗаказОбъект.КонечнаяДатаТоргов 		= ?(ПолученныеДанные.order.bidding.Свойство("endDate"),
					ПолученныеДанные.order.bidding.endDate, Дата(1, 1, 1));

			КонецЕсли;

			ЗаказОбъект.Контакты.Очистить();

			Если ПолученныеДанные.order.Свойство("contact") И ПолученныеДанные.order.contact.Количество() > 0 Тогда
				ЗаказОбъект.Контакты.Загрузить(ПолучитьСотрудниковПоСпискуИД(ПолученныеДанные.order.contact, Результат));
			КонецЕсли;

			ЗаказОбъект.Маршрут.Очистить();

			Если ПолученныеДанные.order.Свойство("point")//В апи order-а маршрут именуется не так как в шаблоне. 

				И ПолученныеДанные.order.point.Количество() > 0 Тогда

				ПунктыПогрузкиВыгрузки = ?(ПолученныеДанные.Свойство("storagePoint"), ПолученныеДанные.storagePoint,
					Неопределено);
				ПолучитьМаршрутПоДаннымИзКаргомарт(
			Организация, ЗаказОбъект.Маршрут, ПолученныеДанные.order.point, ПунктыПогрузкиВыгрузки, Результат);

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	Если Результат.КодОшибки = 0 Тогда

		Попытка
			
			НачатьТранзакцию();
			
			Если ЗаказОбъект <> Неопределено Тогда
				
				ЗаказОбъект.ОбменДанными.Загрузка = Истина;
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Результат.Лог 		= Результат.Лог + "Успешно записан " + ЗаказОбъект + ".
				|";
				Заказ 				= ЗаказОбъект.Ссылка;
				СтатусОбновления 	= Перечисления.КМ_ВидыСтатусовОбновленияЗаказаИзКМ.УспешноОбновлён;
			
			Иначе
				СтатусОбновления 	= Перечисления.КМ_ВидыСтатусовОбновленияЗаказаИзКМ.ОбновлениеНеТребуется;
			КонецЕсли;
			
			МЗап = РегистрыСведений.КМ_СтатусыОбновленияЗаказовИзКМ.СоздатьМенеджерЗаписи();
			МЗап.Заказ 		= Заказ;
			МЗап.Статус 	= СтатусОбновления;
			МЗап.Активность = Истина;
			МЗап.Период 	= ТекущаяДата();
			
			МЗап.Записать(Истина);
			Результат.Вставить("СтатусОбновления", СтатусОбновления);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Инфо = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.КодОшибки = 14;
			Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки) + Символы.ПС
				+ Инфо;
			Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;

		КонецПопытки;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьЗаказНаКаргомарт(СоединениеHTTP, Токен, Заказ) Экспорт
	
	Результат = КМ_ОбщийМодульКлиентСервер.ИнициализироватьСтруктуруВозврата();
	
	Результат.Лог = Результат.Лог + "Выгружаю " + Заказ + " в Каргомарт...
		|";
	jsonЗаказа = ПолучитьJSONОбъектаЗаказа(Заказ, Результат);
	
	Если Результат.КодОшибки <> 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", Токен);

	ИдентификаторыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "УИДЧерновика, ИД, Статус");

	РежимВыгрузкиЧерновика = "Создание";

	Если ЗначениеЗаполнено(ИдентификаторыЗаказа.УИДЧерновика) Тогда
		Если ЗначениеЗаполнено(ИдентификаторыЗаказа.ИД) Тогда
			РежимВыгрузкиЧерновика = "НеТребуется";
		Иначе
			РежимВыгрузкиЧерновика = "Обновление";
		КонецЕсли;
	КонецЕсли;

	ТребуетсяПубликация = Не ЗначениеЗаполнено(ИдентификаторыЗаказа.ИД) И ЗначениеЗаполнено(
		ИдентификаторыЗаказа.Статус) И Не (ИдентификаторыЗаказа.Статус = Перечисления.КМ_СтатусыЗаказов.Черновик
		Или ИдентификаторыЗаказа.Статус = Перечисления.КМ_СтатусыЗаказов.Удален Или ИдентификаторыЗаказа.Статус
		= Перечисления.КМ_СтатусыЗаказов.Архивный);
	
	ТребуетсяОбновлениеЗаказа = ЗначениеЗаполнено(ИдентификаторыЗаказа.ИД);
	
	Если РежимВыгрузкиЧерновика <> "НеТребуется" Тогда	

		СтрокаЗапроса 						= "/api/v2/order-draft-expeditor" 
			+ ?(РежимВыгрузкиЧерновика 		= "Обновление", "/" + ИдентификаторыЗаказа.УИДЧерновика, "");
		Результат.Лог 						= Результат.Лог 
			+ ?(РежимВыгрузкиЧерновика 		= "Обновление", "Обновляю ","Выгружаю новый ")
			+ "черновик заказа в сервис Каргомарт...
				|";
		МетодHTTP 							= ?(РежимВыгрузкиЧерновика = "Создание",
			"POST",
			"PUT");						
		СтрокаОтвет = ВызватьМетодКаргомарт(	СоединениеHTTP, 
								Заголовки, 
								Токен, 
								СтрокаЗапроса,
								jsonЗаказа, 
								МетодHTTP, 
								"Каргомарт.ВыгрузкаЧерновикаЗаказа", 
								Результат);
		
		Если Результат.КодОшибки = 0 Тогда
			Результат.Лог = Результат.Лог + "Данные отправлены успешно.
				|";
		Иначе
			Возврат Результат;
		КонецЕсли;
		
		СтрОтвет = КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаОтвет);
		
		Если СтрОтвет.Свойство("data") Тогда
			
			ОбновитьИдентификаторыЗаказаПоПолученнымДаннымЧерновика(Заказ, СтрОтвет.data, Результат);
			ИдентификаторыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "УИДЧерновика, ИД, Статус");
			
		Иначе
			
			Результат.КодОшибки = 20;
			Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, "data");
			Результат.Лог = Результат.Лог + Результат.Описание 
				+ Символы.ПС;
			Возврат Результат;

		КонецЕсли;
		
		Если Результат.КодОшибки <> 0 Тогда 
			Возврат Результат;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТребуетсяПубликация Тогда
		
		СтрокаЗапроса 						= "/api/v2/order-draft-expeditor/" 
			+ ИдентификаторыЗаказа.УИДЧерновика + "/publish";
		Результат.Лог 						= Результат.Лог 
			+ "Публикую черновик заказа в сервисе Каргомарт...
				|";
		МетодHTTP 							= "POST";						
		СтрокаОтвет = ВызватьМетодКаргомарт(	СоединениеHTTP, 
								Заголовки, 
								Токен, 
								СтрокаЗапроса,
								jsonЗаказа, 
								МетодHTTP, 
								"Каргомарт.ПубликацияЧерновикаЗаказа", 
								Результат);
		
		Если Результат.КодОшибки = 0 Тогда
			Результат.Лог = Результат.Лог + "Данные отправлены успешно.
				|";
		Иначе
			Возврат Результат;
		КонецЕсли;

		//Тут нужно дёрнуть получение заказа (не черновика) для получения serialID, и тела заказа в целом.
		СтрокаЗапроса 	= "/api/v2/order/";
		
		СтрОтвет 		= КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаОтвет);
		
		Если СтрОтвет.Свойство("data")
			И СтрОтвет.data.Свойство("orderDraftExpeditor")
			И СтрОтвет.data.orderDraftExpeditor.Свойство("orderId") Тогда
			
			СтрокаЗапроса = СтрокаЗапроса + СтрОтвет.data.orderDraftExpeditor.orderId;
			
		Иначе
			
			Результат.КодОшибки = 20;
			Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, "data.orderDraftExpeditor.orderId");
			Результат.Лог = Результат.Лог + Результат.Описание 
				+ Символы.ПС;
			Возврат Результат;

		КонецЕсли;
		
		МетодHTTP 							= "GET";						
		СтрокаОтвет = ВызватьМетодКаргомарт(	СоединениеHTTP, 
								Заголовки, 
								Токен, 
								СтрокаЗапроса,
								, 
								МетодHTTP, 
								"Каргомарт.ПолучениеОпубликованногоЗаказа", 
								Результат);
		
		Если Результат.КодОшибки = 0 Тогда
			Результат.Лог = Результат.Лог + "Получено тело опубликованного заказа.
				|";
		Иначе
			Возврат Результат;
		КонецЕсли;
		
		СтрОтвет 		= КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаОтвет);
		
		Если СтрОтвет.Свойство("data") Тогда
			
			ОбновитьИдентификаторыЗаказаПоПолученнымДаннымЗаказа(Заказ, СтрОтвет.data, Результат);
			ИдентификаторыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "УИДЧерновика, ИД, Статус");
			
		Иначе
			
			Результат.КодОшибки = 20;
			Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, "data");
			Результат.Лог = Результат.Лог + Результат.Описание 
				+ Символы.ПС;
			Возврат Результат;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если ТребуетсяОбновлениеЗаказа Тогда
		//Обновляем изменённый заказ
		// TODO: доработать механизм обновления опубликованного заказа на стороне Каргомарта
	КонецЕсли;
	

	Возврат Результат;
	
КонецФункции

Функция СинхронизироватьСправочникКМ_Сотрудники(Организация, ПриоритетБД = Ложь, СотрудникиБД = Неопределено, СотрудникиКМ = Неопределено) Экспорт
	
	СправочникСсылкаФизическиеЛица = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Справочники_ВидыКонтактнойИнформации");
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки", 0);
	Результат.Вставить("Описание",  "");
	Результат.Вставить("Лог",  		"");
	
	Результат.Лог = Результат.Лог + "Получаю настройки связи с Каргомарт...
	|";
	
	НастройкиКаргомарт = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьНастройкиКаргомарт(Организация);
	
	Если НастройкиКаргомарт = Неопределено Тогда
		
		Результат.КодОшибки = 1;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, Организация);
		Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;
		Возврат Результат;
		
	Иначе
		 Результат.Лог = Результат.Лог + "Настройки получены.
			|";
	КонецЕсли;
	
	//Получение данных БД.
	Результат.Лог = Результат.Лог + "Получаю данные из БД...
		|";
	
	ЗапросСотрудники = Новый Запрос;
	
	ПараметрыВОбработку = Новый Структура;
	
	ПараметрыВОбработку.Вставить("ЗапросСотрудники", 					ЗапросСотрудники);	
	ПараметрыВОбработку.Вставить("СотрудникиБД", 						СотрудникиБД);
	ПараметрыВОбработку.Вставить("СотрудникиКМ", 						СотрудникиКМ);
	ПараметрыВОбработку.Вставить("Организация", 						Организация);
		
	ТаблицаСоответствия = КМ_ОбщийМодульПовтИсп.МодульЯдро().ТекстЗапросСотрудники(ПараметрыВОбработку);
	
	СписокКолонок = "";
	
	Для Каждого КолонкаТаб из ТаблицаСоответствия.Колонки Цикл
		СписокКолонок = СписокКолонок + ?(СписокКолонок = "", "", ",") + КолонкаТаб.Имя;
	КонецЦикла;
	
	ТаблицаСоответствия.Свернуть(СписокКолонок);
	
	Результат.Лог = Результат.Лог + "Получено " + ТаблицаСоответствия.Количество() + " записей.
		|";
	
	ТС = Новый ОписаниеТипов("Структура");
	ТаблицаСоответствия.Колонки.Добавить("ДанныеКМ", ТС, "ДанныеКМ");
	ТБ = Новый ОписаниеТипов("Булево");
	ТаблицаСоответствия.Колонки.Добавить("ТребуетсяПовторныйЗапросБД", ТБ, "ТребуетсяПовторныйЗапросБД");
	//Получение данных КМ.
	Результат.Лог = Результат.Лог + "Получаю данные из Каргомарт...
		|";
	
	СоединениеHTTP 	= ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
	
	Токен 			= ПолучитьТокенАвторизацииКаргомарт(Организация, НастройкиКаргомарт, СоединениеHTTP, Результат);
	
	Если Токен = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", 		"application/json"); 
	Заголовки.Вставить("Authorization",	Токен);
	
	АдресРесурса 		= "/api/v2/worker";
	
	ЗапрашиваемыйМассив = Новый Массив;
	СтрокаФильтра 		= "";
	
	Если ТипЗнч(СотрудникиКМ) = Тип("Массив") Тогда
		
		Для Каждого СотрудникКМ из СотрудникиКМ Цикл
			ЗапрашиваемыйМассив.Добавить(СотрудникКМ);
		КонецЦикла;
		
		Для Каждого СтрокаСотрудникБД Из ТаблицаСоответствия Цикл
			Если ЗначениеЗаполнено(СтрокаСотрудникБД.КаргомартИД) Тогда
				Если ЗапрашиваемыйМассив.Найти(СтрокаСотрудникБД.КаргомартИД) = Неопределено Тогда
					ЗапрашиваемыйМассив.Добавить(СтрокаСотрудникБД.КаргомартИД);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СотрудникКМ из ЗапрашиваемыйМассив Цикл
			СтрокаФильтра = СтрокаФильтра + "&" + "selectedIds[]=" + Формат(СотрудникКМ, "ЧГ=0;");
		КонецЦикла;
		
	КонецЕсли;
	
	НомерСтраницы 		= 1;
	ПолученоЭлементов 	= 0;
	ПрерватьЗагрузку 	= Ложь;
	
	Пока Не ПрерватьЗагрузку Цикл //Пока не перестанет приходить следующая страница данных.

		СтрокаЗапроса = АдресРесурса + "?" + "page=" + Формат(НомерСтраницы, "ЧГ=0") + "&perPage=60" + СтрокаФильтра;
		ЗапросHTTP_ПолучитьСотрудников 				= Новый HTTPЗапрос(СокрЛП(СтрокаЗапроса));
		ЗапросHTTP_ПолучитьСотрудников.Заголовки 	= Заголовки;

		Попытка
			ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP_ПолучитьСотрудников);
		Исключение

			ИО = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);

			Результат.КодОшибки = 3;
			ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, СоединениеHTTP.Сервер,
				СтрокаЗапроса, СоединениеHTTP.Порт, Токен, СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС,
				Символы.ПС + Символы.Таб));

			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеСпискаСотрудников.ОбращениеК_HTTP_Сервису",
				Результат.Лог, ТекстОшибки, Ложь);
			Возврат Результат;

		КонецПопытки;
		
		СтрокаJSON 			= ОтветHTTP.ПолучитьТелоКакСтроку();
		
		Если ОтветHTTP.КодСостояния > 200 Тогда
			
			ТекстОшибки = "Сервер вернул код " + ОтветHTTP.КодСостояния + Символы.ПС
				+ "Текст сообщения:
				|" + СтрокаJSON;
			
			Результат.КодОшибки = 3;
			ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, СоединениеHTTP.Сервер,
				СтрокаЗапроса, СоединениеHTTP.Порт, Токен, СтрЗаменить( ТекстОшибки, Символы.ПС,
				Символы.ПС + Символы.Таб));

			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеСпискаСотрудников.ОбращениеК_HTTP_Сервису",
				Результат.Лог, ТекстОшибки, Ложь);
			Возврат Результат;
			
		КонецЕсли;
			
		ПолученныеДанныеСтруктура 	= КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаJSON);

		Если ПолученныеДанныеСтруктура = Неопределено 
			ИЛИ НЕ ПолученныеДанныеСтруктура.Свойство("data")
			ИЛИ НЕ ПолученныеДанныеСтруктура.data.Свойство("worker") Тогда

			Результат.КодОшибки = 6;
			ТекстОшибки 		= КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, СтрокаJSON);
			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеСпискаСотрудников.ПроверкаФорматаДанных",
				Результат.Лог, ТекстОшибки, Ложь);

			Продолжить;

		КонецЕсли;
		
		//Обработка_тела_сообщения
		Для Каждого СтруктураСотрудник из ПолученныеДанныеСтруктура.data.worker Цикл
			Если ТипЗнч(СотрудникиКМ) = Тип("Массив") И ЗапрашиваемыйМассив.Найти(СтруктураСотрудник.id) = Неопределено Тогда
				ПрерватьЗагрузку 	= Истина;
			Иначе
				
				ПолученоЭлементов 	= ПолученоЭлементов + 1;
				НайденнаяСтрока 	= ТаблицаСоответствия.Найти(СтруктураСотрудник.id, "КаргомартИД");
				
				Если НайденнаяСтрока = Неопределено Тогда
					
					НайденнаяСтрока = ТаблицаСоответствия.Добавить();
					НайденнаяСтрока.КаргомартИД = СтруктураСотрудник.id;
					
					Если СотрудникиКМ = Неопределено
						И ТипЗнч(СотрудникиБД) = Тип("Массив") Тогда
							//По данному сотруднику требуется повторный запрос к БД
							НайденнаяСтрока.ТребуетсяПовторныйЗапросБД = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				НайденнаяСтрока.ДанныеКМ = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураСотрудник));
				
			КонецЕсли;
		КонецЦикла;
		
		//Обработка пагинации.
		Если ПолученныеДанныеСтруктура.data.pagination.page < НомерСтраницы
			Или ПолученныеДанныеСтруктура.data.pagination.total = ПолученоЭлементов Тогда
				// Обошли все страницы

			Результат.Лог = Результат.Лог + "Получены все страницы данных ("
				+ ПолученныеДанныеСтруктура.data.pagination.page + " страниц, "
				+ ПолученныеДанныеСтруктура.data.pagination.total + " сотрудников)." + Символы.ПС;
			Прервать;

		КонецЕсли;

		НомерСтраницы = НомерСтраницы + 1;
			
	КонецЦикла;
	
	Результат.Лог = Результат.Лог + "Получено " + ПолученоЭлементов + " записей.
		|";
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТребуетсяПовторныйЗапросБД", Истина);
	СтрокиДляПовторногоЗапроса = ТаблицаСоответствия.НайтиСтроки(Отбор);
	
	Если СтрокиДляПовторногоЗапроса.Количество() > 0 Тогда
		
		Результат.Лог = Результат.Лог + "Повторно получаю данные из БД...
			|";
		ЗапросСотрудники.Текст = КМ_ОбщийМодульПовтИсп.МодульЯдро().ИсходныйТекстЗапросСотрудники();
		ЗапросСотрудники.Текст = СтрЗаменить(ЗапросСотрудники.Текст, "&УсловиеОтбора", 
				"КМ_Сотрудники.КаргомартИД В (&СотрудникиКМ)");
		МассивСотрудникиДляПовторногоЗапроса = Новый Массив;
		
		Для Каждого СтрокаДляПовторногоЗапроса из СтрокиДляПовторногоЗапроса Цикл
			МассивСотрудникиДляПовторногоЗапроса.Добавить(СтрокаДляПовторногоЗапроса.КаргомартИД);
		КонецЦикла;
		
		ЗапросСотрудники.УстановитьПараметр("СотрудникиКМ", МассивСотрудникиДляПовторногоЗапроса);
		
		Выборка = ЗапросСотрудники.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаЗаполнения = ТаблицаСоответствия.Найти(Выборка.КаргомартИД, "КаргомартИД");
			
			Если СтрокаЗаполнения <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаЗаполнения, Выборка);
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
	ОЧ = Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСоответствия.Колонки.Добавить("Действие", ОЧ, , );
	
	Для Каждого Строка из ТаблицаСоответствия Цикл
		Если НЕ ЗначениеЗаполнено(Строка.КаргомартИД) Тогда
			Строка.Действие = 1;//Выгрузить на Каргомарт
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.ДанныеКМ) Тогда
			Строка.Действие = 1;//Выгрузить на Каргомарт
		ИначеЕсли ДанныеСотрудникаРазличаются(Строка) Тогда
			Если ПриоритетБД = Истина 
				И ЗначениеЗаполнено(Строка.Ссылка) Тогда
				Строка.Действие = 1;//Выгрузить на Каргомарт
			Иначе
				Строка.Действие = 2;//Обновить данные в БД
			КонецЕсли;
		Иначе
			Строка.Действие = 0;//Действие не требуется. Данные о сотруднике синхронны.
		КонецЕсли;
	КонецЦикла;
		
	ТаблицаСоответствия.Сортировать("Действие");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Действие", 1);
	ОтобранныеСтроки = ТаблицаСоответствия.НайтиСтроки(Отбор);
	
	Если ОтобранныеСтроки.Количество() > 0 Тогда
		
		Результат.Лог = Результат.Лог + "Найдено  " + ОтобранныеСтроки.Количество() + " записей к выгрузке на Каргомарт.
			|Выгружаю...";
		
		Для Каждого СтрокаКВыгрузке из ОтобранныеСтроки Цикл
			ВыгрузитьСотрудникаВКаргомарт(СоединениеHTTP, Токен, СтрокаКВыгрузке, Организация, Результат);
		КонецЦикла;
		
	КонецЕсли;
	
	Отбор.Вставить("Действие", 2);
	ОтобранныеСтроки = ТаблицаСоответствия.НайтиСтроки(Отбор);
	
	Если ОтобранныеСтроки.Количество() > 0 Тогда
		
		Результат.Лог = Результат.Лог + "Найдено  " + ОтобранныеСтроки.Количество() + " записей к загрузке из Каргомарта.
			|Загружаю...";
		
		Для Каждого СтрокаКВыгрузке из ОтобранныеСтроки Цикл
			СохранитьОбновитьСотрудникаВ_БД(Организация, СтрокаКВыгрузке, Результат);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
											
КонецФункции

Функция ВыгрузитьОпубликоватьЧерновикиЗаказовНаКаргомарт(Организация, Заказы) Экспорт
	
	Результат = КМ_ОбщийМодульКлиентСервер.ИнициализироватьСтруктуруВозврата();
	
	НастройкиКаргомарт = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьНастройкиКаргомарт(Организация);
	
	Если НастройкиКаргомарт = Неопределено Тогда
		
		Результат.КодОшибки = 1;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, Организация);
		Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;
		Возврат Результат;
		
	Иначе
		 Результат.Лог = Результат.Лог + "Настройки получены.
			|";
	КонецЕсли;
	
	//Получение данных БД.
	Результат.Лог = Результат.Лог + "Получаю данные из БД...
		|";
	
	
	Запрос = новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КМ_Заказ.Ссылка
	|ИЗ
	|	Документ.КМ_Заказ КАК КМ_Заказ
	|ГДЕ
	|	КМ_Заказ.Организация = &Организация
	|	И (КМ_Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.КМ_СтатусыЗаказов.Черновик)
	|	ИЛИ КМ_Заказ.ИД = """"
	|	И КМ_Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.КМ_СтатусыЗаказов.Черновик)
	|	И КМ_Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.КМ_СтатусыЗаказов.Архивный))
	|	И КМ_Заказ.ПометкаУдаления = ЛОЖЬ
	|	И КМ_Заказ.Ссылка В (&Заказы)";
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Заказы", 		Заказы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат.Лог = Результат.Лог + "Получено " + Выборка.Количество() + " черновиков заказов.
	|";
	
	Если Заказы.Количество() > Выборка.Количество() Тогда
		Результат.Лог = Результат.Лог + "Пропущено " + (Заказы.Количество() - Выборка.Количество()) + " заказов. Возможные причины:
			|	неверная ссылка на заказ,
			|	заказ уже опубликован,
			|	статус заказа не является черновиком,
			|	заказ помечен на удаление,
			|	заказ не принадлежит указанной организации (" + Организация + ").
			|";
	КонецЕсли;
	
	СоединениеHTTP 	= ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
	
	Токен 			= ПолучитьТокенАвторизацииКаргомарт(Организация, НастройкиКаргомарт, СоединениеHTTP, Результат);
	
	Если Токен = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ТекРезультат 	= ВыгрузитьЗаказНаКаргомарт(СоединениеHTTP, Токен, Выборка.Ссылка);
		
		Результат.Лог 	= Результат.Лог + ТекРезультат.Лог;
		
		Если ТекРезультат.КодОшибки <> 0 Тогда
			
			Результат.КодОшибки = ТекРезультат.КодОШибки;
			Результат.Описание 	= ТекРезультат.Описание;
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Неопределено, Структура - Пункт из базы
Функция ПолучитьПунктИзБазы(ИД) Экспорт

	Результат = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КМ_ПунктыПогрузкиВыгрузки.ИД,
	|	КМ_ПунктыПогрузкиВыгрузки.НаселенныйПункт,
	|	КМ_ПунктыПогрузкиВыгрузки.КЛАДР,
	|	КМ_ПунктыПогрузкиВыгрузки.Адрес,
	|	КМ_ПунктыПогрузкиВыгрузки.НомерДома,
	|	КМ_ПунктыПогрузкиВыгрузки.Комментарий,
	|	КМ_ПунктыПогрузкиВыгрузки.КоординатыШирота,
	|	КМ_ПунктыПогрузкиВыгрузки.КоординатыДолгота,
	|	КМ_ПунктыПогрузкиВыгрузки.ФормаОрганизации,
	|	КМ_ПунктыПогрузкиВыгрузки.ЮридическоеНаименование,
	|	КМ_ПунктыПогрузкиВыгрузки.Контрагент,
	|	КМ_ПунктыПогрузкиВыгрузки.Ссылка
	|ИЗ
	|	Справочник.КМ_ПунктыПогрузкиВыгрузки КАК КМ_ПунктыПогрузкиВыгрузки
	|ГДЕ
	|	НЕ КМ_ПунктыПогрузкиВыгрузки.ПометкаУдаления
	|	И КМ_ПунктыПогрузкиВыгрузки.ИД = &ИД";
	
	Запрос.УстановитьПараметр("ИД", ИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Новый Структура;
	
	Если Выборка.Следующий() Тогда
		
		Для каждого Колонка из РезультатЗапроса.Колонки	Цикл
			Результат.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
			
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПолучитьСоединениеКаргомарт(НастройкиКаргомарт) Экспорт
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(НастройкиКаргомарт.АдресСервера);
	
	Если СтруктураURI.Схема <> "https" Тогда
		ЗащищенноеСоединение = Неопределено;
	Иначе
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураURI.Логин) И НЕ ЗначениеЗаполнено(НастройкиКаргомарт.Логин) Тогда
		
		НастройкиКаргомарт.Логин  = СтруктураURI.Логин;
		НастройкиКаргомарт.Пароль = СтруктураURI.Пароль;
		
	КонецЕсли; 
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	
	СоединениеHTTP = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , ИнтернетПрокси,, ЗащищенноеСоединение, Ложь);   
	
	Возврат СоединениеHTTP;

КонецФункции

Функция ПолучитьТокенАвторизацииКаргомарт(Организация, НастройкиКаргомарт, СоединениеHTTP, Результат = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Лог", "");
		Результат.Вставить("КодОшибки", 0);
		
	КонецЕсли;
	
	АвторизацияКаргомарт = Строка(ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "АвторизацияКаргомарт"));
	
	АвторизацияКаргомарт = ?(ЗначениеЗаполнено(АвторизацияКаргомарт), КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(АвторизацияКаргомарт), 
								Новый Структура("Логин, Пароль, Токен", НастройкиКаргомарт.Логин, НастройкиКаргомарт.Пароль, ""));
	
	#Область ПроверяемРанееПолученыйТокен
	Если (ЗначениеЗаполнено(АвторизацияКаргомарт.Токен)) 
			И (АвторизацияКаргомарт.Логин = НастройкиКаргомарт.Логин) 
			И (АвторизацияКаргомарт.Пароль = НастройкиКаргомарт.Пароль) Тогда
		
		СоединениеHTTP = ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Accept", 		"application/json"); 
		Заголовки.Вставить("Authorization",	АвторизацияКаргомарт.Токен);
		
		ЗапросHTTP_ТестТокен = Новый HTTPЗапрос(НастройкиКаргомарт.АдресСервера + "/api/v2/user/self");
		ЗапросHTTP_ТестТокен.Заголовки = Заголовки;
		
		Попытка
		
			ОтветHTTPАвторизация 	= СоединениеHTTP.Получить(ЗапросHTTP_ТестТокен);
			
			Если ОтветHTTPАвторизация.КодСостояния = 200 Тогда
				Возврат АвторизацияКаргомарт.Токен;
			Иначе			
				Результат.Лог = Результат.Лог + ОтветHTTPАвторизация.ПолучитьТелоКакСтроку() + Символы.ПС;
			КонецЕсли;
			
		Исключение
		
			ИО = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
			
			Результат.КодОшибки = 2;
			ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
				СоединениеHTTP.Сервер,
				НастройкиКаргомарт.АдресСервера + "/api/v2/user/self",
				СоединениеHTTP.Порт,
				НастройкиКаргомарт.Логин,
				СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
			
			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.Авторизация.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь,,);
		
			Возврат Неопределено;
		
		КонецПопытки;
	
	ИначеЕсли (ЗначениеЗаполнено(АвторизацияКаргомарт.Токен)) 
				И (АвторизацияКаргомарт.Логин <> НастройкиКаргомарт.Логин) 
				ИЛИ (АвторизацияКаргомарт.Пароль <> НастройкиКаргомарт.Пароль) Тогда
		
			СоединениеHTTP = ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
				
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Accept", 		"*/*"); 
			Заголовки.Вставить("Authorization",	АвторизацияКаргомарт.Токен);
			
			СтрокаЗапроса = "/api/v2/user/logout";
			
			ЗапросHTTP_УдалитьТокен = Новый HTTPЗапрос(СтрокаЗапроса);
			ЗапросHTTP_УдалитьТокен.Заголовки = Заголовки;
			
			Попытка
			
				ОтветHTTPАвторизация 	= СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP_УдалитьТокен);
				
				Если ОтветHTTPАвторизация.КодСостояния <> 200 Тогда
					Результат.Лог = Результат.Лог + ОтветHTTPАвторизация.ПолучитьТелоКакСтроку() + Символы.ПС;	
				КонецЕсли;
				
			Исключение
			
				ИО = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
				
				Результат.КодОшибки = 2;
				ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
					СоединениеHTTP.Сервер,
					НастройкиКаргомарт.АдресСервера + "/api/v2/user/self",
					СоединениеHTTP.Порт,
					НастройкиКаргомарт.Логин,
					СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
				
				КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.Авторизация.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь,,);
			
				Возврат Неопределено;
			
			КонецПопытки;
		
	КонецЕсли;
	#КонецОбласти
	
	Результат.Лог 		= Результат.Лог + "Авторизуюсь на сервисе ""Каргомарт""." + Символы.ПС;
	СтруктураURIАвторизация = ОбщегоНазначенияКлиентСервер.СтруктураURI(НастройкиКаргомарт.АдресСервера + "/api/v2/user/login");
	СтруктураАвторизации 	= Новый Структура("login,password", НастройкиКаргомарт.Логин, НастройкиКаргомарт.Пароль);
	
	ЗапросHTTPАвторизация = Новый HTTPЗапрос(СтруктураURIАвторизация.ПутьНаСервере);
	ЗапросHTTPАвторизация.Заголовки.Вставить("Content-type", "application/json"); 
	ЗапросHTTPАвторизация.УстановитьТелоИзСтроки(КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(СтруктураАвторизации));//"{""login"":""" + Логин +""",""password"": """+ Пароль + """}",,);
	
	Попытка
		ОтветHTTPАвторизация 	= СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTPАвторизация);
		
		Если ОтветHTTPАвторизация.КодСостояния <> 200 Тогда
			ВызватьИсключение "Сервер вернул код состояния """ + ОтветHTTPАвторизация.КодСостояния + """. 
				|Сообщение сервера:
				|" + ОтветHTTPАвторизация.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
	Исключение
		
		ИО = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
		
		Результат.КодОшибки = 2;
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			СтруктураURIАвторизация.ПутьНаСервере,
			СоединениеHTTP.Порт,
			НастройкиКаргомарт.Логин,
			СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));

		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок(ИО, "Каргомарт.Авторизация.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь,,);
		Возврат Неопределено;
		
	КонецПопытки;
	
	ОтветАвторизация = КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(ОтветHTTPАвторизация.ПолучитьТелоКакСтроку()); 
	
	Если ТипЗнч(ОтветАвторизация) = Тип("Структура")
		И ОтветАвторизация.Свойство("data") 
		И ОтветАвторизация.data.Свойство("token") 
		И ОтветАвторизация.data.token.Свойство("token") Тогда
		
		Токен 			= ОтветАвторизация.data.token.token; 
		Результат.Лог 	= Результат.Лог + "Получен токен." + Символы.ПС;
		
	Иначе
		
		Результат.КодОшибки = 2;
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			СтруктураURIАвторизация.ПутьНаСервере,
			СоединениеHTTP.Порт,
			НастройкиКаргомарт.Логин,
			"Не найден токен в ответе сервиса. Тело ответа сервиса:" + Символы.ПС + "	""" + ОтветАвторизация);

		Возврат Неопределено;
		
	КонецЕсли;
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
			
			АвторизацияКаргомарт.Логин 	= НастройкиКаргомарт.Логин;
			АвторизацияКаргомарт.Пароль = НастройкиКаргомарт.Пароль;
			АвторизацияКаргомарт.Токен 	= Токен;
				
			АвторизацияКаргомарт = КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(АвторизацияКаргомарт);
			
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Организация, АвторизацияКаргомарт, "АвторизацияКаргомарт");
					
		УстановитьПривилегированныйРежим(Ложь);
	
	Исключение
		
		Результат.КодОшибки = 2;
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			СтруктураURIАвторизация.ПутьНаСервере,
			СоединениеHTTP.Порт,
			НастройкиКаргомарт.Логин,
			"Не удалось записать Токен в безопасное хранилище" + Символы.ПС + "	""" + ОтветАвторизация);

		Возврат Неопределено;
					
	КонецПопытки;
	
	Возврат Токен;
	
КонецФункции

Функция УдалитьТокенАвторизацииКаргомарт(Организация) Экспорт
	
	Результат = КМ_ОбщийМодульКлиентСервер.ИнициализироватьСтруктуруВозврата();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
			
			АвторизацияКаргомарт = Строка(ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "АвторизацияКаргомарт"));
	
			АвторизацияКаргомарт = ?(ЗначениеЗаполнено(АвторизацияКаргомарт), КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(АвторизацияКаргомарт), 
								Новый Структура("Логин, Пароль, Токен", "", "", ""));
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если АвторизацияКаргомарт.Токен <> "" Тогда
			//Поднять соединение, запросить удаление токена на стороне КМ.
			НастройкиКаргомарт 				= КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьНастройкиКаргомарт(Организация);
			СоединениеHTTP 					= ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Accept", 		"*/*"); 
			Заголовки.Вставить("Authorization",	АвторизацияКаргомарт.Токен);
			
			СтрокаЗапроса = "/api/v2/user/logout";
			
			ЗапросHTTP_УдалитьТокен = Новый HTTPЗапрос(СтрокаЗапроса);
			ЗапросHTTP_УдалитьТокен.Заголовки = Заголовки;
			
			Попытка
			
				ОтветHTTPАвторизация 	= СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP_УдалитьТокен);
				
				Если ОтветHTTPАвторизация.КодСостояния <> 200 Тогда
					Результат.Лог = Результат.Лог + ОтветHTTPАвторизация.ПолучитьТелоКакСтроку() + Символы.ПС;	
				КонецЕсли;
				
			Исключение
			
				ИО = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
				
				Результат.КодОшибки = 2;
				Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
					СоединениеHTTP.Сервер,
					НастройкиКаргомарт.АдресСервера + СтрокаЗапроса,
					СоединениеHTTP.Порт,
					НастройкиКаргомарт.Логин,
					СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
				
				КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.Авторизация.ОбращениеК_HTTP_Сервису", Результат.Лог, Результат.Описание, Ложь,,);
			
				Возврат Результат;
			
			КонецПопытки;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
			
			АвторизацияКаргомарт.Токен 	= "";
				
			АвторизацияКаргомарт = КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(АвторизацияКаргомарт);
			
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Организация, АвторизацияКаргомарт, "АвторизацияКаргомарт");
					
		УстановитьПривилегированныйРежим(Ложь);
		
		Результат.Лог = Результат.Лог + "Токен удалён.
			|";
			
	Исключение
		
		Результат.КодОшибки = 14;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки) + Символы.ПС
			+ "Не удалось удалить Токен в безопасном хранилище" + Символы.ПС 
			+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;
					
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСтрокуКонтактнойИнформацииEMail(ТЧКонтактнаяИнформация, ВидКИ, ЗначениеEMail = Неопределено) Экспорт
	
	ПеречислениеСсылкаТипыКонтактнойИнформации = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Перечисления_ТипыКонтактнойИнформации");
	
	ТипКИ = ПеречислениеСсылкаТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	СтрокаКИ 			= Неопределено;
	
	Итр = 0;
	Пока Итр < ТЧКонтактнаяИнформация.Количество() Цикл
		Если ТЧКонтактнаяИнформация[Итр].Тип = ТипКИ
			И ТЧКонтактнаяИнформация[Итр].Вид = ВидКИ Тогда
			Если СтрокаКИ = Неопределено Тогда
				
				СтрокаКИ 			= ТЧКонтактнаяИнформация[Итр];
				Итр 				= Итр + 1;
				
			Иначе
				ТЧКонтактнаяИнформация.Удалить(Итр);
			КонецЕсли;
		Иначе
			Итр = Итр + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаКИ = Неопределено Тогда
		СтрокаКИ = ТЧКонтактнаяИнформация.Добавить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеEMail) Тогда

		СтруктураЭлементаКИ = Новый Структура;
		СтруктураЭлементаКИ.Вставить("type", "АдресЭлектроннойПочты");
		СтруктураЭлементаКИ.Вставить("value", ЗначениеEMail);
		СтрокаКИ.Тип 			= ТипКИ;
		СтрокаКИ.Вид 			= ВидКИ;
		СтрокаКИ.Значение 		= УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(СтруктураЭлементаКИ);
		СтрокаКИ.ЗначенияПолей 	= УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзJSONВXML(СтрокаКИ.Значение
			, СтрокаКИ.Тип);
		СтрокаКИ.Представление 	= ЗначениеEMail;
		СтрокаКИ.АдресЭП 		= СтрокаКИ.Представление; 

	Иначе
		ТЧКонтактнаяИнформация.Удалить(СтрокаКИ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуКонтактнойИнформацииТелефон(ТЧКонтактнаяИнформация, ВидКИ, 
	ЗначениеТелефон = Неопределено, ЗначениеТелефонДоп = Неопределено) Экспорт
	
	ПеречислениеСсылкаТипыКонтактнойИнформации = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Перечисления_ТипыКонтактнойИнформации");
	
	ТипКИ = ПеречислениеСсылкаТипыКонтактнойИнформации.Телефон;
	СтрокаКИ 			= Неопределено;
	ТелефонВСтрокеКИ 	= Новый Структура;
	
	Итр = 0;
	Пока Итр < ТЧКонтактнаяИнформация.Количество() Цикл
		Если ТЧКонтактнаяИнформация[Итр].Тип = ТипКИ
			И ТЧКонтактнаяИнформация[Итр].Вид = ВидКИ Тогда
			Если СтрокаКИ = Неопределено Тогда
				
				СтрокаКИ 			= ТЧКонтактнаяИнформация[Итр];
				ТелефонВСтрокеКИ 	= ?(УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(СтрокаКИ.Значение),
					УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(СтрокаКИ.Значение, ТипКИ), 
					Новый Структура);
				Итр 				= Итр + 1;
				
			Иначе
				ТЧКонтактнаяИнформация.Удалить(Итр);
			КонецЕсли;
		Иначе
			Итр = Итр + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаКИ = Неопределено Тогда
		СтрокаКИ = ТЧКонтактнаяИнформация.Добавить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеТелефон) ИЛИ ЗначениеЗаполнено(ЗначениеТелефонДоп) Тогда
		
		ТелефонВСтрокеКИ.Вставить("type", "Телефон");
		
		Если ЗначениеТелефон <> ?(ТелефонВСтрокеКИ.Свойство("countryCode"), ТелефонВСтрокеКИ.countryCode, "")
			+ ?(ТелефонВСтрокеКИ.Свойство("areaCode"), ТелефонВСтрокеКИ.areaCode, "")
			+ ?(ТелефонВСтрокеКИ.Свойство("number"), ТелефонВСтрокеКИ.number, "") Тогда
				
			Если ТелефонВСтрокеКИ.Свойство("countryCode") Тогда 
				ТелефонВСтрокеКИ.Удалить("countryCode");
			КонецЕсли;
			
			Если ТелефонВСтрокеКИ.Свойство("areaCode") Тогда 
				ТелефонВСтрокеКИ.Удалить("areaCode");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеТелефон) Тогда
				ТелефонВСтрокеКИ.Вставить("number", ЗначениеТелефон);
			ИначеЕсли ТелефонВСтрокеКИ.Свойство("number") Тогда 
				ТелефонВСтрокеКИ.Удалить("number");
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеТелефонДоп) Тогда
			ТелефонВСтрокеКИ.Вставить("extNumber", ЗначениеТелефонДоп);
		ИначеЕсли ТелефонВСтрокеКИ.Свойство("extNumber") Тогда 
			ТелефонВСтрокеКИ.Удалить("extNumber");
		КонецЕсли;
		
		СтрокаКИ.Тип 			= ТипКИ;
		СтрокаКИ.Вид 			= ВидКИ;
		СтрокаКИ.Значение 		= УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ТелефонВСтрокеКИ);
		СтрокаКИ.ЗначенияПолей 	= УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзJSONВXML(СтрокаКИ.Значение
			, СтрокаКИ.Тип);
		СтрокаКИ.Представление 	= УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(СтрокаКИ.Значение);
		СтрокаКИ.Представление 	= ?(ПустаяСтрока(СтрокаКИ.Представление), ЗначениеТелефон,СтрокаКИ.Представление);
		СтрокаКИ.АдресЭП 		= ""; 

	Иначе
		ТЧКонтактнаяИнформация.Удалить(СтрокаКИ);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьСтатусВыгрузкиОбъекта(ОбъектБД, Организация) Экспорт
	 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегистрСостояний.ОбъектСсылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.КМ_ДанныеДляВыгрузки КАК РегистрСостояний
	|ГДЕ
	|	РегистрСостояний.ОбъектСсылка = &ОбъектБДСсылка
	|	И РегистрСостояний.Организация = &Организация";
	
	Запрос.Параметры.Вставить("ОбъектБДСсылка",	ОбъектБД.ссылка);
	Запрос.Параметры.Вставить("Организация",	Организация);
	
	Выборка =   Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
	
КонецФункции

Функция ПолучитьСписокПунктовПогрузкиВыгрузкиСКаргомарт(Организация, НастройкиКаргомарт, ФильтрНаименование = "", ФильтрНаселенныйПункт = "",
		 ИД = Неопределено, ПриоритетКаргомарт = Истина) Экспорт
	
	СправочникСсылкаКонтрагенты = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Справочники_Контрагенты");
	
	Результат = Новый Структура;
	Результат.Вставить("Лог", 		"");
	Результат.Вставить("КодОшибки", 0);
	Результат.Вставить("Отладка", Новый Массив);
		
	СоединениеHTTP 					= ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
	
	Токен 							= ПолучитьТокенАвторизацииКаргомарт(Организация, НастройкиКаргомарт, СоединениеHTTP, Результат);
	
	Если Токен = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", 		"application/json"); 
	Заголовки.Вставить("Authorization",	Токен);
	
	СтрокаЗапроса = СокрЛП(ПолучитьHTTPЗапросПунктовПогрузкиВыгрузки(ФильтрНаименование, ФильтрНаселенныйПункт, ИД));
	
	ЗапросHTTP_ПолучитьПункт = Новый HTTPЗапрос(СтрокаЗапроса);
	ЗапросHTTP_ПолучитьПункт.Заголовки = Заголовки;
			
	Попытка
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP_ПолучитьПункт);
	Исключение
				
		ИО = ИнформацияОбОшибке();
		
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
				
		Результат.КодОшибки = 3;
		
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
		СоединениеHTTP.Сервер,
		СтрокаЗапроса,
		СоединениеHTTP.Порт,
		Токен,
		СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
				
		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеСпискаЗаказов.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь,,);
		
		Возврат Результат;
				
	КонецПопытки;
	
	СтрокаJSON = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	ПолученныеДанныеСтруктура = КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаJSON);

	НужныеПункты = Новый Массив;
	
	СтрокаПунктов = "";
	
	Если (ИД <> Неопределено) И (ТипЗнч(ИД) = Тип("Массив")) Тогда
			
		Для Каждого Элемент из ИД Цикл
			
			Для Каждого Пункт Из ПолученныеДанныеСтруктура.data.storagePoint Цикл
				
				Если Пункт.id = Элемент Тогда
					
					НужныйПункт = Новый Структура();
			
					Для каждого Элемент Из Пункт Цикл 
						НужныйПункт.Вставить(Элемент.Ключ, Элемент.Значение); 
					КонецЦикла;
					
					НужныеПункты.Добавить(НужныйПункт);
					
					СтрокаПунктов = СтрокаПунктов + Пункт.id + Символы.ПС;

				КонецЕсли;
												
			КонецЦикла;		
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Пункт Из ПолученныеДанныеСтруктура.data.storagePoint Цикл
			
			НужныйПункт = Новый Структура();
			
			Для каждого Элемент Из Пункт Цикл 
				НужныйПункт.Вставить(Элемент.Ключ, Элемент.Значение); 
			КонецЦикла;
								
			НужныеПункты.Добавить(НужныйПункт);
			
			СтрокаПунктов = СтрокаПунктов + Пункт.id + Символы.ПС;
			
		КонецЦикла;	
			
	КонецЕсли;	
	
#Область ЗаписатьПункты

	ЗаписанныеПунктыЛог = ""; // Это нужно писать в конец лога, после загруженых заказов	
	ЗаписанныеПунктыЛог = "─────────────────────────────────────────────────────────────────────────
		|";
	ЗаписанныеПунктыЛог = ЗаписанныеПунктыЛог + "Пункты обновленные/записанные/пропущенные в БД:" + Символы.ПС + Символы.ПС;	

	Для каждого Пункт из НужныеПункты Цикл
		
		СтруктураДанныхПункта = Новый Структура;
		СтруктураДанныхПункта.Вставить("ИД", 						Пункт.id);
		СтруктураДанныхПункта.Вставить("Наименование",	 			?(Пункт.Свойство("title"), Пункт.title, ""));
		СтруктураДанныхПункта.Вставить("НаселенныйПункт", 			?(Пункт.Свойство("localityName"), Пункт.localityName, ""));
		СтруктураДанныхПункта.Вставить("КЛАДР", 					?(Пункт.Свойство("code"), Пункт.code, ""));
		СтруктураДанныхПункта.Вставить("Адрес", 					?(Пункт.Свойство("address"), Пункт.address, ""));
		СтруктураДанныхПункта.Вставить("НомерДома", 				?(Пункт.Свойство("house"), Пункт.house, ""));
		СтруктураДанныхПункта.Вставить("Комментарий", 				?(Пункт.Свойство("comment"), Пункт.comment, ""));
		СтруктураДанныхПункта.Вставить("КоординатыШирота", 			?(Пункт.Свойство("latitude"), Число(Лев(Строка(Пункт.latitude), 17)), 0));
		СтруктураДанныхПункта.Вставить("КоординатыДолгота", 		?(Пункт.Свойство("longitude"), Число(Лев(Строка(Пункт.longitude), 17)), 0));
		СтруктураДанныхПункта.Вставить("ФормаОрганизации", 			?(Пункт.Свойство("legalStatus"), Пункт.legalStatus, 0));
		СтруктураДанныхПункта.Вставить("ЮридическоеНаименование", 	?(Пункт.Свойство("legalName"), Пункт.legalName, ""));
//		СтруктураДанныхПункта.Вставить("Контрагент", 				?(Пункт.Свойство("pointShipper"), ПолучитьКонтрагентаПунктаПогрузкиВыгрузки(Пункт.pointShipper), СправочникСсылкаКонтрагенты.ПустаяСсылка()));
				
		РезультатЗаписи = ЗаписатьПунктПогрузкиВыгрузки(Организация, НастройкиКаргомарт, СтруктураДанныхПункта, Результат.Лог, ПриоритетКаргомарт);
		
		Если РезультатЗаписи.КодОшибки <> 0 Тогда
			
			Результат.КодОшибки = 6;
			Результат.Лог 		= Результат.Лог + КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, СтруктураДанныхПункта.ИД)
				+ Символы.ПС;
			Возврат Результат;
			
		КонецЕсли;
	
		ЗаписанныеПунктыЛог = ЗаписанныеПунктыЛог + РезультатЗаписи.Описание;
			
	КонецЦикла;
			
	Результат.Лог = Результат.Лог + "─────────────────────────────────────────────────────────────────────────
		|";
	
	Если СтрокаПунктов <> "" Тогда
		Результат.Лог = Результат.Лог + "Успешно загружены пункты с ИД: " + Символы.ПС + СтрокаПунктов;
	КонецЕсли;	
	
	Результат.Лог = Результат.Лог + ЗаписанныеПунктыЛог;
	
	Результат.Вставить("Пункт", РезультатЗаписи.Пункт); //Нужно для автотеста
#КонецОбласти	
			
	Возврат Результат;

КонецФункции

Функция УдалитьПунктПогрузкиВыгрузи(Организация, НастройкиКаргомарт, ИД = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Лог", 		"");
	Результат.Вставить("КодОшибки", 0);
	
	Если ИД = Неопределено Тогда
		
		Результат.Лог = "ИД Пункта не передано";
		Возврат Результат;
		
	КонецЕсли;
	
	СоединениеHTTP 					= ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
		
	Токен 							= ПолучитьТокенАвторизацииКаргомарт(Организация, НастройкиКаргомарт, СоединениеHTTP, Результат);
		
	Если Токен = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", 		"*/*"); 
	Заголовки.Вставить("Authorization",	Токен);
	
	СтрокаЗапроса = "/api/v2/storage-point/" + СтрЗаменить(Строка(ИД), Символы.НПП,"");
		
	ЗапросHTTP_УдалитьПункт = Новый HTTPЗапрос(СтрокаЗапроса);
	ЗапросHTTP_УдалитьПункт.Заголовки = Заголовки;
					
	Попытка
		ОтветHTTP = СоединениеHTTP.Удалить(ЗапросHTTP_УдалитьПункт);
	Исключение
					
		ИО = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
					
		Результат.КодОшибки = 3;
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
		СоединениеHTTP.Сервер,
		"",
		СоединениеHTTP.Порт,
		"******",
		СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
					
		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.УдалитьПунктПогрузкиВыгрузи.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь,,);
			
		Возврат Результат;
					
	КонецПопытки;
	
	СтрокаJSON 			= ОтветHTTP.ПолучитьТелоКакСтроку();
	
	Если Найти(СтрокаJSON, "error") > 0 Тогда
		
		Результат.Лог = "Не удалось Удалить Пункт на каргомарте с ИД " + Строка(ИД) + Символы.ПС + СтрокаJSON;
						
		Возврат Результат;
					
	КонецЕсли;
	
	ПунктИзБазы = ПолучитьПунктИзБазы(ИД);
		
	Если ПунктИзБазы = Неопределено Тогда
		
		Результат.Лог = "Не удалось найти Пункт с ИД " + Строка(ИД);
		
		Возврат Результат;
		
	КонецЕсли;
		
		УдаляемыйОбъект = ПунктИзБазы.Ссылка.ПолучитьОбъект();
		УдаляемыйОбъект.Удалить();	
		
	Возврат Истина;
	
КонецФункции

Функция ДанныеТелефонаИзПолейКонтактнойИнформации(ПредставлениеКИ, Значение = Неопределено, ЗначенияПолей = Неопределено) Экспорт
	
	ПеречислениеСсылкаТипыКонтактнойИнформации = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Перечисления_ТипыКонтактнойИнформации");
	
	Результат = Новый Структура;
	Результат.Вставить("Телефон", Строка(ПредставлениеКИ));
	Результат.Вставить("ТелефонДоп", "");
	
	Если ЗначениеЗаполнено(Значение) 
		И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(Значение) Тогда
		
		ПоляКИ 					= УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(Значение, ПеречислениеСсылкаТипыКонтактнойИнформации.Телефон);
		Результат.Телефон 		= ?(ПоляКИ.Свойство("countryCode"), ПоляКИ.countryCode, "")
			+ ?(ПоляКИ.Свойство("areaCode"), ПоляКИ.areaCode, "")
			+ ?(ПоляКИ.Свойство("number"), ПоляКИ.number, "");
		Результат.ТелефонДоп 	= ?(ПоляКИ.Свойство("extNumber"), ПоляКИ.extNumber, "")
			
	ИначеЕсли ЗначениеЗаполнено(ЗначенияПолей) 
		И УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		
		XDTOКонтактная 			= УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, ПеречислениеСсылкаТипыКонтактнойИнформации.Телефон);
		ПоляКИ 					= УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(XDTOКонтактная, ПеречислениеСсылкаТипыКонтактнойИнформации.Телефон);
		Результат.Телефон 		= ?(ПоляКИ.Свойство("countryCode"), ПоляКИ.countryCode, "")
			+ ?(ПоляКИ.Свойство("areaCode"), ПоляКИ.areaCode, "")
			+ ?(ПоляКИ.Свойство("number"), ПоляКИ.number, "");
		Результат.ТелефонДоп	= ?(ПоляКИ.Свойство("extNumber"), ПоляКИ.extNumber, "")
		 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьПунктПогрузкиВыгрузиВКаргомарт(Организация, НастройкиКаргомарт, Пункт) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Лог", 		"");
	Результат.Вставить("КодОшибки", 0);
		
		СоединениеHTTP 					= ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
		
		Токен 							= ПолучитьТокенАвторизацииКаргомарт(Организация, НастройкиКаргомарт, СоединениеHTTP, Результат);
		
		Если Токен = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", 		"application/json");
		Заголовки.Вставить("Accept", 		"application/json"); 
		Заголовки.Вставить("Authorization",	Токен);
		
		ЗапросHTTP_ОтправитьПункт = Новый HTTPЗапрос("/api/v2/storage-point");
		ЗапросHTTP_ОтправитьПункт.Заголовки = Заголовки;

		СтрокаЗапроса = КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(Пункт);

		ЗапросHTTP_ОтправитьПункт.УстановитьТелоИзСтроки(СтрокаЗапроса);
				
		Попытка
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP_ОтправитьПункт);
		Исключение
					
			ИО = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
					
			Результат.КодОшибки = 3;
			ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			СтрокаЗапроса,
			СоединениеHTTP.Порт,
			"******",
			СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
					
			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок(ИО, "Каргомарт.ПолучениеСпискаЗаказов.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь,,);
			
			Возврат Результат;
					
		КонецПопытки;
		
		СтрокаJSON 			= ОтветHTTP.ПолучитьТелоКакСтроку();
		
		Если Найти(СтрокаJSON, "error") > 0 Тогда
			
			ИО = ИнформацияОбОшибке();
			
			ПодробноеПредставлениеОшибки = "Строка POST запроса:" + Символы.ПС 
			+ СтрокаЗапроса + Символы.ПС + "Строка ответа:" + Символы.ПС + СтрокаJSON;
			
			Результат.КодОшибки = 3;
			
			Результат.Лог  = Результат.Лог + Символы.ПС + КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			"",
			СоединениеHTTP.Порт,
			Токен,
			СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
			
			Возврат Результат;
						
		КонецЕсли;
		
		Результат.Вставить("Пункт");
		Результат.Пункт	= КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(ОтветHTTP.ПолучитьТелоКакСтроку());
		
		Возврат Результат;
	
КонецФункции

Процедура СохранитьНомерПоследнегоЗапросаКаргомарт(Организация, НомерЗапроса) Экспорт
	
	РегистрСведенийСсылкаДополнительныеСведения = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("РегистрыСведений_ДополнительныеСведения");
	
	Если Не (ЗначениеЗаполнено(НомерЗапроса) И ЗначениеЗаполнено(Организация)) Тогда
		Возврат;
	КонецЕсли;
	
	НЗ = РегистрСведенийСсылкаДополнительныеСведения.СоздатьНаборЗаписей();
	НЗ.Отбор.Объект.Установить(Организация, Истина);
	НЗ.Отбор.Свойство.Установить(КМ_ОбщийМодульПовтИсп.РеквизитНомерПоследнегоЗапросаКаргомарт(), Истина);
	МЗ = НЗ.Добавить();
	
	МЗ.Объект 		= Организация;
	МЗ.Свойство 	= КМ_ОбщийМодульПовтИсп.РеквизитНомерПоследнегоЗапросаКаргомарт();
	МЗ.Значение 	= НомерЗапроса;
	
	ОрганизацияПредставление = Строка(Организация);
	
	Попытка
		НЗ.Записать(Истина);
	Исключение
		
		//Записать информацию об ошибке и дать исключению всплыть
		ИО = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);
		
		ТекстОшибки = "Ошибка записи номера последнего запроса к системе Каргомарт:
		|─────────────────────────────────────────────────────────────────────────
		|	Организация: " + ОрганизацияПредставление + "
		|─────────────────────────────────────────────────────────────────────────
		|Подробное представление ошибки:
		|	" + СтрЗаменить(ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб) + "
		|─────────────────────────────────────────────────────────────────────────";
		
		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок(ИО, "Каргомарт.ЗаписьДопСведений.СохранитьНомерПоследнегоЗапросаКаргомарт",, ТекстОшибки
			, Истина, Истина,, Истина);
		
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти




#Область СлужебныеПроцедурыИФункции

Функция ВызватьМетодКаргомарт(СоединениеHTTP, Заголовки, Токен, СтрокаЗапроса, ТелоЗапроса = Неопределено, МетодHTTP, ПрефиксОшибкиВЖР, Результат)
	
	ЗапросHTTP 						= Новый HTTPЗапрос(СтрокаЗапроса);
	ЗапросHTTP.Заголовки 			= Заголовки;
	
	Если ТелоЗапроса <> Неопределено Тогда
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8 , ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
		
	Попытка
		ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод(МетодHTTP, ЗапросHTTP);
	Исключение

		ИО = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО);

		Результат.КодОшибки = 3;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, СоединениеHTTP.Сервер,
			СтрокаЗапроса, СоединениеHTTP.Порт, "******", СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС,
			Символы.ПС + Символы.Таб));

		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, ПрефиксОшибкиВЖР + ".ОбращениеК_HTTP_Сервису", Результат.Лог,
			Результат.Описание, Ложь);
		Возврат Неопределено;

	КонецПопытки;

	СтрокаОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();

	Если ОтветHTTP.КодСостояния <> 200
		И ОтветHTTP.КодСостояния <> 201 Тогда

		СтрокаОтвет = ?(ЗначениеЗаполнено(СтрокаОтвет), Символы.ПС + "Сообщение от сервера: " + Символы.ПС, "")
			+ СтрокаОтвет;

		Результат.КодОшибки = 3;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, СоединениеHTTP.Сервер,
			СтрокаЗапроса, СоединениеHTTP.Порт, "******", "Код HTTP-ответа:" + ОтветHTTP.КодСостояния + СтрокаОтвет);

		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, ПрефиксОшибкиВЖР + ".ОбращениеК_HTTP_Сервису",
			Результат.Лог, Результат.Описание, Ложь);

	КонецЕсли;
		
	Возврат СтрокаОтвет;
	
КонецФункции

Функция ВосстановитьУИД(УИДЗаказа)
	
	Результат = СокрЛП(УИДЗаказа);
	
	Если СтрДлина(Результат) = 32 Тогда
		
		Результат = Лев(Результат, 8) + "-" + Сред(Результат, 9, 4) + "-" + Сред(Результат, 13, 4) + "-"
			+ Сред(Результат, 17, 4) + "-" + Сред(Результат, 21); 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьИдентификаторыЗаказаПоПолученнымДаннымЗаказа(Заказ, ПолученныйЗаказСтруктура, Результат)
	
	СтрНовыеИдентификаторы = Новый Структура;
	СтрНовыеИдентификаторы.Вставить("ИД", 				?(ПолученныйЗаказСтруктура.Свойство("order")
		И ПолученныйЗаказСтруктура.order.Свойство("serialId"), Формат(
		ПолученныйЗаказСтруктура.order.serialId, "ЧГ=0"), ""));
	СтрНовыеИдентификаторы.Вставить("УИДЗаказа", 		?(ПолученныйЗаказСтруктура.Свойство("order")
		И ПолученныйЗаказСтруктура.order.Свойство("id"),
		ПолученныйЗаказСтруктура.order.id, ""));	
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЗаказОбъект, СтрНовыеИдентификаторы);
	ЗаказОбъект.ДетальнаяИнформация 	= КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(ПолученныйЗаказСтруктура);	
	ЗаказОбъект.ОбменДанными.Загрузка 	= Истина;

	Попытка
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение

		Инфо = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.КодОшибки = 14;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки) + Символы.ПС + Инфо;
		Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;

	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьИдентификаторыЗаказаПоПолученнымДаннымЧерновика(Заказ, ПолученныйЧерновикСтруктура, Результат)
	
	СтрНовыеИдентификаторы = Новый Структура;
	СтрНовыеИдентификаторы.Вставить("УИДЧерновика", 	?(ПолученныйЧерновикСтруктура.Свойство("orderDraftExpeditor"),
		ПолученныйЧерновикСтруктура.orderDraftExpeditor.id, ""));
	СтрНовыеИдентификаторы.Вставить("ИД", 				?(ПолученныйЧерновикСтруктура.Свойство("orderDraftExpeditor")
		И ПолученныйЧерновикСтруктура.orderDraftExpeditor.Свойство("serialId"), Формат(
		ПолученныйЧерновикСтруктура.orderDraftExpeditor.serialId, "ЧГ=0"), ""));
	СтрНовыеИдентификаторы.Вставить("УИДЗаказа", 		?(ПолученныйЧерновикСтруктура.Свойство("orderDraftExpeditor")
		И ПолученныйЧерновикСтруктура.orderDraftExpeditor.Свойство("orderId"),
		ПолученныйЧерновикСтруктура.orderDraftExpeditor.orderId, ""));	
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЗаказОбъект, СтрНовыеИдентификаторы);
	ЗаказОбъект.ДетальнаяИнформация 	= КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(ПолученныйЧерновикСтруктура);	
	ЗаказОбъект.ОбменДанными.Загрузка 	= Истина;

	Попытка
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение

		Инфо = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.КодОшибки = 14;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки) + Символы.ПС + Инфо;
		Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;

	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьJSONОбъектаЗаказа(Заказ, Результат)
	
	Запрос = КМ_ОбщийМодульПовтИсп.МодульЯдро().ЗапросПолучитьJSONОбъектаЗаказа(Заказ);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
//	ДанныеЗаказаКаргомартКонтрагент = 	РезультатЗапроса[0].Выгрузить();
	ДанныеЗаказаКаргомарт 			= 	РезультатЗапроса[2].Выгрузить();
	КонтактныеДанныеЗаказа 			= 	РезультатЗапроса[3].Выбрать();
	
	Если ДанныеЗаказаКаргомарт.Количество() = 0 Тогда
		
		Результат.КодОшибки = 29;
		Результат.Описание = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки);
		Результат.Лог = Результат.Лог + Результат.Описание + Символы.ПС;
		Возврат Результат;
		
	КонецЕсли;
	
	МассивТипыПогрузки = Новый Массив;
	
	Для Итр = 1 По 4 Цикл
		Если СтрНайти(ДанныеЗаказаКаргомарт[0].ТипПогрузкиРазгрузки, Строка(Итр)) <> 0 Тогда
			МассивТипыПогрузки.Добавить(Итр);
		КонецЕсли;
	КонецЦикла;
	
	
	СтруктураЗаказа = Новый Структура;
	СтруктураЗаказа.Вставить("carriageDetail", 	ДанныеЗаказаКаргомарт[0].УсловияПеревозкиДополнительно);
	СтруктураЗаказа.Вставить("externalId", 		СтрЗаменить(Строка(ДанныеЗаказаКаргомарт[0].ЗаказКаргомарт.УникальныйИдентификатор()),"-" ,"" ));
	СтруктураЗаказа.Вставить("truckTypeId", 	ДанныеЗаказаКаргомарт[0].ТипГрузовика);
	СтруктураЗаказа.Вставить("cargoWeight", 	ДанныеЗаказаКаргомарт[0].ТоннажАвто);
	СтруктураЗаказа.Вставить("cargoCapacity", 	ДанныеЗаказаКаргомарт[0].КубатураАвто);
	СтруктураЗаказа.Вставить("loadWeight", 		ДанныеЗаказаКаргомарт[0].ВесГруза);
	СтруктураЗаказа.Вставить("loadCapacity", 	ДанныеЗаказаКаргомарт[0].ОбъемГруза);
	СтруктураЗаказа.Вставить("cargoType", 		ДанныеЗаказаКаргомарт[0].ОписаниеГруза);
	СтруктураЗаказа.Вставить("price", 			Формат(ДанныеЗаказаКаргомарт[0].СуммаСНДС, "ЧРД=.; ЧГ=;"));
	СтруктураЗаказа.Вставить("vatRate", 		КМ_ОбщийМодульПовтИсп.СтавкаНДСЧислом(ДанныеЗаказаКаргомарт[0].СтавкаНДС));
	СтруктураЗаказа.Вставить("temperature", 	Новый Структура);
	СтруктураЗаказа.temperature.Вставить("from", 	ДанныеЗаказаКаргомарт[0].ТемператураОт);
	СтруктураЗаказа.temperature.Вставить("to", 		ДанныеЗаказаКаргомарт[0].ТемператураДо);
	СтруктураЗаказа.Вставить("loading", 		МассивТипыПогрузки);
	СтруктураЗаказа.Вставить("device", 			СтрРазделить(ДанныеЗаказаКаргомарт[0].ДопОборудованиеМашины, Символы.ПС, Ложь));
	СтруктураЗаказа.Вставить("conditions", 		СтрРазделить(ДанныеЗаказаКаргомарт[0].УсловияПеревозки, Символы.ПС, Ложь));
	СтруктураЗаказа.Вставить("paymentDetail", 	ДанныеЗаказаКаргомарт[0].КомментарийПоОплате);
	СтруктураЗаказа.Вставить("tag", 			СтрРазделить(ДанныеЗаказаКаргомарт[0].Метки, Символы.ПС, Ложь));
	СтруктураЗаказа.Вставить("priceStrategyType", 	ДанныеЗаказаКаргомарт[0].СтратегияЗаданияЦены);
	СтруктураЗаказа.Вставить("biddingType", 	ДанныеЗаказаКаргомарт[0].ТипЗаказа);
	СтруктураЗаказа.Вставить("bidding", 		Новый Структура);
	СтруктураЗаказа.bidding.Вставить("stepBid", 	ДанныеЗаказаКаргомарт[0].ШагИзмененияЦеныЗаказа);
	СтруктураЗаказа.bidding.Вставить("endDate", 	Формат(ДанныеЗаказаКаргомарт[0].КонечнаяДатаТоргов, "ДФ='yyyy-MM-dd hh:mm:ss';") 
		+ СтрЗаменить(ПредставлениеЧасовогоПояса(ЧасовойПояс()), "GMT", ""));
	
	СтруктураЗаказа.Вставить("contact", 		Новый Массив);
	
	Пока КонтактныеДанныеЗаказа.Следующий() Цикл
		СтруктураЗаказа.contact.Добавить(КонтактныеДанныеЗаказа.КаргомартИД);
	КонецЦикла;
	
	Если ДанныеЗаказаКаргомарт[0].МаршрутНомерСтроки <> null Тогда 
		
		СтруктураЗаказа.Вставить("routePoint", Новый Массив);
		ТекТочка 	= Неопределено;
		Итр 		= 0;
	
		Пока Итр < ДанныеЗаказаКаргомарт.Количество() Цикл //И ДанныеЗаказаКаргомарт[Итр].МаршрутНомерСтроки = ТекТочка
		
			Если ТекТочка <> ДанныеЗаказаКаргомарт[Итр].МаршрутНомерСтроки Тогда
				
				ТекТочка 		= ДанныеЗаказаКаргомарт[Итр].МаршрутНомерСтроки;
				СтруктураТочки 	= Новый Структура;
				СтруктураТочки.Вставить("type", 			?(ДанныеЗаказаКаргомарт[Итр].ТипМаршрутнойТочки = 1, "load",
					?(ДанныеЗаказаКаргомарт[Итр].ТипМаршрутнойТочки = 2, "unload", "loadUnload")));
				СтруктураТочки.Вставить("additionalInfo", 	ДанныеЗаказаКаргомарт[Итр].Комментарий);
				СтруктураТочки.Вставить("fromDate", 		Формат(ДанныеЗаказаКаргомарт[Итр].ДатаМаршрутнойТочки,
					"ДФ=yyyy-MM-dd;"));
				СтруктураТочки.Вставить("fromTime", 		Формат(ДанныеЗаказаКаргомарт[Итр].ВремяС,
					"ДЛФ=T;"));
				СтруктураТочки.Вставить("toTime", 			Формат(ДанныеЗаказаКаргомарт[Итр].ВремяПо,
					"ДЛФ=T;"));
				Если ЗначениеЗаполнено(ДанныеЗаказаКаргомарт[Итр].ПунктПогрузкиВыгрузкиСсылка) Тогда
					
					СтруктураТочки.Вставить("storage", Новый Структура);
					СтруктураТочки.storage.Вставить("id", ДанныеЗаказаКаргомарт[Итр].ИДПунктаПогрузкиВыгрузки);
					СтруктураТочки.storage.Вставить("code", ДанныеЗаказаКаргомарт[Итр].КЛАДР);
					СтруктураТочки.storage.Вставить("title", ДанныеЗаказаКаргомарт[Итр].НаименованиеПунктаПогрузкиВыгрузки);
					СтруктураТочки.storage.Вставить("address", ДанныеЗаказаКаргомарт[Итр].Адрес);
					СтруктураТочки.storage.Вставить("house", ДанныеЗаказаКаргомарт[Итр].НомерДома);
					СтруктураТочки.storage.Вставить("comment", ДанныеЗаказаКаргомарт[Итр].КомментарийПунктаПогрузкиВыгрузки);
					СтруктураТочки.storage.Вставить("coordinate", Новый Структура);
					СтруктураТочки.storage.coordinate.Вставить("latitude", ДанныеЗаказаКаргомарт[Итр].КоординатыШирота);
					СтруктураТочки.storage.coordinate.Вставить("longitude", ДанныеЗаказаКаргомарт[Итр].КоординатыДолгота);
					
					Если ДанныеЗаказаКаргомарт[Итр].ФормаОрганизации <> 0 Тогда
						СтруктураТочки.storage.Вставить("legalStatus", ДанныеЗаказаКаргомарт[Итр].ФормаОрганизации);
					КонецЕсли;
					
					СтруктураТочки.storage.Вставить("legalName", ДанныеЗаказаКаргомарт[Итр].ЮридическоеНаименование);
					
					Если ЗначениеЗаполнено(ДанныеЗаказаКаргомарт[Итр].НаселенныйПункт) Тогда
						СтруктураТочки.storage.Вставить("localityName", ДанныеЗаказаКаргомарт[Итр].НаселенныйПункт);
					КонецЕсли;
					
//					Если ЗначениеЗаполнено(ДанныеЗаказаКаргомарт[Итр].КонтрагентПунктаПогрузкиВыгрузки) Тогда
//						
//						СтруктураТочки.storage.Вставить("pointShipper", Новый Структура);
//						СтруктураТочки.storage.pointShipper.Вставить("legalStatus", ДанныеЗаказаКаргомарт[Итр].ФормаОрганизацииПредприятия);
//						СтруктураТочки.storage.pointShipper.Вставить("companyName", ДанныеЗаказаКаргомарт[Итр].КонтрагентНаименованиеПолное);
//						СтруктураТочки.storage.pointShipper.Вставить("address", ДанныеЗаказаКаргомарт[Итр].КонтрагентЮрАдрес);
//						СтруктураТочки.storage.pointShipper.Вставить("inn", ДанныеЗаказаКаргомарт[Итр].КонтрагентИНН);
//						
//						Если ДанныеЗаказаКаргомарт[Итр].ФормаОрганизацииПредприятия = 1
//							ИЛИ ДанныеЗаказаКаргомарт[Итр].ФормаОрганизацииПредприятия = 2
//							ИЛИ ДанныеЗаказаКаргомарт[Итр].ФормаОрганизацииПредприятия = 5 Тогда
//								ФИОКонтрагента = ПолучитьФИОИзНаименованияКонтрагента(ДанныеЗаказаКаргомарт[Итр].КонтрагентНаименованиеПолное);
//						Иначе
//							ФИОКонтрагента = ПолучитьФИОИзНаименованияКонтрагента("");
//						КонецЕсли;
//						
//						СтруктураТочки.storage.pointShipper.Вставить("lastName", 		ФИОКонтрагента.Фамилия);
//						СтруктураТочки.storage.pointShipper.Вставить("firstName", 		ФИОКонтрагента.Имя);
//						СтруктураТочки.storage.pointShipper.Вставить("secondName", 		ФИОКонтрагента.Отчество);
//						СтруктураТочки.storage.pointShipper.Вставить("countryCode", 	ДанныеЗаказаКаргомарт[Итр].КонтрагентСтранаРегистрации);
//						СтруктураТочки.storage.pointShipper.Вставить("documentType", 	ДанныеЗаказаКаргомарт[Итр].КонтрагентВидУдостоверяющегоДокумента);
//						СтруктураТочки.storage.pointShipper.Вставить("documentNumber", 	ДанныеЗаказаКаргомарт[Итр].КонтрагентНомерУдостоверяющегоДокумента);
//						СтруктураТочки.storage.pointShipper.Вставить("documentDate", 	Формат(ДанныеЗаказаКаргомарт[Итр].КонтрагентДатаУдостоверяющегоДокумента, "ДФ=yyyy-MM-dd; ДП=0001-01-01;"));
//						
//					КонецЕсли;
					
					//Тут добавим контактную информацию.
					ЗаполняемКонтактныеЛица = Истина;
					МассивКонтактныхЛиц 	= Новый Массив;

					Пока ЗаполняемКонтактныеЛица Цикл

						Если ЗначениеЗаполнено(ДанныеЗаказаКаргомарт[Итр].КонтактноеЛицоНаименование)
							И ЗначениеЗаполнено(ДанныеЗаказаКаргомарт[Итр].Телефон) Тогда

							СтрКонтакт = Новый Структура;
							СтрКонтакт.Вставить("name", ДанныеЗаказаКаргомарт[Итр].КонтактноеЛицоНаименование);
							
							ТелефонКОтправке = СтрЗаменить(ДанныеЗаказаКаргомарт[Итр].Телефон, "+7", "8");
							Для НСимв = СтрДлина(ТелефонКОтправке) По 1 Цикл
								Если СтрНайти("0123456789", Сред(ТелефонКОтправке, НСимв, 1)) = Неопределено Тогда
									ТелефонКОтправке = Лев(ТелефонКОтправке, НСимв-1) + Сред(ТелефонКОтправке, НСимв+1);
								КонецЕсли;
							КОнецЦикла;
							
							
							СтрКонтакт.Вставить("phone", ТелефонКОтправке);

							Если ЗначениеЗаполнено(ДанныеЗаказаКаргомарт[Итр].ТелефонДоп) Тогда
								СтрКонтакт.Вставить("ext", ДанныеЗаказаКаргомарт[Итр].ТелефонДоп);
							КонецЕсли;

							МассивКонтактныхЛиц.Добавить(СтрКонтакт);

						КонецЕсли;

						Если Итр + 1 < ДанныеЗаказаКаргомарт.Количество()
							И ДанныеЗаказаКаргомарт[Итр].МаршрутНомерСтроки = ДанныеЗаказаКаргомарт[Итр
							+ 1].МаршрутНомерСтроки Тогда
							Итр = Итр + 1;
						Иначе
							ЗаполняемКонтактныеЛица = Ложь;
						КонецЕсли;

					КонецЦикла;

					Если МассивКонтактныхЛиц.Количество() > 0 Тогда
						СтруктураТочки.storage.Вставить("contact", МассивКонтактныхЛиц);
					КонецЕсли;
					
				КонецЕсли;
				
				СтруктураЗаказа.routePoint.Добавить(СтруктураТочки);
				
			КонецЕсли;
			
			Итр = Итр + 1;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(СтруктураЗаказа);	 
	
КонецФункции

Процедура ПолучитьМаршрутПоДаннымИзКаргомарт(Организация, ТаблицаМаршрут, МаршрутИзКаргомарт, ПунктыПогрузкиВыгрузки, Результат)
	
	МассивИДМаршрутныхТочек = Новый Массив;
	
	Для Каждого ЭлементМаршрута из МаршрутИзКаргомарт Цикл
		Если ЭлементМаршрута.Свойство("storage")
			И ЭлементМаршрута.storage.Свойство("id") 
			И МассивИДМаршрутныхТочек.Найти(ЭлементМаршрута.storage.id) = Неопределено Тогда
			МассивИДМаршрутныхТочек.Добавить(ЭлементМаршрута.storage.id);			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КМ_ПунктыПогрузкиВыгрузки.ИД,
	|	КМ_ПунктыПогрузкиВыгрузки.Ссылка
	|ИЗ
	|	Справочник.КМ_ПунктыПогрузкиВыгрузки КАК КМ_ПунктыПогрузкиВыгрузки
	|ГДЕ
	|	КМ_ПунктыПогрузкиВыгрузки.ИД В (&МассивИДМаршрутныхТочек)
	|	И КМ_ПунктыПогрузкиВыгрузки.ПометкаУдаления = ЛОЖЬ
	|	И КМ_ПунктыПогрузкиВыгрузки.Владелец = &Организация";
	Запрос.УстановитьПараметр("МассивИДМаршрутныхТочек", 	МассивИДМаршрутныхТочек);
	Запрос.УстановитьПараметр("Организация", 				Организация);
	ТаблицаМаршрутныхТочек = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ЭлементМаршрута из МаршрутИзКаргомарт Цикл
		
		
		СтрокаМаршрута = ТаблицаМаршрут.Добавить();
		СтрокаМаршрута.ТипМаршрутнойТочки = 0;
		
		Если ЭлементМаршрута.Свойство("isLoad") И ЭлементМаршрута.isLoad = Истина Тогда
			СтрокаМаршрута.ТипМаршрутнойТочки = СтрокаМаршрута.ТипМаршрутнойТочки + 1;
		КонецЕсли;
		
		Если ЭлементМаршрута.Свойство("isUnload") И ЭлементМаршрута.isUnload = Истина Тогда
			СтрокаМаршрута.ТипМаршрутнойТочки = СтрокаМаршрута.ТипМаршрутнойТочки + 2;
		КонецЕсли;
		
		СтрокаМаршрута.Комментарий 			= ?(ЭлементМаршрута.Свойство("additionalInfo"),
			ЭлементМаршрута.additionalInfo,
			"");
		СтрокаМаршрута.ДатаМаршрутнойТочки 	= ?(ЭлементМаршрута.Свойство("fromDate"),
			Дата(СтрЗаменить(ЭлементМаршрута.fromDate, "-", "")),
			Дата(1,1,1));
		СтрокаМаршрута.ВремяС 				= ?(ЭлементМаршрута.Свойство("fromTime"),
			Дата("00010101" + СтрЗаменить(ЭлементМаршрута.fromTime, ":", "")), 
			Дата(1,1,1)); 
		СтрокаМаршрута.ВремяПо 				= ?(ЭлементМаршрута.Свойство("toTime"),
			Дата("00010101" + СтрЗаменить(ЭлементМаршрута.toTime, ":", "")), 
			Дата(1,1,1));
		
		Если ЭлементМаршрута.Свойство("storage")
			И ЭлементМаршрута.storage.Свойство("id") Тогда
			
			НайденнаяМаршрутнаяТочка = ТаблицаМаршрутныхТочек.Найти(ЭлементМаршрута.storage.id, "ИД");
			
			Если НайденнаяМаршрутнаяТочка <> Неопределено Тогда
				СтрокаМаршрута.ПунктПогрузкиВыгрузки = НайденнаяМаршрутнаяТочка.Ссылка;
			Иначе
				Результат.Лог = Результат.Лог 
					+ "Не удалось найти в БД пункт погрузки/выгрузки с ИД " + ЭлементМаршрута.storage.id + Символы.ПС;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСотрудниковПоСпискуИД(СписокИДСотрудников, Результат)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КМ_Сотрудники.Сотрудник,
	|	КМ_Сотрудники.КаргомартИД
	|ИЗ
	|	Справочник.КМ_Сотрудники КАК КМ_Сотрудники
	|ГДЕ
	|	КМ_Сотрудники.КаргомартИД В (&МассивСотрудники)";
	Запрос.УстановитьПараметр("МассивСотрудники", СписокИДСотрудников);
	ТабСотрудники = Запрос.Выполнить().Выгрузить();

	ПотерянныеСотрудники = "";

	Для Каждого ИДСотрудника Из СписокИДСотрудников Цикл
		Если ТабСотрудники.Найти(ИДСотрудника, "КаргомартИД") = Неопределено Тогда
			ПотерянныеСотрудники = ПотерянныеСотрудники + ИДСотрудника + Символы.ПС;
		КонецЕсли;
	КонецЦикла;

	Если ПотерянныеСотрудники <> "" Тогда
		Результат.Лог = Результат.Лог + "
			|Следующие сотрудники не найдены в базе по указанным ИД:" + Символы.ПС
			+ ПотерянныеСотрудники;
	КонецЕсли;
	
	Возврат ТабСотрудники;
		
КонецФункции

Функция ПолучитьФИОИзНаименованияКонтрагента(Знач НаименованиеКонтрагента)
	
	Результат = Новый Структура;
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	
	НаименованиеКонтрагента  = СтрЗаменить(нрег(НаименованиеКонтрагента), "индивидуальный", "");
	НаименованиеКонтрагента  = СтрЗаменить(НаименованиеКонтрагента, "предприниматель", "");
	
	ЧастиНаименования = СтрРазделить(НаименованиеКонтрагента, " ", Ложь);
	ИП = ЧастиНаименования.Найти("ип");
	
	Если ИП <> Неопределено Тогда
		ЧастиНаименования.Удалить(ИП);
	КонецЕсли;
	
	Если ЧастиНаименования.Количество()> 0 Тогда
		Результат.Фамилия = ВРег(Лев(ЧастиНаименования[0], 1)) + Сред(ЧастиНаименования[0], 2);
	КонецЕсли;
	
	Если ЧастиНаименования.Количество()> 1 Тогда
		Результат.Имя = ВРег(Лев(ЧастиНаименования[1], 1)) + Сред(ЧастиНаименования[1], 2);
	КонецЕсли;
	
	Если ЧастиНаименования.Количество()> 2 Тогда
		Результат.Отчество = ВРег(Лев(ЧастиНаименования[2], 1)) + Сред(ЧастиНаименования[2], 2);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ЗаписьЗаказаКаргомарт(СтруктураДанныхЗаказаКаргомарт, ПротоколОшибок)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки", 					0);
	Результат.Вставить("Описание", 						"");
	
	Если ЗначениеЗаполнено(СтруктураДанныхЗаказаКаргомарт) = Ложь Тогда
		
		Результат.КодОшибки = 21;
		Результат.Описание 	= КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, "СтруктураДанныхЗаказаКаргомарт");
		Возврат Результат;
		
	КонецЕсли;
	
	ТребуетсяЗапись 	= Ложь;
	НайденныйДокумент 			= Документы.КМ_Заказ.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КМ_Заказ.Ссылка КАК Ссылка,
	|	КМ_Заказ.ПометкаУдаления КАК ПометкаУдаления,
	|	КМ_Заказ.Номер КАК Номер,
	|	КМ_Заказ.Дата КАК Дата,
	|	КМ_Заказ.Проведен КАК Проведен,
	|	КМ_Заказ.Организация КАК Организация,
	|	КМ_Заказ.ДатаПогрузки КАК ДатаПогрузки,
	|	КМ_Заказ.ДатаВыгрузки КАК ДатаВыгрузки,
	|	КМ_Заказ.МаршрутПредставление КАК МаршрутПредставление,
	|	КМ_Заказ.ТрекНомер КАК ТрекНомер,
	|	КМ_Заказ.Статус КАК Статус,
	|	КМ_Заказ.Грузоотправитель КАК Грузоотправитель,
	|	КМ_Заказ.Грузополучатель КАК Грузополучатель,
	|	КМ_Заказ.ЗаказчикВалюта КАК ЗаказчикВалюта,
	|	КМ_Заказ.ЗаказчикСуммаБезНДС КАК ЗаказчикСуммаБезНДС,
	|	КМ_Заказ.СтавкаНДС КАК СтавкаНДС,
	|	КМ_Заказ.СуммаСНДС КАК СуммаСНДС
	|ИЗ
	|	Документ.КМ_Заказ КАК КМ_Заказ
	|ГДЕ
	|	КМ_Заказ.Номер = &ИдентификаторЗаказа
	|	И КМ_Заказ.Организация = &Организация"; 
	Запрос.УстановитьПараметр("ИдентификаторЗаказа", 	СтруктураДанныхЗаказаКаргомарт.Номер);
	Запрос.УстановитьПараметр("Организация", 			СтруктураДанныхЗаказаКаргомарт.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СохраняемаяДатаВыгрузки = Неопределено;
	
	Если Выборка.Следующий() Тогда
		
		НайденныйДокумент 	= Выборка.Ссылка;
		
		СохраняемаяДатаВыгрузки = ОпределитьПереопределеннуюДатуВыгрузкиВЗаказе(Выборка.ДатаВыгрузки, СтруктураДанныхЗаказаКаргомарт);
		
		Для Каждого КлючИЗначение из СтруктураДанныхЗаказаКаргомарт Цикл
			
			Если КлючИЗначение.Ключ = "УИД"
				ИЛИ КлючИЗначение.Ключ = "Маршрут" Тогда
				Продолжить;
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "ДатаВыгрузки" Тогда
				Если ЗначениеЗаполнено(СохраняемаяДатаВыгрузки) = Ложь
					И Выборка[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
					
					ТребуетсяЗапись = Истина;
					Прервать;
					
				КонецЕсли;
			ИначеЕсли Выборка[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				
				ТребуетсяЗапись = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ТребуетсяЗапись = Истина;
	КонецЕсли;
	
	Если ТребуетсяЗапись Тогда

		Если ЗначениеЗаполнено(НайденныйДокумент) И ОбщегоНазначения.СсылкаСуществует(НайденныйДокумент) Тогда
			ДокОбъект = НайденныйДокумент.ПолучитьОбъект();
		Иначе
			
			ДокОбъект = Документы.КМ_Заказ.СоздатьДокумент();
			
			//@skip-check use-non-recommended-method
			ДокОбъект.Дата = ТекущаяДата();
			
		КонецЕсли;
		
		ДокОбъект.Номер = СтруктураДанныхЗаказаКаргомарт.Номер;
		
		ЗаполнитьЗначенияСвойств(ДокОбъект, СтруктураДанныхЗаказаКаргомарт);

		Если ЗначениеЗаполнено(СохраняемаяДатаВыгрузки) Тогда
			
			//Дата выгрузки была переопределена бухгалтерами, и должна быть сохранена.
			ДокОбъект.ДатаВыгрузки = СохраняемаяДатаВыгрузки;
			
		КонецЕсли;
		
		ДокОбъект.Маршрут.Очистить();
		
		Для Каждого ЭлементМаршрута из СтруктураДанныхЗаказаКаргомарт.Маршрут Цикл
			
			СтрокаДок = ДокОбъект.Маршрут.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДок, ЭлементМаршрута);
			
		КонецЦикла;
		
		//Формируем строковые пердставления для регистрации сообщения об ошибке. при ошибке обращения к БД.
		СтрокаОрганизация 	= Строка(СтруктураДанныхЗаказаКаргомарт.Организация);
		
		Попытка
			
			НачатьТранзакцию();
			
			ДокОбъект.Записать(РежимзаписиДокумента.Проведение);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИО = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки 	= ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИО); 
			Результат.КодОшибки 			= 22;
			ТекстОшибки 					= КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СтруктураДанныхЗаказаКаргомарт.Номер,
			СтрокаОрганизация,
			СтруктураДанныхЗаказаКаргомарт.ДатаПогрузки,
			СтруктураДанныхЗаказаКаргомарт.ДатаВыгрузки,
			,
			,
			СтрЗаменить(ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб));
			Результат.Описание 				= ТекстОшибки;
			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок(ИО, "Каргомарт.ПолучениеСпискаЗаказов.ЗаписьЗаказаВ_БД", ПротоколОшибок, ТекстОшибки, Ложь, Истина); 
			
			Возврат Результат;
			
		КонецПопытки;
		
		Результат.Вставить("ЗаказКаргомарт", ДокОбъект.Ссылка);
		
	Иначе
		Результат.Вставить("ЗаказКаргомарт", НайденныйДокумент);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьHTTPЗапросПунктовПогрузкиВыгрузки(ФильтрНаименование, ФильтрНаселенныйПункт, НомерСтраницы = Неопределено)
	
	СтрокаУсловие = "";
	
	Если ПустаяСтрока(ФильтрНаименование) = Ложь Тогда
		СтрокаУсловие = "filter[title]=" + СокрЛП(ФильтрНаименование);	
	КонецЕсли;
	
	Если ПустаяСтрока(ФильтрНаселенныйПункт) = Ложь Тогда
		СтрокаУсловие = СтрокаУсловие + ?(ПустаяСтрока(СтрокаУсловие), "", "&") + СокрЛП(ФильтрНаселенныйПункт);	
	КонецЕсли;
	
	Если НомерСтраницы <> Неопределено Тогда
		СтрокаУсловие = СтрокаУсловие + ?(ПустаяСтрока(СтрокаУсловие), "", "&") + "page=" + Строка(НомерСтраницы);
	КонецЕсли;
	
	Результат = "/api/v2/storage-point" + ?(ПустаяСтрока(СтрокаУсловие), "", "?" + СтрокаУсловие);
		
	Возврат Результат;
	
КонецФункции




Функция ЗаписатьПунктПогрузкиВыгрузки(Организация, НастройкиКаргомарт, СтруктураДанныхПункта, ПротоколОшибок, ПриоритетКаргомарт = Истина)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки", 					0);
	Результат.Вставить("Описание", 						"");
	
	Если ЗначениеЗаполнено(СтруктураДанныхПункта) = Ложь Тогда
		
		Результат.КодОшибки = 21;
		Результат.Описание 	= КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, "СтруктураДанныхПункта");
		Возврат Результат;
		
	КонецЕсли;
	
	//Запрос на сравнение элемента справочника с новыми данными
	
	ПунктИзБазы = ПолучитьПунктИзБазы(СтруктураДанныхПункта.ИД);
	
	Если ПунктИзБазы = Неопределено Тогда
		
		ТребуетсяЗапись = Истина;
		
		НовыйПункт 		= Истина;
		
	Иначе
		
		ТребуетсяЗапись = Ложь;
		
		НовыйПункт 		= Ложь;
		
	КонецЕсли;
		
	Если ПунктИзБазы <> Неопределено  Тогда
		
		НайденныйЭлемент 	= ПунктИзБазы.Ссылка;
			
		Для Каждого КлючИЗначение из СтруктураДанныхПункта Цикл
			
			Если КлючИЗначение.Ключ = "ИД"
				ИЛИ КлючИЗначение.Ключ = "Наименование" Тогда
					Продолжить;
			КонецЕсли;
			
			Если ПунктИзБазы[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				
				ТребуетсяЗапись = Истина;
				
				Если Не ПриоритетКаргомарт Тогда
					ЗаполнитьЗначенияСвойств(СтруктураДанныхПункта, ПунктИзБазы);
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
 				
	КонецЕсли;
	
	Если ТребуетсяЗапись И ПриоритетКаргомарт Тогда
			
			Попытка
			
			НачатьТранзакцию();
			
				ЭлементСправочника = ?(НовыйПункт, Справочники.КМ_ПунктыПогрузкиВыгрузки.СоздатьЭлемент(), ПунктИзБазы.Ссылка.ПолучитьОбъект());
				
				ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтруктураДанныхПункта);
				
				ЭлементСправочника.Записать();
			
			ЗафиксироватьТранзакцию();
			
			Результат.Описание = "Пункт с ИД " + Строка(СтруктураДанныхПункта.ИД) + ?(НовыйПункт, " Записан", " Обновлен") + Символы.ПС;
			
			Исключение
				
				ОтменитьТранзакцию();
				
				ИО = ИнформацияОбОшибке();
				
				Результат.КодОшибки 			= 14;
				ТекстОшибки 					= КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
				СтруктураДанныхПункта.ИД,
				СтруктураДанныхПункта.НаселенныйПункт,
				"Не удалось записать Элемент в Справочник: Каргомарт пункты погрузки выгрузки");
				Результат.Описание 				= ТекстОшибки;
				КМ_ОбщийМодульВызовСервера.ОбработкаОшибок(ИО, "Каргомарт.ЗаписьПунктаПогрузкиВыгрузки.ЗаписьПунктаВ_БД", ПротоколОшибок, ТекстОшибки, Ложь, Истина);
				
				Возврат Результат;
				
			КонецПопытки;
		
			Результат.Вставить("Пункт", ЭлементСправочника.Ссылка);
							
		ИначеЕсли Не ПриоритетКаргомарт Тогда
			//Записываем в каргомарт из базы
			ИзмененныйПункт = ИзменитьПунктПогрузкиВыгрузиВКаргомарт(Организация, НастройкиКаргомарт, СтруктураДанныхПункта);			
			
			Если ИзмененныйПункт.Свойство("Пункт") Тогда			
				Результат.Вставить("Пункт", ИзмененныйПункт.Пункт.data.storagePoint[0]);
			Иначе
				
				Результат.Описание = "Не удалось изменить пункт (ИД " + СтруктураДанныхПункта.ИД + ") на карномарте" + Символы.ПС + ИзмененныйПункт.Лог + Символы.ПС;
			
				Возврат Результат;
				
			КонецЕсли;
			
		Иначе	
								
			Результат.Вставить("Пункт", НайденныйЭлемент);
			Результат.Описание = "Пункт с ИД " + Строка(СтруктураДанныхПункта.ИД) + " пропущен, т.к. существует в Справочнике " + Символы.ПС;	
													
		КонецЕсли;

	Возврат Результат;	
	
КонецФункции

Функция ИзменитьПунктПогрузкиВыгрузиВКаргомарт(Организация, НастройкиКаргомарт, СтруктураДанныхПункта)
	
	Результат = Новый Структура;
	Результат.Вставить("Лог", 		"");
	Результат.Вставить("КодОшибки", 0);
		
		СоединениеHTTP 					= ПолучитьСоединениеКаргомарт(НастройкиКаргомарт);
		
		Токен 							= ПолучитьТокенАвторизацииКаргомарт(Организация, НастройкиКаргомарт, СоединениеHTTP, Результат);
		
		Если Токен = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
						
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", 		"application/json");
		Заголовки.Вставить("Accept", 		"application/json"); 
		Заголовки.Вставить("Authorization",	Токен);
		
		ПутьЗапроса = "/api/v2/storage-point/" + СтрЗаменить(Строка(СтруктураДанныхПункта.ИД), Символы.НПП,"");
		
		ЗапросHTTP_ЗаписатьПункт = Новый HTTPЗапрос(ПутьЗапроса);
		ЗапросHTTP_ЗаписатьПункт.Заголовки = Заголовки;

		СтруктураДанныхПункта.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанныхПункта.Контрагент, "Наименование");
		СтруктураДанныхПункта.Контрагент = ?(СтруктураДанныхПункта.Контрагент = Неопределено, "", СтруктураДанныхПункта.Контрагент);  
		
		СтрокаЗапроса = КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(КМ_ОбщийМодульКлиентСервер.ПунктВФорматКаргомарт(СтруктураДанныхПункта));

		ЗапросHTTP_ЗаписатьПункт.УстановитьТелоИзСтроки(СтрокаЗапроса);
				
		Попытка
			ОтветHTTP = СоединениеHTTP.Записать(ЗапросHTTP_ЗаписатьПункт);
		Исключение
					
			ИО = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИО);
					
			Результат.КодОшибки = 3;
			ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			СтрокаЗапроса,
			СоединениеHTTP.Порт,
			Токен,
			СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
					
			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.РедактированиеПункта.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь,,);
			
			Возврат Результат;
					
		КонецПопытки;
		
		СтрокаJSON 			= ОтветHTTP.ПолучитьТелоКакСтроку();
		
		Если Найти(СтрокаJSON, "error") > 0 Тогда
			
			ИО = ИнформацияОбОшибке();
			
			ПодробноеПредставлениеОшибки = "Строка PUT запроса:" + Символы.ПС 
			+ СтрокаЗапроса + Символы.ПС + "Строка ответа:" + Символы.ПС + СтрокаJSON;
			
			Результат.КодОшибки = 3;
			
			Результат.Лог  = Результат.Лог + Символы.ПС + КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			"",
			СоединениеHTTP.Порт,
			Токен,
			СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
			
			Возврат Результат;
						
		КонецЕсли;
		
		Результат.Вставить("Пункт");
		Результат.Пункт	= КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаJSON);
		
		Возврат Результат;
	
КонецФункции

Функция ПолучитьКонтрагентаПунктаПогрузкиВыгрузки(ИнформацияОКонтрагенте)
	
	СправочникСсылкаКонтрагенты = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Справочники_Контрагенты");
		
	Возврат СправочникСсылкаКонтрагенты.ПустаяСсылка();
	
КонецФункции

Функция ОпределитьПереопределеннуюДатуВыгрузкиВЗаказе(ДатаВыгрузкиЗаказа, ДетальнаяИнформация)
	
	Если ДетальнаяИнформация.ДатаВыгрузки <> ДатаВыгрузкиЗаказа Тогда
		Возврат ДетальнаяИнформация.ДатаВыгрузки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СравнитьСЗаказомИзБД_СоздатьОповещения(Организация, НомерЗаказаКаргомарт, ДетальнаяИнформацияНовая, ДанныеЗаказаНовые)
	
	Лог 			= "";
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	=
	"ВЫБРАТЬ
	|	КМ_Заказ.Номер КАК НомерЗаказа,
	|	КМ_Заказ.ЗаказчикСуммаБезНДС КАК ЗаказчикСуммаБезНДС,
	|	КМ_Заказ.СтавкаНДС КАК СтавкаНДС,
	|	КМ_Заказ.СуммаСНДС КАК СуммаСНДС,
	|	КМ_Заказ.Грузополучатель КАК Грузополучатель,
	|	КМ_Заказ.МаршрутПредставление
	|ИЗ
	|	Документ.КМ_Заказ КАК КМ_Заказ
	|ГДЕ
	|	КМ_Заказ.Номер = &НомерЗаказаКаргомарт
	|	И КМ_Заказ.Организация = &Организация";
	Запрос.УстановитьПараметр("НомерЗаказаКаргомарт", 	НомерЗаказаКаргомарт);
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Лог;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если 	Выборка.ДокументРеализацииЗаказчикуПроведен = Ложь
		И Выборка.ДокументПоступленияОтПеревозчикаПроведен = Ложь Тогда
		Возврат Лог;
	КонецЕсли;
	
	ТекстОповещения = "";
		
	Если Выборка.ГрузоПолучатель <> ДанныеЗаказаНовые.ГрузоПолучатель Тогда
		ТекстОповещения = ТекстОповещения + "Грузополучатель: был """ + Выборка.ГрузоПолучатель + """, стал """ + ДанныеЗаказаНовые.ГрузоПолучатель + """"
			+ Символы.ПС;
	КонецЕсли;
	
	Если Выборка.ЗаказчикСуммаБезНДС + Выборка.СуммаСНДС <> ДанныеЗаказаНовые.ЗаказчикСуммаБезНДС + ДанныеЗаказаНовые.СуммаСНДС Тогда
		ТекстОповещения = ТекстОповещения + "Стоимость для заказчика: была " + Формат(Выборка.ЗаказчикСуммаБезНДС + Выборка.СуммаСНДС, "ЧДЦ=2") + " руб., стала " + Формат(ДанныеЗаказаНовые.ЗаказчикСуммаБезНДС + ДанныеЗаказаНовые.СуммаСНДС, "ЧДЦ=2") + "руб."
			+ Символы.ПС;
	КонецЕсли;
	
	Если Выборка.МаршрутПредставление <> ДанныеЗаказаНовые.МаршрутПредставление Тогда
		ТекстОповещения = ТекстОповещения + "Маршрут: был """ + Выборка.МаршрутПредставление + """, стал """ + ДанныеЗаказаНовые.МаршрутПредставление + """"
			+ Символы.ПС;
	КонецЕсли;
	
	Если ТекстОповещения <> "" Тогда
		
		ТекстОповещения = "Из Каргомарта поступили изменения заказа №" + Выборка.НомерЗаказа + ", для которого уже проведены первичные документы в базе:" 
		+ Символы.ПС + ТекстОповещения;

		Лог = Лог + "Оповещение:
			|----------------
			|" + ТекстОповещения + "
			|----------------
			|";
		
	КонецЕсли;
	
	Возврат Лог;
	
КонецФункции

Функция ОпределитьСуммы(ПереданныеСуммы, ПлательщикНДС = Истина) Экспорт
	
	ПеречислениеСсылкаСтавкиНДС = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Перечисления_СтавкиНДС");
	
	Если ПлательщикНДС = Истина Тогда
		Попытка
			СуммаНДС 	= Число(ПереданныеСуммы.vat);
		Исключение
			СуммаНДС 	= 0;
		КонецПопытки
	Иначе
		СуммаНДС 	= 0;
	КонецЕсли;
	
	
	Попытка
		СуммаБезНДС = Число(ПереданныеСуммы.value);
	Исключение
		СуммаБезНДС = 0;
	КонецПопытки;
	
	Если ПлательщикНДС = Истина Тогда
		
		Если ПереданныеСуммы.vatRate = Null 
			ИЛИ ПереданныеСуммы.vatRate = Неопределено Тогда
			СтавкаНДСЧисло = Неопределено;
		Иначе
			
			ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
			СтавкаНДСЧисло = Окр(ОписаниеТипаЧисла.ПривестиЗначение(ПереданныеСуммы.vatRate));
			
		КонецЕсли;
		
		Если СтавкаНДСЧисло = 20 Тогда
			СтавкаНДС = ПеречислениеСсылкаСтавкиНДС.НДС20;
		ИначеЕсли СтавкаНДСЧисло = 10 Тогда
			СтавкаНДС = ПеречислениеСсылкаСтавкиНДС.НДС10;
		ИначеЕсли СтавкаНДСЧисло = Неопределено Тогда
			СтавкаНДС = ПеречислениеСсылкаСтавкиНДС.БезНДС;
		Иначе
			СтавкаНДС = ПеречислениеСсылкаСтавкиНДС.НДС0;
		КонецЕсли;
	Иначе
		СтавкаНДС = ПеречислениеСсылкаСтавкиНДС.БезНДС;
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("СуммаНДС", 		СуммаНДС);
	Результат.Вставить("СуммаБезНДС", 	СуммаБезНДС);
	Результат.Вставить("СтавкаНДС", 	СтавкаНДС);
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьМаршрут_Протокол_v2(ДанныеЗаказа, Локации, НоменклатурнаяГруппа, ПротоколОшибок = "", МаршрутПредставление = "")
	
	Маршрут 				= Новый Массив;
	МаршрутПредставление 	= "";
	ИдНом 					= "";
	Итр 					= 0;
	Для Каждого МаршрутнаяТочка Из ДанныеЗаказа.route Цикл
		
		Итр 				= Итр + 1;
		СтрМаршрутнаяТочка 	= Новый Структура;
		СтрМаршрутнаяТочка.Вставить("ИДМаршрутнойТочки", 	Формат(МаршрутнаяТочка.storage.id, "ЧГ="));
		СтрМаршрутнаяТочка.Вставить("Тип", 					"");
		СтрМаршрутнаяТочка.Вставить("Наименование", 		"");
				
		ИдНом 				= ИдНом + СтрМаршрутнаяТочка.ИДМаршрутнойТочки;
				
		Для Каждого Локация Из Локации Цикл
			Если СокрЛП(Локация.Id) = СокрЛП(МаршрутнаяТочка.storage.code) Тогда
				
				МаршрутПредставление 			= МаршрутПредставление + ?(Итр = 1, "", " - ") + Локация.typeShort + ". " + СокрЛП(Локация.name);
				СтрМаршрутнаяТочка.Тип 			= Локация.typeShort;
				СтрМаршрутнаяТочка.Наименование = СокрЛП(Локация.name);
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		Маршрут.Добавить(СтрМаршрутнаяТочка);
		
	КонецЦикла;
	
	Возврат Маршрут;
	
КонецФункции

//Процедура ЗаполнитьРеквизитыКонтрагента(КонтрагентОбъект, РеквизитыКонтрагента, ЭтоЮрЛицо)
//	
//	СправочникСсылкаВидыКонтактнойИнформации = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Справочники_ВидыКонтактнойИнформации");
//	
//	ПеречислениеСсылкаТипыКонтактнойИнформации = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Перечисления_ТипыКонтактнойИнформации");
//	
//	ИмяКонфигурации = Метаданные.Имя;
//	
//	Если ИмяКонфигурации <> "БухгалтерияПредприятия" Тогда
//	
//		ИнтернетПоддержкаПользователейБП = Неопределено;
//	
//	КонецЕсли;
//		
//	ЗаполнитьЗначенияСвойств(КонтрагентОбъект, РеквизитыКонтрагента);
//	
//	ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюНаименований(КонтрагентОбъект, РеквизитыКонтрагента); // заполнение истории наименований по данным ЕГРН
//	
//	Если ЭтоЮрЛицо Тогда
//		
//		// Заполнение адресов
//
//		Если РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
//			
//			СтрокаЮрАдресКонтрагента = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
//			
//			ЗаполнитьЗначенияСвойств(СтрокаЮрАдресКонтрагента, РеквизитыКонтрагента.ЮридическийАдрес);
//			
//			СтрокаЮрАдресКонтрагента.Значение 	= РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
//			СтрокаЮрАдресКонтрагента.Тип 		= ПеречислениеСсылкаТипыКонтактнойИнформации.Адрес;
//			СтрокаЮрАдресКонтрагента.Вид 		= СправочникСсылкаВидыКонтактнойИнформации.ЮрАдресКонтрагента;
//			
//			СтрокафактАдрес = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
//			
//			ЗаполнитьЗначенияСвойств(СтрокафактАдрес, СтрокаЮрАдресКонтрагента);
//			
//			СтрокаФактАдрес.Вид = СправочникСсылкаВидыКонтактнойИнформации.ФактАдресКонтрагента;
//			
//			СтрокаПочтовыйАдрес = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
//			
//			ЗаполнитьЗначенияСвойств(СтрокаПочтовыйАдрес, СтрокаЮрАдресКонтрагента);
//			
//			СтрокаПочтовыйАдрес.Вид = СправочникСсылкаВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
//			
//		КонецЕсли;
//		
//		Если РеквизитыКонтрагента.Телефон <> Неопределено Тогда
//			
//			СтрокаЮрАдресКонтрагента = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
//			
//			ЗаполнитьЗначенияСвойств(СтрокаЮрАдресКонтрагента, РеквизитыКонтрагента.Телефон);
//			
//			СтрокаЮрАдресКонтрагента.Значение 	= РеквизитыКонтрагента.Телефон.КонтактнаяИнформация;
//			СтрокаЮрАдресКонтрагента.Тип 		= ПеречислениеСсылкаТипыКонтактнойИнформации.Телефон;
//			СтрокаЮрАдресКонтрагента.Вид 		= СправочникСсылкаВидыКонтактнойИнформации.ТелефонКонтрагента;
//			
//		КонецЕсли;
//		
//		// Заполнение контактного лица 
//		
//		Если РеквизитыКонтрагента.Руководитель <> Неопределено Тогда
//			КонтрагентОбъект.ДополнительныеСвойства.Вставить("ДанныеКонтактногоЛица", РеквизитыКонтрагента.Руководитель);
//		КонецЕсли;
//		
//		Если ЭтоЮрЛицо Тогда
//			ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюКПП(КонтрагентОбъект, РеквизитыКонтрагента); // заполнение истории КПП по данным ЕГРН
//		КонецЕсли;
//		
//		ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюАдресов(КонтрагентОбъект, РеквизитыКонтрагента); // заполнение истории юр. адресов по данным ЕГРН
//		
//	Иначе
//		
//		КонтрагентОбъект.КПП 		= "";
//		СвидетельствоОРегистрации 	= РеквизитыКонтрагента.СвидетельствоОРегистрации;
//		
//		Если СвидетельствоОРегистрации <> Неопределено Тогда						
//			КонтрагентОбъект = КМ_ОбщийМодульПовтИсп.МодульЯдро().ЗаполнитьРеквизитыКонтрагента(КонтрагентОбъект, СвидетельствоОРегистрации);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция ДанныеЕдиныхГосРеестровПоИНН(Знач ИННОбъекта, Знач ЭтоЮрЛицо)
//	
//	ИмяКонфигурации = Метаданные.Имя;
//	
//	СправочникСсылкаКонтрагенты = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Справочники_Контрагенты");
//	
//	ПеречислениеСсылкаЮридическоеФизическоеЛицо = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Перечисления_ЮридическоеФизическоеЛицо");
//	
//	Если ИмяКонфигурации <> "БухгалтерияПредприятия" Тогда
//		ИдентификационныеНомераНалогоплательщиков = Неопределено;
//	КонецЕсли;
//	
//	ИННОбъекта = СокрП(ИННОбъекта);
//	
//	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННОбъекта, ЭтоЮрЛицо);
//	
//	Если РезультатПроверки.СоответствуетТребованиям Тогда
//		
//		Если РезультатПроверки.ЭтоЮрЛицо Тогда
//			РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ИННОбъекта);
//		Иначе
//			РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
//		КонецЕсли;
//		
//		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
//			УровеньЖурналаРегистрации.Информация, СправочникСсылкаКонтрагенты.ПустаяСсылка().Метаданные, ,
//			СтрШаблон(НСтр("ru = 'Выполнено заполнение реквизитов контрагента по ИНН %1'"), ИННОбъекта));
//		
//		РеквизитыКонтрагента.Вставить("ЮридическоеФизическоеЛицо", 
//			?(РезультатПроверки.ЭтоЮрЛицо, ПеречислениеСсылкаЮридическоеФизическоеЛицо.ЮридическоеЛицо, ПеречислениеСсылкаЮридическоеФизическоеЛицо.ФизическоеЛицо));
//		
//		Возврат РеквизитыКонтрагента;
//		
//	Иначе
//		Возврат РезультатПроверки;
//	КонецЕсли;
//	
//КонецФункции

//Функция ПоискКонтрагентаПоИД(ИдентификаторКаргомарт)
//	
//	СправочникСсылкаКонтрагенты = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Справочники_Контрагенты");
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ДополнительныеСведения.Объект КАК Ссылка
//	|ИЗ
//	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//	|ГДЕ
//	|	ДополнительныеСведения.Свойство = &РеквизитИдентификаторКаргомарт
//	|	И ДополнительныеСведения.Значение = &ИдентификаторКаргомарт
//	|	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Контрагенты";
//	
//	Запрос.УстановитьПараметр("ИдентификаторКаргомарт", 		ИдентификаторКаргомарт);
//	Запрос.УстановитьПараметр("РеквизитИдентификаторКаргомарт", КМ_ОбщийМодульПовтИсп.РеквизитИдентификаторКаргомарт());
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() тогда
//		Возврат Выборка.Ссылка;
//	Иначе
//		Возврат СправочникСсылкаКонтрагенты.ПустаяСсылка();
//	КонецЕсли;
//КонецФункции

//Функция ОпределитьКонтрагента(ДанныеКонтрагента, ПротоколОшибок = "")
//	
//	СправочникСсылкаКонтрагенты = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Справочники_Контрагенты");
//	
//	ПеречислениеСсылкаЮридическоеФизическоеЛицо = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Перечисления_ЮридическоеФизическоеЛицо");
//	
//	РегистрСведенийСсылкаДополнительныеСведения = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("РегистрыСведений_ДополнительныеСведения");
//	
//	//РППОтправкиОшибок 	= КДВКаргомартВызовСервера.ПолучитьРасширенныйПрофильПочты();
//	ИДКонтрагента 		= ?(ТипЗнч(ДанныеКонтрагента.id) = Тип("Число"), 
//								Формат(ДанныеКонтрагента.id, "ЧГ=0;"), 
//								ДанныеКонтрагента.id); 
//	Контрагент 			= ПоискКонтрагентаПоИД(ИДКонтрагента);
//	
//	Если ЗначениеЗаполнено(Контрагент) = Истина Тогда
//		Возврат Контрагент;
//	КонецЕсли;
//	
//	ИмяКонтраКМ = ?(ДанныеКонтрагента.Свойство("shortName"), ДанныеКонтрагента.shortName, 
//		?(ДанныеКонтрагента.Свойство("title"), ДанныеКонтрагента.title, ""));
//	ИскомыйИНН 	= ?(ДанныеКонтрагента.Свойство("inn"), 	ДанныеКонтрагента.inn, 	"");
//	ИскомыйКПП 	= ?(ДанныеКонтрагента.Свойство("kpp"), 	ДанныеКонтрагента.kpp, 	"");
//	ОГРН 		= ?(ДанныеКонтрагента.Свойство("ogrn"), ДанныеКонтрагента.ogrn, "");
//	
//	Если ИскомыйИНН = "" Тогда
//		Возврат СправочникСсылкаКонтрагенты.ПустаяСсылка();
//	КонецЕсли;
//	
//	Если 		СтрДлина(ИскомыйИНН) = 10 Тогда
//		ЮрФизЛицо = ПеречислениеСсылкаЮридическоеФизическоеЛицо.ЮридическоеЛицо;
//	ИначеЕсли 	СтрДлина(ИскомыйИНН) = 12 Тогда
//		ЮрФизЛицо = ПеречислениеСсылкаЮридическоеФизическоеЛицо.ФизическоеЛицо;
//	Иначе
//		Возврат СправочникСсылкаКонтрагенты.ПустаяСсылка();
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Контрагенты.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.Контрагенты КАК Контрагенты
//	|ГДЕ
//	|	Контрагенты.ИНН = &ИНН
//	|	И Контрагенты.КПП = &КПП";
//	Запрос.УстановитьПараметр("ИНН", ИскомыйИНН);
//	Запрос.УстановитьПараметр("КПП", ИскомыйКПП);
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Если Выборка.Следующий() тогда
//		Возврат Выборка.Ссылка;
//	Иначе
//		
//		РеквизитыКонтрагента = ДанныеЕдиныхГосРеестровПоИНН(ИскомыйИНН, ЮрФизЛицо = ПеречислениеСсылкаЮридическоеФизическоеЛицо.ЮридическоеЛицо);
//		//Создадим нового контрагента
//		КонтрагентОбъект = СправочникСсылкаКонтрагенты.СоздатьЭлемент();
//		КонтрагентОбъект.ЮридическоеФизическоеЛицо 	= ЮрФизЛицо;
//		КонтрагентОбъект.ИНН 						= ИскомыйИНН;
//		КонтрагентОбъект.КПП 						= ИскомыйКПП;
//		
//		Если РеквизитыКонтрагента.Свойство("ОписаниеОшибки") и ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
//			
//			КонтрагентОбъект.НаименованиеПолное 		= ИмяКонтраКМ;
//			КонтрагентОбъект.РегистрационныйНомер 		= ОГРН;
//			
//		Иначе
//			ЗаполнитьРеквизитыКонтрагента(КонтрагентОбъект, РеквизитыКонтрагента, ЮрФизЛицо = ПеречислениеСсылкаЮридическоеФизическоеЛицо.ЮридическоеЛицо);
//		КонецЕсли;
//		
//		КонтрагентОбъект.Наименование 				= ИмяКонтраКМ;//Наименование контрагента берём всегда из Каргомарта.
//		
//		КонтрагентОбъект = КМ_ОбщийМодульПовтИсп.МодульЯдро().ОпределитьКонтрагента(КонтрагентОбъект);
//				
//		Попытка
//			
//			КонтрагентОбъект.Записать();
//			
//			МЗап = РегистрСведенийСсылкаДополнительныеСведения.СоздатьМенеджерЗаписи();
//			МЗап.Объект 	= КонтрагентОбъект.Ссылка;
//			МЗап.Свойство 	= КМ_ОбщийМодульПовтИсп.РеквизитИдентификаторКаргомарт();
//			МЗап.Значение 	= ИДКонтрагента;
//			МЗап.Записать();
//			
//		Исключение
//			
//			ИО = ИнформацияОбОшибке();
//			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИО);
//			
//			ТекстОшибки = "Ошибка записи нового элемента справочника ""Контрагенты"":
//			|─────────────────────────────────────────────────────────────────────────
//			|	Наименование:	" + ИмяКонтраКМ + "
//			|	ИНН:			" + ИскомыйИНН + "
//			|	КПП:			" + ИскомыйКПП + "
//			|	ОГРН:			" + ОГРН + "
//			|─────────────────────────────────────────────────────────────────────────
//			|Подробное представление ошибки:
//			|	" + СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ) + "
//			|─────────────────────────────────────────────────────────────────────────" + Символы.ПС;
//			
//			КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( ИО, "Каргомарт.ПолучениеЗаказа.ЗаписьКонтрагентаВ_БД", ПротоколОшибок, ТекстОшибки, Ложь);
//			
//			Возврат Неопределено;
//			
//		КонецПопытки;
//		
//		Возврат КонтрагентОбъект.Ссылка;
//		
//	КонецЕсли;
//	
//КонецФункции

Функция ОпределитьДатыПогрузкиРазгрузки_v2(ДанныеЗаказа)
	
	Попытка
			ДатаПогрузки = Дата(СтрЗаменить(ДанныеЗаказа.route[0].fromDate, "-", "") + ?(ДанныеЗаказа.route[0].Свойство("fromTime"), СтрЗаменить(ДанныеЗаказа.route[0].fromTime, ":", ""), ""));
	Исключение
			ДатаПогрузки 	=  '00010101';
	КонецПопытки;
	
	ПТ = ДанныеЗаказа.route.Количество()-1;
	
	Попытка
			ДатаРазгрузки = Дата(СтрЗаменить(ДанныеЗаказа.route[ПТ].fromDate, "-", "") + ?(ДанныеЗаказа.route[ПТ].Свойство("fromTime"), СтрЗаменить(ДанныеЗаказа.route[ПТ].fromTime, ":", ""), ""));
	Исключение
			ДатаРазгрузки 	=  '00010101';
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаРазгрузки", ДатаРазгрузки);
	Результат.Вставить("ДатаПогрузки", 	ДатаПогрузки);
	
	Возврат Результат;
	
КонецФункции

//Функция проверки формата полученных данных.
//Для данных, полученных в JSON-формате, преобразованных через "ПрочитатьJSON()" 
//Внимание: функция рекурсивная.
//
//Параметры:
//	ПолученныеДанные 	- Структура - будет рекурсивное сравнение элементов структуры по ключам
//						- Массив - будет рекурсивное сравнение элементов массива с первым элементом массива-шаблона
//						- ПримитивныйТип - будет сравнение по типу с шаблоном.
//	ШаблонДанных 		- // -
//	ГлубинаРекурсии - Число - Необязательный, для определения глубины рекурсии и форматирования табуляцией описания ошибки.
//Возвращаемое значение:
//	Структура:
//	* КодОшибки - Число - 0 в положительном случае
//	* Описание - Строка
Функция ПроверитьСоответствиеПолученныхДанныхШаблону(ПолученныеДанные, ШаблонДанных, ГлубинаРекурсии = 0)
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки", 0);
	Результат.Вставить("Описание", 	"");
	
	Табуляция = "";
	
	Для Итр = 1 по ГлубинаРекурсии Цикл
		Табуляция = Табуляция + Символы.Таб;
	КонецЦикла;
	
	Если ТипЗнч(ШаблонДанных) <> ТипЗнч(ПолученныеДанные) Тогда
		
		Результат.КодОшибки = 19;
		Результат.Описание = Результат.Описание + ?(Результат.Описание = "", "", Символы.ПС) + Табуляция + КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки);
		Возврат Результат;
				
	ИначеЕсли ТипЗнч(ШаблонДанных) = Тип("Массив") И ШаблонДанных[0] <> Неопределено Тогда
		Для Каждого ЭлементДанных из ПолученныеДанные Цикл
			
			РезультатПроверкиЭлемента = ПроверитьСоответствиеПолученныхДанныхШаблону(ЭлементДанных, ШаблонДанных[0], ГлубинаРекурсии + 1);
			
			Если РезультатПроверкиЭлемента.КодОшибки <> 0 Тогда
				
				Результат.Описание = Результат.Описание + ?(Результат.Описание = "", "", Символы.ПС) + Табуляция + "Элемент массива не прошел проверку формата:" + Символы.ПС + РезультатПроверкиЭлемента.Описание;
				Результат.КодОшибки = РезультатПроверкиЭлемента.КодОшибки;
				Возврат Результат;
				
			КонецЕсли;
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(ШаблонДанных) = Тип("Структура") Тогда
		
		ПДЗначение = Неопределено;
		
		Для Каждого КлючИЗначение из ШаблонДанных Цикл
			Если ПолученныеДанные.Свойство(КлючИЗначение.Ключ, ПДЗначение) = Ложь Тогда
				
				Результат.КодОшибки = 20;
				Результат.Описание = Результат.Описание + ?(Результат.Описание = "", "", Символы.ПС) + Табуляция + КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки, КлючИЗначение.Ключ);
				
			ИначеЕсли КлючИЗначение.Значение <> Неопределено Тогда
				
				РезультатПроверкиЭлемента = ПроверитьСоответствиеПолученныхДанныхШаблону(ПДЗначение, КлючИЗначение.Значение, ГлубинаРекурсии + 1);
				
				Если РезультатПроверкиЭлемента.КодОшибки <> 0 Тогда
					
					Результат.КодОшибки = РезультатПроверкиЭлемента.КодОшибки;
					Результат.Описание 	= Результат.Описание + ?(Результат.Описание = "", "", Символы.ПС) + Табуляция + "Поле """ + КлючИЗначение.Ключ + """, не прошло проверку формата:" + Символы.ПС + РезультатПроверкиЭлемента.Описание;
					Возврат Результат;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонПроверкиДанныхPriceItem()
	
	Результат = Новый Структура;
	
	Результат.Вставить("currencyCode", "");
	Результат.Вставить("total", 	"");//Цена с НДС
	Результат.Вставить("vat", 		"");//Сумма НДС
	Результат.Вставить("vatRate", 	"");//Ставка НДС
	Результат.Вставить("value", 	"");//Цена без НДС
	
	Возврат Результат;
	
КонецФункции

//Функция получения номера последнего обработанного запроса.
//У данных, получаемых из Каргомарта, имеется значение номера изменения, по которому можно фильтровать получаемые данные.
//Если указывать номер последнего запроса при получении данных, то получаются только те данные, которые изменились с момента 
//последнего обработанного запроса.
//
//Параметры:
//	Организация 	- СправочникСсылка.Организации - Организация, для которой нужно получить номер последнего обработанного запроса.
//	Протокол 	- Строка - ["Протокол_v1", "Протокол_v2"], Протокол, для которого нужно получить номер последнего обработанного запроса.
//Возвращаемое значение:
//	Число - Номер последнего запроса.
Функция ПолучитьНомерПоследнегоЗапросаКаргомарт(Организация) Экспорт
	
	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект = &Организация
	               |	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Свойство",		КМ_ОбщийМодульПовтИсп.РеквизитНомерПоследнегоЗапросаКаргомарт());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() И ТипЗнч(Выборка.Значение) = Тип("Число") Тогда
		Результат = Выборка.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовПунктаПогрузкиВыгрузки(ПунктСсылка)
	
	СтруктураПункты = Новый Структура();
	
	Если ПунктСсылка.ИД > 0 Тогда
		СтруктураПункты.Вставить("id", ПунктСсылка.cargomartId);
	КонецЕсли;
	
	//КонтактнаяИнформацияПункта = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(ПунктСсылка, )
	
	СтруктураПункты.Вставить("title", ПунктСсылка.Наименование);
	СтруктураПункты.Вставить("code", ПунктСсылка.КодКЛАДР);
	СтруктураПункты.Вставить("localityName", ПунктСсылка.НаселенныйПункт);
	
	СтруктураПункты.Вставить("address", ПунктСсылка.Улица);
	// Возвращаемое значение:
	//    Структура - результат:
	//        * Объект        - Ссылка - владелец КИ.
	//        * Вид           - СправочникСсылка.ВидыКонтактнойИнформации
	//        * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации
	//        * ЗначенияПолей - Строка - данные значений полей XML.
	//        * Значение      - Строка - данные значений полей JSON.
	//        * Представление - Строка - представление КИ.
	
	
	СтруктураПункты.Вставить("house", ПунктСсылка.Дом);
	СтруктураПункты.Вставить("comment", ПунктСсылка.Комментарий);
	СтруктураПункты.Вставить("latitude", ПунктСсылка.Широта);
	СтруктураПункты.Вставить("longitude", ПунктСсылка.Долгота);
	
	Если ПунктСсылка.ПрикрепленныеФайлы.Количество() > 0 Тогда
		
		МассивFileId = Новый Массив;
		Для каждого Строка Из ПунктСсылка.ПрикрепленныеФайлы Цикл
			МассивFileId.Добавить(Формат(Строка.cargomartId, "ЧГ=0"));
		КонецЦикла;
		СтруктураПункты.Вставить("fileIds", МассивFileId);
		
	КонецЕсли;
	
	Если ПунктСсылка.КонтактноеЛицоCargomartId > 0 Тогда
		
		СтруктураКонтакт = Новый Структура;
		СтруктураКонтакт.Вставить("id", ПунктСсылка.КонтактноеЛицоCargomartId);
		СтруктураКонтакт.Вставить("name", ПунктСсылка.КонтактноеЛицо);
		СтруктураКонтакт.Вставить("phone", ПунктСсылка.КонтактноеЛицоТелефон);
		СтруктураКонтакт.Вставить("ext", ПунктСсылка.КонтактноеЛицоТелефонДобавочный);
		
		СтруктураПункты.Вставить("contact", СтруктураКонтакт);
		
	КонецЕсли;
	
	Если ПунктСсылка.КонтрагентТип > 0 И ЗначениеЗаполнено(ПунктСсылка.КонтрагентНаименование) Тогда
		
		СтруктураПункты.Вставить("legalStatus", ПунктСсылка.КонтрагентТип);
		СтруктураПункты.Вставить("legalName", ПунктСсылка.КонтрагентНаименование);
		
	КонецЕсли;
	
	Возврат СтруктураПункты;
	
КонецФункции
	
Функция ДанныеСотрудникаРазличаются(Строка)
	
	Если Строка.Фамилия <> ?(Строка.ДанныеКМ.Свойство("lastName"), Строка.ДанныеКМ.lastName, "") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Строка.Имя <> ?(Строка.ДанныеКМ.Свойство("firstName"), Строка.ДанныеКМ.firstName, "") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Строка.Отчество <> ?(Строка.ДанныеКМ.Свойство("secondName"), Строка.ДанныеКМ.secondName, "") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Строка.Должность <> ?(Строка.ДанныеКМ.Свойство("position"), Строка.ДанныеКМ.position, "") Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если Строка.Роль <> ?(Строка.ДанныеКМ.Свойство("roleId"), Строка.ДанныеКМ.roleId, 0) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТелефонБД = ДанныеТелефонаИзПолейКонтактнойИнформации(Строка.Телефон, Строка.ТелефонJSON, Строка.ТелефонXML);
	
	Если ТелефонБД.Телефон <> ?(Строка.ДанныеКМ.Свойство("phone"), Строка.ДанныеКМ.phone, "") Тогда
		Возврат Истина;
	КонецЕсли;
	
	КонтактныйТелефонБД = ДанныеТелефонаИзПолейКонтактнойИнформации(Строка.КонтактныйТелефон, Строка.КонтактныйТелефонJSON, Строка.КонтактныйТелефонXML);
	
	Если КонтактныйТелефонБД.Телефон <> ?(Строка.ДанныеКМ.Свойство("contactPhone"), Строка.ДанныеКМ.contactPhone, "")
		ИЛИ КонтактныйТелефонБД.ТелефонДоп <> ?(Строка.ДанныеКМ.Свойство("contactPhoneExt"), Строка.ДанныеКМ.contactPhoneExt, "") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Строка(Строка.EMail) <> ?(Строка.ДанныеКМ.Свойство("email"), Строка.ДанныеКМ.email, "") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Строка(Строка.КонтактныйEMail) <> ?(Строка.ДанныеКМ.Свойство("contactEmail"), Строка.ДанныеКМ.contactEmail, "") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Строка.СтатусКонтактногоEMail <> ?(Строка.ДанныеКМ.Свойство("contactEmailStatus"), Строка.ДанныеКМ.contactEmailStatus, "") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВыгрузитьСотрудникаВКаргомарт(СоединениеHTTP, Токен, СтрокаКВыгрузке, Организация, Результат)
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("roleId", СтрокаКВыгрузке.Роль);
	
	Если ЗначениеЗаполнено(СтрокаКВыгрузке.EMail) Тогда
		ДанныеЗапроса.Вставить("email", СтрокаКВыгрузке.EMail);
	КонецЕсли;
	
	НаименованиеСотрудника = "";
	
	Если ЗначениеЗаполнено(СтрокаКВыгрузке.Фамилия) Тогда
		ДанныеЗапроса.Вставить("lastName", СтрокаКВыгрузке.Фамилия);
		НаименованиеСотрудника = НаименованиеСотрудника + СтрокаКВыгрузке.Фамилия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаКВыгрузке.Имя) Тогда
		
		ДанныеЗапроса.Вставить("firstName", СтрокаКВыгрузке.Имя);
		НаименованиеСотрудника = НаименованиеСотрудника + ?(НаименованиеСотрудника = "", "", " ") 
			+ СтрокаКВыгрузке.Имя;
			 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаКВыгрузке.Отчество) Тогда
		
		ДанныеЗапроса.Вставить("secondName", СтрокаКВыгрузке.Отчество);
		НаименованиеСотрудника = НаименованиеСотрудника + ?(НаименованиеСотрудника = "", "", " ") 
			+ СтрокаКВыгрузке.Отчество;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаКВыгрузке.Должность) Тогда
		ДанныеЗапроса.Вставить("position", СтрокаКВыгрузке.Должность);
	КонецЕсли;
	
	ТелефонБД 	= ДанныеТелефонаИзПолейКонтактнойИнформации(СтрокаКВыгрузке.Телефон, 
		СтрокаКВыгрузке.ТелефонJSON, 
		СтрокаКВыгрузке.ТелефонXML);
	
	Если ЗначениеЗаполнено(ТелефонБД.Телефон) Тогда
		ДанныеЗапроса.Вставить("phone", ТелефонБД.Телефон);
	КонецЕсли;
		
	КонтактныйТелефонБД 	= ДанныеТелефонаИзПолейКонтактнойИнформации(СтрокаКВыгрузке.КонтактныйТелефон, 
		СтрокаКВыгрузке.КонтактныйТелефонJSON, 
		СтрокаКВыгрузке.КонтактныйТелефонXML);
	
	Если ЗначениеЗаполнено(КонтактныйТелефонБД.Телефон) Тогда
		ДанныеЗапроса.Вставить("contactPhone", КонтактныйТелефонБД.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактныйТелефонБД.ТелефонДоп) Тогда
		ДанныеЗапроса.Вставить("contactPhoneExt", КонтактныйТелефонБД.ТелефонДоп);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаКВыгрузке.КонтактныйEMail) Тогда
		ДанныеЗапроса.Вставить("contactEmail", СтрокаКВыгрузке.КонтактныйEMail);
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", 	"application/json");
	Заголовки.Вставить("Accept", 		"application/json"); 
	Заголовки.Вставить("Authorization",	Токен);
	
	СтрокаЗапроса = "/api/v2/worker" + ?(ЗначениеЗаполнено(СтрокаКВыгрузке.КаргомартИД) ,"/" + Формат(СтрокаКВыгрузке.КаргомартИД, "ЧГ="), "");
	
	ЗапросHTTP_ЗаписьСотрудника 				= Новый HTTPЗапрос(СокрЛП(СтрокаЗапроса));
	ЗапросHTTP_ЗаписьСотрудника.Заголовки 		= Заголовки;
	ЗапросHTTP_ЗаписьСотрудника.УстановитьТелоИзСтроки(КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(ДанныеЗапроса), 
		КодировкаТекста.UTF8, 
		ИспользованиеByteOrderMark.НеИспользовать);
	
	Результат.Лог = Результат.Лог + "Отправляю данные о сотруднике """ + НаименованиеСотрудника + """ в Каргомарт...
		|";
	
	Попытка
		
		Если ЗначениеЗаполнено(СтрокаКВыгрузке.КаргомартИД) Тогда
			ОтветHTTP = СоединениеHTTP.Записать(ЗапросHTTP_ЗаписьСотрудника);
		Иначе
			ОтветHTTP = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP_ЗаписьСотрудника);
		КонецЕсли;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
		
		Результат.КодОшибки = 3;
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			СтрокаЗапроса,
			СоединениеHTTP.Порт,
			Токен,
			СтрЗаменить( ПодробноеПредставлениеОшибки, Символы.ПС, Символы.ПС + Символы.Таб ));
		
		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок( Инфо, "Каргомарт.ОтправкаДанныхОСотруднике.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь);
		
	КонецПопытки;
	
	СтрокаОтвет = ОтветHTTP.ПолучитьТелоКакСтроку();
		
	Если ОтветHTTP.КодСостояния <> 200
		И ОтветHTTP.КодСостояния <> 201 Тогда
		
		СтрокаОтвет = ?(ЗначениеЗаполнено(СтрокаОтвет), Символы.ПС + "Сообщение от сервера: " + Символы.ПС, "")+ СтрокаОтвет;
		
		Результат.КодОшибки = 3;
		ТекстОшибки = КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки,
			СоединениеHTTP.Сервер,
			СтрокаЗапроса,
			СоединениеHTTP.Порт,
			Токен,
		"Код HTTP-ответа:" + ОтветHTTP.КодСостояния + СтрокаОтвет);
		
		КМ_ОбщийМодульВызовСервера.ОбработкаОшибок(, "Каргомарт.ОтправкаРезультатаПроверкиОригиналовПоЗаказу.ОбращениеК_HTTP_Сервису", Результат.Лог, ТекстОшибки, Ложь);
		
	Иначе
		
		Результат.Лог = Результат.Лог + "Данные отправлены успешно.
			|";
		Если НЕ ЗначениеЗаполнено(СтрокаКВыгрузке.КаргомартИД) Тогда
			
			СтруктураОтвет = КМ_ОбщийМодульКлиентСервер.ЗначениеИзJSON(СтрокаОтвет);
			
			Если СтруктураОтвет.Свойство("data") 
				И СтруктураОтвет.data.Свойство("worker") 
				И СтруктураОтвет.data.worker.Свойство("id") Тогда
				
				СтрокаКВыгрузке.ДанныеКМ = СтруктураОтвет.СтруктураОтвет.data.worker;
				СтрокаКВыгрузке.КаргомартИД = СтруктураОтвет.СтруктураОтвет.data.worker.id;
				СохранитьОбновитьСотрудникаВ_БД(Организация, СтрокаКВыгрузке, Результат);
				
			КонецЕсли;
			 
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьОбновитьСотрудникаВ_БД(Организация, СтрокаКВыгрузке, Результат)
	
	СправочникВидыКонтактнойИнформации 	= КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Справочники_ВидыКонтактнойИнформации");
	
	СправочникСсылкаФизическиеЛица 		= КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("Справочники_ФизическиеЛица");
	
	Если ЗначениеЗаполнено(СтрокаКВыгрузке.Ссылка) Тогда
		СпрОбъект = СтрокаКВыгрузке.Ссылка.ПолучитьОбъект();
	Иначе
		
		СпрОбъект = Справочники.КМ_Сотрудники.СоздатьЭлемент();
		СпрОбъект.УстановитьНовыйКод();
		
	КонецЕсли;
	
	СпрОбъект.КаргомартИД 				= СтрокаКВыгрузке.КаргомартИД;
	СпрОбъект.Владелец 					= Организация;
	СпрОбъект.Должность 				= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("position"), 
		СтрокаКВыгрузке.ДанныеКМ.position, 
		"");
	СпрОбъект.Роль 						= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("roleId"), 
		СтрокаКВыгрузке.ДанныеКМ.roleId, 
		0);
	СпрОбъект.СтатусКонтактногоEMail 	= ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("contactEmailStatus"), 
		СтрокаКВыгрузке.ДанныеКМ.contactEmailStatus, 
		"");
	СпрОбъект.ДетальнаяИнформация 		= КМ_ОбщийМодульКлиентСервер.ЗначениеВJSON(СтрокаКВыгрузке.ДанныеКМ);
	
	Если ЗначениеЗаполнено(СпрОбъект.ФизическоеЛицо) Тогда
		
		ФЛОбъект = СправочникСсылкаФизическиеЛица.ПолучитьСсылку(СпрОбъект.ФизическоеЛицо).ПолучитьОбъект();
		
		Если Результат = Неопределено Тогда
			ФЛОбъект =  СправочникСсылкаФизическиеЛица.СоздатьЭлемент();
		КонецЕсли;
		
	Иначе
		ФЛОбъект =  СправочникСсылкаФизическиеЛица.СоздатьЭлемент();
	КонецЕсли;
	
	ФИО = ?(СтрокаКВыгрузке.ДанныеКМ.Свойство("lastName"), 
		СтрокаКВыгрузке.ДанныеКМ.lastName, 
		"") + " " + 
		?(СтрокаКВыгрузке.ДанныеКМ.Свойство("firstName"), 
		СтрокаКВыгрузке.ДанныеКМ.firstName, 
		"") + " " + 
		?(СтрокаКВыгрузке.ДанныеКМ.Свойство("secondName"), 
		СтрокаКВыгрузке.ДанныеКМ.secondName, 
		"");
	
	ФЛОбъект = КМ_ОбщийМодульПовтИсп.МодульЯдро().СотрудникиПриСоздании(ФЛОбъект, ФИО);
	
	ФЛОбъект.ДополнительныеСвойства.Вставить("ФИОУстановлены", Истина);
	
	СпрОбъект.Наименование = ФЛОбъект.Наименование;
	
	//////////////////
	//****** Заполнение поля E-Mail ******
	ЗначениеEMail = Неопределено; 
	СтрокаКВыгрузке.ДанныеКМ.Свойство("email", ЗначениеEMail);
	ЗаполнитьСтрокуКонтактнойИнформацииEMail(ФЛОбъект.КонтактнаяИнформация, 
		СправочникВидыКонтактнойИнформации.EMailФизическиеЛица,
		ЗначениеEMail);
	//************************************
	
	//****** Заполнение поля Контактный E-Mail ******
	ЗначениеEMail = Неопределено; 
	СтрокаКВыгрузке.ДанныеКМ.Свойство("contactEmail", ЗначениеEMail);
	ЗаполнитьСтрокуКонтактнойИнформацииEMail(ФЛОбъект.КонтактнаяИнформация, 
		КМ_ОбщийМодульПовтИсп.ВКИКонтактныйEMail(),
		ЗначениеEMail);
	//***********************************************
	
	//****** Заполнение поля Телефон ******
	ЗначениеТелефон = Неопределено; 
	СтрокаКВыгрузке.ДанныеКМ.Свойство("phone", ЗначениеТелефон);
	ЗаполнитьСтрокуКонтактнойИнформацииТелефон(ФЛОбъект.КонтактнаяИнформация, 
		СправочникВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица,
		ЗначениеТелефон);
	//*************************************
	
	//****** Заполнение поля Контактный Телефон ******
	ЗначениеТелефон 	= Неопределено; 
	ЗначениеТелефонДоп 	= Неопределено;
	СтрокаКВыгрузке.ДанныеКМ.Свойство("contactPhone", ЗначениеТелефон);
	СтрокаКВыгрузке.ДанныеКМ.Свойство("contactPhoneExt", ЗначениеТелефонДоп);
	ЗаполнитьСтрокуКонтактнойИнформацииТелефон(ФЛОбъект.КонтактнаяИнформация, 
		СправочникВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,
		ЗначениеТелефон, ЗначениеТелефонДоп);
	//************************************************
	
	Результат.Лог = Результат.Лог + "Записываю данные сотрудника """ + СпрОбъект.Наименование + """ в БД...
		|";
	
	Попытка
		
		НачатьТранзакцию();
		
		ФЛОбъект.Записать();
		СпрОбъект.ФизическоеЛицо = ФЛОбъект.Ссылка.УникальныйИдентификатор();
		СпрОбъект.ОбменДанными.Загрузка = Истина;//Во избежание регистрации на узле обмена.
		СпрОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Результат.Лог = Результат.Лог + "Запись завершена успешно.
			|";
	
	Исключение
		
		Инфо 			= ИнформацияОбОшибке();
		ИнфоДетальная 	= ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
		ОтменитьТранзакцию();
		Результат.КодОшибки 	= 14;
		Результат.Описание 		= КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(Результат.КодОшибки) + Символы.ПС
			+ ИнфоДетальная;
		Результат.Лог 			= Результат.Лог + Результат.Описание + Символы.ПС;
		 
	КонецПопытки;
	
КонецПроцедуры

Функция НайтиГАРыВАдресномКлассификаторе(ГАРы)
			
		ЗапросГАР = Новый Запрос;
		ЗапросГАР.Текст = 		
			"ВЫБРАТЬ
			|	Пункты.ИД,
			|	Пункты.КЛАДР,
			|	Пункты.ГАР
			|ПОМЕСТИТЬ ВТ_Пункты
			|ИЗ
			|	&ВхТаблица КАК Пункты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пункты.ИД,
			|	ВЫБОР
			|		КОГДА АдресныеОбъекты.Идентификатор ЕСТЬ NULL
			|			ТОГДА """"
			|		ИНАЧЕ АдресныеОбъекты.Идентификатор
			|	КОНЕЦ КАК ГАР,
			|	Пункты.КЛАДР
			|ИЗ
			|	ВТ_Пункты КАК Пункты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
			|		ПО Пункты.КЛАДР = АдресныеОбъекты.КодКЛАДР
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Пункты";
			
		ЗапросГАР.УстановитьПараметр("ВхТаблица", ГАРы);
		
		Возврат ЗапросГАР.Выполнить().Выгрузить();
		 
КонецФункции
#КонецОбласти




