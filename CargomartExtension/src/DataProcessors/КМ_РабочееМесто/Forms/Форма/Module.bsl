
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбщийКэш;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область Кэширование
// {	КЭШИРОВАНИЕ

// Возвращает значение из общего кэша
//
// Параметры:
//  Ключ - Строка - см. процедуру Кэш_Поместить
//
// Возвращаемое значение: 
//   Произвольный
//
&НаКлиенте
Функция Кэш_Прочитать(Ключ) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ОбщийКэш) Тогда
		Результат = ОбщийКэш.Получить(Ключ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Помещает значение в общий для кэш
//
// Параметры:
//  Ключ     - Строка       - уникальный ключ помещаемого значения;
//  Значение - Произвольный - помещаемое значение;
//
&НаКлиенте
Процедура Кэш_Поместить(Ключ, Значение) Экспорт
	
	Если ОбщийКэш = Неопределено Тогда
		ОбщийКэш = Новый Соответствие;
	КонецЕсли;
	
	ОбщийКэш.Вставить(Ключ, Значение);
	
КонецПроцедуры

// Очищает все вложенные в общий кэш коллекции
// с помощью метода Очистить()
//
&НаКлиенте
Процедура ОчиститьКэшНаКлиенте()
	
	Если Не ЗначениеЗаполнено(ОбщийКэш) Тогда
		Возврат;
	КонецЕсли;
	
	ТипыКоллекций = Новый Соответствие;
	ТипыКоллекций.Вставить(Тип("Массив")		, Истина);
	ТипыКоллекций.Вставить(Тип("Структура")		, Истина);
	ТипыКоллекций.Вставить(Тип("Соответствие")	, Истина);
	ТипыКоллекций.Вставить(Тип("СписокЗначений"), Истина);
	
	Для Каждого КлючИЗначение Из ОбщийКэш Цикл
		
		ТипЗначения = ТипЗнч(КлючИЗначение.Значение);
		
		Если ТипыКоллекций[ТипЗначения] = Истина Тогда
			КлючИЗначение.Значение.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщийКэш.Очистить();
	
КонецПроцедуры

// }	КЭШИРОВАНИЕ
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОчиститьКэшНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		КМ_ОбщийМодульПовтИсп.МодульЯдро().СформироватьФормуРабочееМесто(ЭтотОбъект);
		
		ОрганизацияЗаказчик = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		
		ТекстЗапроса = КМ_ОбщийМодульПовтИсп.МодульЯдро().РабочееМестоТекстЗапросаДС();
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("Организация", 	ОрганизацияЗаказчик);
		ПараметрыЗапроса.Вставить("ДатаНач", 		?(ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, '00010101'));
		ПараметрыЗапроса.Вставить("ДатаКон", 		?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), '21000101'));
		ПараметрыЗапроса.Вставить("Пункт1", 		Откуда);
		ПараметрыЗапроса.Вставить("Пункт2", 		Куда);
	
	Период.ДатаНачала 		= НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -6));
	
	Период.ДатаОкончания 	= ТекущаяДата();
	
	//Формирование динамического списка ++
	ВысотаТаблицы = КМ_ОбщийМодульДФИ.СтруктураСвойствТаблицыФормы(,,,,,,,4);
	
	ГруппаЗаявки = Элементы.Заявки;
	
	стрКолонок = Новый Структура;
	стрКолонок.Вставить("Номер", 		"Номер");
	стрКолонок.Вставить("СтавкаНДС", 	"Ставка НДС");
	стрКолонок.Вставить("СуммаСНДС", 	"Сумма с НДС");
	
	НовыйЭлемент = КМ_ОбщийМодульДФИ.СздДинамическийСписок(ЭтотОбъект, "ЗаказыКаргомарт", ГруппаЗаявки, ТекстЗапроса, ПараметрыЗапроса,, стрКолонок,,,,);
	
	КМ_ОбщийМодульДФИ.УстановитьСвойстваЭлементу(НовыйЭлемент,ВысотаТаблицы);
	//Формирование динамического списка --
	
	ЗаполнитьПараметрыДС();
	
	ОбновитьОтборы();
	
	Если Справочники.Организации.КоличествоОрганизаций() = 1 Тогда
		
		Элементы.ОрганизацияЗаказчик.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ЭтотОбъект.ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("Организация", 	ОрганизацияЗаказчик);
	ЭтотОбъект.ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("ДатаНач", 		?(ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, '00010101'));
	ЭтотОбъект.ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("ДатаКон", 		?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), '21000101'));
		
	Элементы.ЗаказыКаргомарт.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткудаПриИзменении(Элемент)
	
	ЗаполнитьПараметрыДС();
	ОбновитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура КудаПриИзменении(Элемент)
	
	ЗаполнитьПараметрыДС();
	ОбновитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОП = Новый ОписаниеОповещения("ВопросОрганизацияПриИзмененииЗавершение", ЭтотОбъект, Неопределено);
	ПоказатьВопрос(ОП, "Перечитать настройки, сохранённые для выбранной организации?",РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерЗаявкиПриИзменении(Элемент)
	ОбновитьОтборы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СинхронизироватьСправочникПунктыПогрузки(Команда)
	СинхронизироватьСправочникПунктыПогрузкиНаСервере(ОрганизацияДляОбмена, ПриоритетБД);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСправочникСотрудники(Команда)
	СинхронизироватьСправочникСотрудникиНаСервере(ОрганизацияДляОбмена, ПриоритетБД);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКаргомартОбновить(Команда)
	
	НастройкиКаргомарт = Кэш_Прочитать("НастройкиКаргомарт" + Строка(ОрганизацияЗаказчик));
	
	Если НастройкиКаргомарт = Неопределено Тогда
	
		НастройкиКаргомарт = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьНастройкиКаргоМарт(ОрганизацияЗаказчик);
		
		Если НЕ ЗначениеЗаполнено(НастройкиКаргомарт) Тогда
		
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не найдено сохранённых настроек.", Объект);
			Возврат;
		
		КонецЕсли;
		
		Кэш_Поместить("НастройкиКаргомарт" + Строка(ОрганизацияЗаказчик), НастройкиКаргомарт);
		
	КонецЕсли;
	
	ТестПодключения = ТестироватьПодключение(ОрганизацияЗаказчик);
	
	Если ТипЗнч(ТестПодключения) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПолученыеЗаказыКаргомарт = ОбновитьЗаказыКаргомартНаСервере(ОрганизацияЗаказчик, Период.ДатаНачала);
	
	Если ПолученыеЗаказыКаргомарт.КодОшибки = 0 И Найти(ПолученыеЗаказыКаргомарт.Лог, "Не удалось") = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Обновление заказа с сервера Каргомарт прошло успешно");
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Код ошибки: " + ПолученыеЗаказыКаргомарт.КодОшибки + Символы.ПС + "Подробнее:" + Символы.ПС + ПолученыеЗаказыКаргомарт.Лог);
	КонецЕсли;
	
	Элементы.ЗаказыКаргомарт.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеНаКаргомарт(Команда)
	ВыгрузитьДанныеНаКаргомартНаСервере(ОрганизацияДляОбмена);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКаргомартСоздать(Команда)

	СтруктураПараметров 	= Новый Структура;
//	СтруктураПараметров.Вставить("НомерЗаказаКаргомарт", 	Элемент.ТекущиеДанные.НомерЗаказаКаргомарт);
//	СтруктураПараметров.Вставить("Организация", 			Объект.Организация);
//	СтруктураПараметров.Вставить("РежимРаботы", 			РежимРаботы);
//	СтруктураПараметров.Вставить("Протокол", 				Протокол);
//	СтруктураПараметров.Вставить("ПапкаСкриптовJS", 		Объект.ПапкаСкриптовJS);	
	
	КлючУникальностиФормы = Неопределено;//?(РежимРаботы = 0, "Проверка сканов", "Проверка оригиналов");
	
	ДополнительныеПараметры = Неопределено;
	
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОЗакрытииФормыОбработкиЗаказа", ЭтотОбъект, ДополнительныеПараметры);
	
	УжеОткрытаяФорма = ПолучитьФорму("Обработка.КМ_РабочееМесто.Форма.СоздатьЗаказ",СтруктураПараметров, ЭтотОбъект, КлючУникальностиФормы);
	
	Если УжеОткрытаяФорма <> Неопределено И УжеОткрытаяФорма.Открыта() Тогда
		УжеОткрытаяФорма.Закрыть();
	КонецЕсли;
	
	//СтруктураПараметров.Вставить("ОбновлениеЗаказа", 		ОбновлениеЗаказа);
		
	ОткрытьФорму("Обработка.КМ_РабочееМесто.Форма.СоздатьЗаказ", СтруктураПараметров, ЭтотОбъект, КлючУникальностиФормы,,, ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиКаргомарт(Команда)
	ЗаписатьНастройкиКаргомартНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТестированиеПодключения(Команда)
	
	Результат = ТестироватьПодключение(Организация);
	
	Если Результат.КодОшибки = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Подключение и авторизация прошла успешно. Токен: " + Строка(Результат.Токен));
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.Лог);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТокен(Команда)
	УдалитьТокенНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СинхронизироватьСправочникПунктыПогрузкиНаСервере(Организация, ПриоритетБД)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Результат = КМ_ОбщийМодульСервер.СинхронизацияСправочникКМ_ПунктыПогрузкиВыгрузки(Организация, ПриоритетБД);
	
	ОбщегоНазначения.СообщитьПользователю(Результат.Лог);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СинхронизироватьСправочникСотрудникиНаСервере(Организация, ПриоритетБД)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Результат = КМ_ОбщийМодульСервер.СинхронизироватьСправочникКМ_Сотрудники(Организация, ПриоритетБД);
	
	ОбщегоНазначения.СообщитьПользователю(Результат.Лог);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТокенНаСервере()
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Результат = КМ_ОбщийМодульСервер.УдалитьТокенАвторизацииКаргомарт(Организация);
		ОбщегоНазначения.СообщитьПользователю(Результат.Лог);
		
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю("Не выбрана организация.");
		ТекущийЭлемент = Элементы.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыгрузитьДанныеНаКаргомартНаСервере(Организация = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Результат = КМ_ОбщийМодульВызовСервера.ВыгрузитьДанныеВКаргомарт(Организация);
	
	ОбщегоНазначения.СообщитьПользователю(Результат.Лог);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОрганизацияПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПрочитатьНастройкиКаргомартНаСервере(Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиКаргомартНаСервере(Организация)
	
	//ОбработкаОбъект = ПолучитьИзВременногоХранилища(Объект.ОбщийКонтекстКлиентСервер);
	
	Результат = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьНастройкиКаргомарт(Организация);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		ОбщегоНазначения.СообщитьПользователю("Не найдено сохранённых настроек.");
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьНастройкиИзСтруктуры(Результат);
	
	НомерПоследнегоЗапросаКаргомарт = КМ_ОбщийМодульСервер.ПолучитьНомерПоследнегоЗапросаКаргомарт(Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиКаргомартНаСервере()
	
	РегистрСведенийСсылкаДополнительныеСведения = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьСсылкиНаОбъектыКонфигурации("РегистрыСведений_ДополнительныеСведения");
	
	СтруктураНастройки = ОсновныеНастройкиВСтруктуру();
	
	МЗап = РегистрСведенийСсылкаДополнительныеСведения.СоздатьМенеджерЗаписи();
	МЗап.Объект 	= Организация;
	МЗап.Свойство 	= КМ_ОбщийМодульПовтИсп.РеквизитНомерПоследнегоЗапросаКаргомарт();
	МЗап.Значение 	= НомерПоследнегоЗапросаКаргомарт;
	
	Результат = КМ_ОбщийМодульВызовСервера.СохранитьНастройкиКаргоМарт(Организация, СтруктураНастройки);
	
	Если Результат <> Истина Тогда
		ОбщегоНазначения.СообщитьПользователю(КМ_ОбщийМодульКлиентСервер.СообщениеПользователю(14));
		Возврат;
	КонецЕсли;
		
	Попытка
		МЗап.Записать(Истина);
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось записать  параметр ""НомерПоследнегоЗапросаКаргомарт"".");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ОсновныеНастройкиВСтроку()
	
	Возврат ЗначениеВСтрокуВнутр(ОсновныеНастройкиВСтруктуру());
	
КонецФункции

&НаСервере
Функция ОсновныеНастройкиВСтруктуру()
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("АдресСервера", 					АдресСервера);
	СтруктураНастройки.Вставить("Логин", 							Логин);
	СтруктураНастройки.Вставить("Пароль", 							Пароль);
	СтруктураНастройки.Вставить("ПодразделениеЗатрат", 				ЭтотОбъект.ПодразделениеЗатрат);
	СтруктураНастройки.Вставить("СчетДоходовРТУ", 					ЭтотОбъект.СчетДоходовРТУ);
	СтруктураНастройки.Вставить("СчетРасходовРТУ", 					ЭтотОбъект.СчетРасходовРТУ);
	СтруктураНастройки.Вставить("СчетУчетаНДС", 					ЭтотОбъект.СчетУчетаНДС);
	СтруктураНастройки.Вставить("СчетУчетаНДСПоРеализации", 		ЭтотОбъект.СчетУчетаНДСПоРеализации);
	СтруктураНастройки.Вставить("СчетЗатрат", 						ЭтотОбъект.СчетЗатрат);
	СтруктураНастройки.Вставить("Субконто1_НГ", 					ЭтотОбъект.Субконто1_НГ);
	СтруктураНастройки.Вставить("Субконто2_СЗ", 					ЭтотОбъект.Субконто2_СЗ);
	СтруктураНастройки.Вставить("НомерПоследнегоЗапросаКаргомарт", 	ЭтотОбъект.НомерПоследнегоЗапросаКаргомарт);
	СтруктураНастройки.Вставить("СтатьяДДСОплатаТранспортныхУслуг", ЭтотОбъект.СтатьяДДСОплатаТранспортныхУслуг);
	СтруктураНастройки.Вставить("ПодразделениеОрганизации", 		ЭтотОбъект.ПодразделениеОрганизации);
	СтруктураНастройки.Вставить("СпособУчетаНДС", 					ЭтотОбъект.СпособУчетаНДС);
		
	Возврат СтруктураНастройки;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияОЗакрытииФормыОбработкиЗаказа(ПараметрЗакрытия, ДополнительныеПараметры = Неопределено) Экспорт
	
//	Если 		РежимРаботы = 0 Тогда
//		ЗаполнитьТаблицуЗаказовПроверкаСкановНаСервере();
//	ИначеЕсли 	РежимРаботы = 1 Тогда
//		ЗаполнитьТаблицуЗаказовПроверкаОригиналовНаСервере();
//	Иначе
//		Сообщить("Неверный режим работы (" + РежимРаботы + ")!");
//	КонецЕсли;
	
	//Переоткрываем закрытый документ, если заказ обнавлен (перезапрошел с Каргомарта) ПараметрЗакрытия = ДокументСсылка.КДВКаргомартЗаказ
//	Если ТипЗнч(ПараметрЗакрытия) = Тип("ДокументСсылка.КДВКаргомартЗаказ") Тогда
		
//		ЭлементФормы_ЗаказыКаргомарт 				= ?(ТипЗнч(ТекущийЭлемент) = Тип("ТаблицаФормы"), ТекущийЭлемент, Неопределено);
//		ЭлементФормы_ЗаказыКаргомарт.ТекущаяСтрока 	= ПараметрЗакрытия;
		
//		ЗаказыКаргомартВыбор(ЭлементФормы_ЗаказыКаргомарт, ЭлементФормы_ЗаказыКаргомарт.ТекущаяСтрока, Неопределено, Ложь, Истина);
					
//		Возврат;
		
//	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиИзСтруктуры(СтруктураНастройки)
	
	Для Каждого Настройка из СтруктураНастройки Цикл
		Попытка
			ЭтотОбъект[Настройка.Ключ] = Настройка.Значение;
		Исключение
			ОбщегоНазначения.СообщитьПользователю("В настройках наден неизвестный параметр """ + Настройка.Ключ + """!");
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Функция ТестироватьПодключение(Организация)

	НастройкиКаргомарт = Кэш_Прочитать("НастройкиКаргомарт" + Строка(ОрганизацияЗаказчик));
	
	Если НастройкиКаргомарт = Неопределено Тогда
	
		НастройкиКаргомарт = КМ_ОбщийМодульПовтИсп.МодульЯдро().ПолучитьНастройкиКаргомарт(Организация);
		
		Кэш_Поместить("НастройкиКаргомарт" + Строка(ОрганизацияЗаказчик), НастройкиКаргомарт);
		
	КонецЕсли;
	
	Результат = КМ_ОбщийМодульВызовСервера.ТестПодключения(Организация, НастройкиКаргомарт);
	
	Возврат Результат;
	
КонецФункции

// Процедура добовляет/изменяет отбор в Динамическом списке
//
// Параметры:
//  ПолеОтбора  - Строка - Левое значение отбора (Поле)
//  ВидСравненияОтбора  - ВидСравненияКомпоновкиДанных - Например: ВидСравненияКомпоновкиДанных.Равно
//  ЗначениеОтбора  - Произвольный - Правое значение отбора
&НаСервере
Процедура ДобавлениеОтбора (ПолеОтбора, ВидСравненияОтбора, ЗначениеОтбора)
	
	ОтборСуществует 			= Ложь;
	НовоеПолеКомпоновкиДанных 	= Новый ПолеКомпоновкиДанных(ПолеОтбора);
			
	Если ЭтотОбъект.ЗаказыКаргомарт.Отбор.Элементы.Количество() > 0 Тогда
					
		Для каждого Элемент из ЭтотОбъект.ЗаказыКаргомарт.Отбор.Элементы Цикл
		
			Если Элемент.ЛевоеЗначение = НовоеПолеКомпоновкиДанных И Элемент.ВидСравнения = ВидСравненияОтбора Тогда
				
				Элемент.ПравоеЗначение = ЗначениеОтбора;
				
				ОтборСуществует = Истина;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ОтборСуществует Тогда
		
		ОтборДС = ЭтотОбъект.ЗаказыКаргомарт.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДС.ВидСравнения = ВидСравненияОтбора;
		ОтборДС.ПравоеЗначение = ЗначениеОтбора;
		ОтборДС.ЛевоеЗначение = НовоеПолеКомпоновкиДанных;
		ОтборДС.Использование = Истина;	
			
	КонецЕсли;
	
КонецПроцедуры


// Процедура удаляет отбор в Динамическом списке
//
// Параметры:
//  ПолеОтбора  - Строка - Левое значение отбора (Поле)
//  ВидСравненияОтбора  - ВидСравненияКомпоновкиДанных - Например: ВидСравненияКомпоновкиДанных.Равно
&НаСервере
Процедура УдалениеОтбора (ПолеОтбора, ВидСравненияОтбора)
	
	Если ЭтотОбъект.ЗаказыКаргомарт.Отбор.Элементы.Количество() > 0 Тогда
					
		Для каждого Элемент из ЭтотОбъект.ЗаказыКаргомарт.Отбор.Элементы Цикл
		
			Если (Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора) И Элемент.ВидСравнения = ВидСравненияОтбора) Тогда
				
				ЭтотОбъект.ЗаказыКаргомарт.Отбор.Элементы.Удалить(Элемент);	
				
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		
		ЭтотОбъект.ЗаказыКаргомарт.Отбор.Элементы.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура Устанавливает (применяет) отбор в Динамическом списке
//
// Параметры:
//  Отбор  - Структура:
//		* НомерЗаявки - Строка - Если значение заполнено добавляет поиск по полю номеру документа
//		* ДатаПогрузки - Дата - Если значение заполнено добавляет поиск по полю дата погрузки
//		* Перевозчик - СправочникСсылка.Контрагенты - Если значение заполнено добавляет поиск по полю Перевозчик
//		* НомерДокумента - Строка - Если значение заполнено добавляет поиск по полю дата погрузки
//		* ТолькоНеобработанные - Булево - Если значение заполнено добавляет поиск по полю СтатусПроверкиДокументов < 2
&НаСервере
Процедура ОтобратьвДС(Отбор)

		Если ЗначениеЗаполнено(Отбор) И ТипЗнч(Отбор) = Тип("Структура") Тогда

			Если Отбор.Свойство("НомерЗаявки") И ЗначениеЗаполнено(Отбор.НомерЗаявки) Тогда
				
				ДобавлениеОтбора("Номер", ВидСравненияКомпоновкиДанных.Равно, Отбор.НомерЗаявки);
								
			ИначеЕсли Отбор.Свойство("НомерЗаявки") И Не ЗначениеЗаполнено(Отбор.НомерЗаявки) Тогда
				
				УдалениеОтбора("Номер", ВидСравненияКомпоновкиДанных.Равно);
					
			КонецЕсли;
				
			
		КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборы()
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерЗаявки", 			ОтборНомерЗаявки);
	Отбор.Вставить("Откуда", 		Откуда);
	Отбор.Вставить("Куда", 			Куда);
		
	ОтобратьвДС(Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыДС()
	
	ЭтотОбъект.ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("Организация", 	ОрганизацияЗаказчик);
	ЭтотОбъект.ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("ДатаНач", 		?(ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, '00010101'));
	ЭтотОбъект.ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("ДатаКон", 		?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), '21000101'));
	ЭтотОбъект.ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("Пункт1", 	Откуда);
	ЭтотОбъект.ЗаказыКаргомарт.Параметры.УстановитьЗначениеПараметра("Пункт2", 	Куда);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьЗаказыКаргомартНаСервере(Организация, Дата)
		
	//МассивНомеров 		= Новый Массив;
			
	ДаныеДляЗагрузки 				= Новый Структура("Организация, Протокол, Дата");
	ДаныеДляЗагрузки.Организация 	= Организация;
	ДаныеДляЗагрузки.Дата 			= Дата;
	ДаныеДляЗагрузки.Протокол 		= 2;
	

	
	//ДаныеДляЗагрузки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказКаргомарт, ДаныеДляЗагрузки);
	
	//МассивНомеров.Добавить(ДаныеДляЗагрузки.Номер);
	
	Результат = КМ_ОбщийМодульВызовСервера.ИмпортЗаказовИзКаргомарт(ДаныеДляЗагрузки.Организация, ДаныеДляЗагрузки.Протокол, ДаныеДляЗагрузки.Дата, Истина);

	Возврат Результат;
			
КонецФункции

#КонецОбласти



