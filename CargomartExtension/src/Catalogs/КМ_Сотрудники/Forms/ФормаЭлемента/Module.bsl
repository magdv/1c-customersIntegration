
&НаКлиенте
Перем ОбщийКэш;

#Область Кэширование
// {	КЭШИРОВАНИЕ

// Возвращает значение из общего кэша
//
// Параметры:
//  Ключ - Строка - см. процедуру Кэш_Поместить
//
// Возвращаемое значение: 
//   Произвольный
//
&НаКлиенте
Функция Кэш_Прочитать(Ключ) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ОбщийКэш) Тогда
		Результат = ОбщийКэш.Получить(Ключ);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Помещает значение в общий для кэш
//
// Параметры:
//  Ключ     - Строка       - уникальный ключ помещаемого значения;
//  Значение - Произвольный - помещаемое значение;
//
&НаКлиенте
Процедура Кэш_Поместить(Ключ, Значение) Экспорт
	
	Если ОбщийКэш = Неопределено Тогда
		ОбщийКэш = Новый Соответствие;
	КонецЕсли;
	
	ОбщийКэш.Вставить(Ключ, Значение);
	
КонецПроцедуры

// Очищает все вложенные в общий кэш коллекции
// с помощью метода Очистить()
//
&НаКлиенте
Процедура ОчиститьКэшНаКлиенте()
	
	Если Не ЗначениеЗаполнено(ОбщийКэш) Тогда
		Возврат;
	КонецЕсли;
	
	ТипыКоллекций = Новый Соответствие;
	ТипыКоллекций.Вставить(Тип("Массив")		, Истина);
	ТипыКоллекций.Вставить(Тип("Структура")		, Истина);
	ТипыКоллекций.Вставить(Тип("Соответствие")	, Истина);
	ТипыКоллекций.Вставить(Тип("СписокЗначений"), Истина);
	
	Для Каждого КлючИЗначение Из ОбщийКэш Цикл
		
		ТипЗначения = ТипЗнч(КлючИЗначение.Значение);
		
		Если ТипыКоллекций[ТипЗначения] = Истина Тогда
			КлючИЗначение.Значение.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщийКэш.Очистить();
	
КонецПроцедуры

// }	КЭШИРОВАНИЕ
#КонецОбласти

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОчиститьКэшНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДанныеФормы();
		
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Владелец = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитФизЛицаПриИзменении(Элемент)
	
	Модифицированность 	= Истина;
	Объект.Наименование = Фамилия + " " + Имя + " " + Отчество;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	ФизическоеЛицоПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ФизическоеЛицоПриИзмененииНаСервере()
	ЗаполнитьДанныеФормы();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыВОбработку = Новый Структура;
	
	ПараметрыВОбработку.Вставить("ФизическоеЛицо", 			Объект.ФизическоеЛицо);
	ПараметрыВОбработку.Вставить("Фамилия", 				Фамилия);
	ПараметрыВОбработку.Вставить("Имя", 					Имя);
	ПараметрыВОбработку.Вставить("Отчество", 				Отчество);
	ПараметрыВОбработку.Вставить("Телефон", 				Телефон);
	ПараметрыВОбработку.Вставить("КонтактныйТелефон", 		КонтактныйТелефон);
	ПараметрыВОбработку.Вставить("КонтактныйТелефонДоп", 	КонтактныйТелефонДоп);
	ПараметрыВОбработку.Вставить("EMail", 					EMail);
	ПараметрыВОбработку.Вставить("КонтактныйEMail", 		КонтактныйEMail);
	
	ТекущийОбъект.ФизическоеЛицо = КМ_ОбщийМодульПовтИсп.МодульЯдро().КМ_Сотрудники_Форма_ПередЗаписьюНаСервере(ПараметрыВОбработку);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Объект.Наименование = Фамилия + " " + Имя + " " + Отчество;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДанныеФормы()
	
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		
		КМ_ОбщийМодульПовтИсп.МодульЯдро().ЗаполнитьДанныеФормыКМ_Сотрудники(ЭтотОбъект);
		 
	КонецЕсли;	
		
	
КонецПроцедуры

