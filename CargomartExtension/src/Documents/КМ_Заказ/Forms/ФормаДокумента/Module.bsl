
&НаКлиенте
Процедура МаршрутТипМаршрутнойТочкиСоздание(Элемент, СтандартнаяОбработка)
	
	Сообщить("Бла-бла");
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() 
		И НЕ ЗначениеЗаполнено(ПараметрЗначениеКопирования) Тогда
		ЗаполнитьЗначенияПоУмолчанию();
	КонецЕсли;
	
	НастроитьДоступностьНастройкиТоргов();
	
	ЗаполнитьТипыГрузовика();
	ЗаполнитьТипыПогрузкиРазгрузки();
	
	СтатусСтрокой = Строка(Объект.Статус);
	
	Если СтатусСтрокой <> "Черновик"
		И СтатусСтрокой <> "Архивный"
		И СтатусСтрокой <> "Удален" 
		И ЗначениеЗаполнено(Объект.ИД) Тогда
		ЗапуститьОбновлениеЗаказаВФоне();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ДополнительныеПараметры = Новый Структура;
	
	//КМ_ОбщийМодульПовтИсп.МодульЯдро().СформироватьФормуКМЗаказ(ЭтотОбъект, ДополнительныеПараметры);
	
	Элементы.СтавкаНДС.СписокВыбора.Добавить(20, 	"20%");
	Элементы.СтавкаНДС.СписокВыбора.Добавить(10, 	"10%");
	Элементы.СтавкаНДС.СписокВыбора.Добавить(0, 	"БезНДС");
	
	ПриСозданииПриЧтенииСервер();
	
	ПараметрЗначениеКопирования = Параметры.ЗначениеКопирования;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриСозданииПриЧтенииСервер(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПриСозданииПриЧтенииСервер(ТекущийОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипЗаказаПриИзменении(Элемент)
	НастроитьДоступностьНастройкиТоргов();
КонецПроцедуры

&НаКлиенте
Процедура ТипПогрузкиРазгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокТипыПогрузки = Новый СписокЗначений;
	
	ТипыПогрузкиРазгрузки = КМ_ОбщийМодульКлиентСервер.ТипыПогрузкиРазгрузки();
	
	Для Каждого КлючИЗначение из ТипыПогрузкиРазгрузки Цикл
		
		ЭлементСписка 				= СписокТипыПогрузки.Добавить();
		ЭлементСписка.Значение 		= КлючИЗначение.Ключ;
		ЭлементСписка.Представление = КлючИЗначение.Значение;
		
		Если СтрНайти(Объект.ТипПогрузкиРазгрузки, Строка(КлючИЗначение.Ключ)) <> 0 Тогда
			ЭлементСписка.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ОП = Новый ОписаниеОповещения("СохранитьТипПогрузкиРазгрузки", ЭтотОбъект);
	СписокТипыПогрузки.ПоказатьОтметкуЭлементов(ОП, "Выберите требуемые типы погрузки/разгрузки");
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КОпубликоватьЧерновик(Команда)
	
	Если Строка(Объект.Статус) <> "Черновик" Тогда
		Возврат;
	КонецЕсли;
	
	ОпубликоватьЧерновикСервер();
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьТипПогрузкиРазгрузки(СписокТипыПогрузки, Параметры) Экспорт
	
	Если СписокТипыПогрузки <> Неопределено Тогда

		Объект.ТипПогрузкиРазгрузки = "";

		Для Каждого ЭлементСписка Из СписокТипыПогрузки Цикл
			Если ЭлементСписка.Пометка Тогда
				Объект.ТипПогрузкиРазгрузки = Объект.ТипПогрузкиРазгрузки + Строка(ЭлементСписка.Значение) + " ";
			КонецЕсли;
		КонецЦикла;
		
		
		ПредставлениеТипыПогрузки = КМ_ОбщийМодульКлиентСервер.ЗаполнитьПредставлениеТипыПогрузки(Объект.ТипПогрузкиРазгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Документы.КМ_Заказ.ЗаполнитьЗначенияПоУмолчанию(Объект);
	ПредставлениеТипыПогрузки = КМ_ОбщийМодульКлиентСервер.ЗаполнитьПредставлениеТипыПогрузки(Объект.ТипПогрузкиРазгрузки);
		 
КонецПроцедуры

&НаСервере
Процедура ПриСозданииПриЧтенииСервер(ТекущийОбъект = Неопределено)
	
	Элементы.ФормаКОпубликоватьЧерновик.Доступность = Строка(Объект.Статус) = "Черновик";
	ПредставлениеТипыПогрузки = КМ_ОбщийМодульКлиентСервер.ЗаполнитьПредставлениеТипыПогрузки(Объект.ТипПогрузкиРазгрузки);
	
КонецПроцедуры


&НаСервере
Процедура ОпубликоватьЧерновикСервер()
	
	Результат = КонтрольПередПубликацией();
	
	Если Результат.КодОшибки = 0 Тогда
		
		Объект.Статус = Перечисления.КМ_СтатусыЗаказов.Опубликован;
		Записать();
	
	Иначе
		ОбщегоНазначения.СообщитьПользователю(Результат.Описание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтрольПередПубликацией()
	
	Результат 				= КМ_ОбщийМодульКлиентСервер.ИнициализироватьСтруктуруВозврата();
	ТекстОшибкиЗаполнения 	= "";
	
	Если Объект.Маршрут.Количество() < 2 Тогда
		ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + 
			"	Требуется заполнить маршрут заказа(Минимум две точки маршрута).
			|";
	КонецЕсли;
	
	Если Объект.Контакты.Количество() = 0 Тогда
		ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + 
			"	Требуется заполнить контактную информацию.
			|";
	КонецЕсли;
	
	Если Объект.ОписаниеГруза = "" Тогда
		ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + 
			"	Требуется заполнить поле ""Описание груза"".
			|";
	КонецЕсли;
	
	Если Объект.КонечнаяДатаТоргов <= ТекущаяДата() Тогда
		ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + 
			"	Дата окончания торгов должна быть позже текущей даты.
			|";
	КонецЕсли;
	
	Если Объект.Маршрут.Количество()> 0
		И Объект.Маршрут[0].ДатаМаршрутнойТочки < Объект.КонечнаяДатаТоргов Тогда
		ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + 
			"	Дата погрузки не может быть раньше даты окончания торгов.
			|";	
	КонецЕсли;
	
	Если Объект.Маршрут.Количество()> 1
		И Объект.Маршрут[0].ДатаМаршрутнойТочки > Объект.Маршрут[Объект.Маршрут.Количество()-1].ДатаМаршрутнойТочки 
		ИЛИ (Объект.Маршрут[0].ДатаМаршрутнойТочки = Объект.Маршрут[Объект.Маршрут.Количество()-1].ДатаМаршрутнойТочки
		И Объект.Маршрут[0].ВремяС > Объект.Маршрут[Объект.Маршрут.Количество()-1].ВремяПо) Тогда
		ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + 
			"	Дата разгрузки не может быть раньше даты погрузки.
			|";	
	КонецЕсли;
	
	Если ТекстОшибкиЗаполнения <> "" Тогда
		
		ТекстОшибкиЗаполнения 	= "В заказе найдены ошибки заполнения:
			|" + ТекстОшибкиЗаполнения + "Исправьте найденные проблемы перед публикацией.";
		Результат.КодОшибки 	= 1;
		Результат.Описание 		= ТекстОшибкиЗаполнения;
		Результат.Лог 			= ТекстОшибкиЗаполнения;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НастроитьДоступностьНастройкиТоргов()
	Элементы.ГрНастройкиТоргов.Доступность = Объект.ТипЗаказа = "auction";
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбновлениеЗаказаВФоне()
	
	УстановитьВозможностьИзмененияЗаказа(Ложь);
	
	МоментЗапускаОбновленияЗаказаС_КМ = ЗапуститьФоновоеОбновлениеЗаказаСерверБезКонтекста(Объект.Организация, Объект.ИД);
	ПодключитьОбработчикОжидания("ПроверкаЗавершенияОбновленияВФонеКлиент", 1, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьИзмененияЗаказа(ВозможностьИзмененияЗаказа)
	
	Элементы.ФормаПровести.Доступность = ВозможностьИзмененияЗаказа;
	Элементы.ФормаЗаписать.Доступность = ВозможностьИзмененияЗаказа;
	Элементы.ФормаПровестиИЗакрыть.Доступность = ВозможностьИзмененияЗаказа;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьТипыПогрузкиРазгрузки()
	
	СоответствиеТипыПогрузкиРазгрузки = КМ_ОбщийМодульКлиентСервер.ТипыПогрузкиРазгрузки();
	
	Элементы.ТипПогрузкиРазгрузки.СписокВыбора.Очистить();
	
	Для Каждого ТипПогрузкиРазгрузки из СоответствиеТипыПогрузкиРазгрузки Цикл
		Элементы.ТипПогрузкиРазгрузки.СписокВыбора.Добавить(ТипПогрузкиРазгрузки.Ключ, ТипПогрузкиРазгрузки.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТипыГрузовика()
	
	СоответствиеТипыГрузовиков = КМ_ОбщийМодульКлиентСервер.ТипыГрузовиков();
	
	Элементы.ТипГрузовика.СписокВыбора.Очистить();
	
	Для Каждого ТипГрузовика из СоответствиеТипыГрузовиков Цикл
		Элементы.ТипГрузовика.СписокВыбора.Добавить(ТипГрузовика.Ключ, ТипГрузовика.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗавершенияОбновленияВФонеКлиент() Экспорт
	
	Результат = ПроверкаЗавершенияОбновленияВФонеСерверБезКонтекста(Объект.Организация, Объект.ИД, МоментЗапускаОбновленияЗаказаС_КМ);
	
	Если Результат = Неопределено Тогда
		//Ждём дальше
		Возврат;
		
	Иначе
		//Что-то нужно решать: разрешать изменение (заказ обновлён, либо обновление не требуется), либо нет (ошибка обновления заказа)
		ОтключитьОбработчикОжидания("ПроверкаЗавершенияОбновленияВФонеКлиент");
		
		Если Строка(Результат) = "Успешно обновлён" Тогда
			
			//Нужно обновить состояние заказа в форме и разрешить редактирование
			
			Прочитать();
			УстановитьВозможностьИзмененияЗаказа(Истина);
			
		ИначеЕсли Строка(Результат) = "Обновление не требуется" Тогда
			//Просто разрешить редактирование в текущем состоянии.
			УстановитьВозможностьИзмененияЗаказа(Истина);
		Иначе
			//Оставить заблокированной возможность редактирования
		КонецЕсли;
		 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаЗавершенияОбновленияВФонеСерверБезКонтекста(Организация, ИД, МоментЗапускаОбновленияЗаказаС_КМ)
	
	Возврат КМ_ОбщийМодульВызовСервера.ПроверкаЗавершенияОбновленияВФоне(Организация, ИД, МоментЗапускаОбновленияЗаказаС_КМ);
	
КонецФункции


&НаСервереБезКонтекста
Функция ЗапуститьФоновоеОбновлениеЗаказаСерверБезКонтекста(Организация, ИД)
	
	ДатаЗапускаФЗ = ТекущаяДата();
	КМ_ОбщийМодульВызовСервера.ЗапуститьФоновоеОбновлениеЗаказа(Организация, ИД);
	Возврат ДатаЗапускаФЗ;
	
КонецФункции

#КонецОбласти
