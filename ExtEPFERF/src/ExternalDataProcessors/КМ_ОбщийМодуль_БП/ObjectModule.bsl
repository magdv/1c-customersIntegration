
//В этой таблице мы храним преобоазованное поле ФизическоеЛицо из УИД в Справочники.ФизическиеЛицо.Ссылка
//Для кросплатформености

Перем ТЗ_КМ_Сотрудники;
Перем ТЗ_КМ_Пункты;
Перем Кэш Экспорт;

#Область СлужебныйПрограммныйИнтерфейс

#Область Запросы

//Процедура заполения таблицы ТЗ_КМ_Пункты. Нужна для сопоставления УИД из КМ_ПунктыПогрузкиВыгрузки.Контрагент со
//справочником Контрагенты, для получения из УИД - Контрагенты.Ссылка. Далее эта ТЗ нужна дальнейшей обработки. 
//
//Параметры:
//	Заказ - ДокументСсылка.КМ_Заказ - Заказ каргомарт 
Процедура Врм_ТЗ_КМ_Пункты(Заказ)

    Запрос = Новый Запрос;
    
	Запрос.Текст ="ВЫБРАТЬ
	|	КМ_ПунктыПогрузкиВыгрузки.Ссылка КАК ПунктПогрузкиВыгрузкиСсылка,
	|	КМ_ПунктыПогрузкиВыгрузки.Контрагент КАК УИД
	|ИЗ
	|	Документ.КМ_Заказ КАК КМ_Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КМ_Заказ.Маршрут КАК КМ_ЗаказМаршрут
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КМ_ПунктыПогрузкиВыгрузки КАК КМ_ПунктыПогрузкиВыгрузки
	|			ПО КМ_ЗаказМаршрут.ПунктПогрузкиВыгрузки.Ссылка = КМ_ПунктыПогрузкиВыгрузки.Ссылка
	|		ПО КМ_Заказ.Ссылка = КМ_ЗаказМаршрут.Ссылка
	|ГДЕ
	|	КМ_Заказ.Ссылка = &Заказ
	|	И КМ_ПунктыПогрузкиВыгрузки.ПометкаУдаления = ЛОЖЬ";

	Запрос.УстановитьПараметр("Заказ", Заказ);

	ТЗ_КМ_Пункты = Запрос.Выполнить().Выгрузить();
	
	ТС = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ТЗ_КМ_Пункты.Колонки.Добавить("Контрагент", ТС, "Контрагент");
		
	Для каждого СтрокаТЗ из ТЗ_КМ_Пункты Цикл			
		СтрокаТЗ.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(СтрокаТЗ.УИД); 
	КонецЦикла;
		
	ТЗ_КМ_Пункты.Колонки.Удалить(ТЗ_КМ_Пункты.Колонки.Найти("УИД"));

КонецПроцедуры

//Функция формирует запрос он состоит из 2х итоговых запросов (Запрос Пакета 1 и Запрос Пакета 2).
//Выбирает из данные ТЗ_КМ_Пункты, справочника КМ_ПунктыПогрузкиВыгрузки,
//справочника Контрагенты, документа КМ_Заказ, регистра сведений ДополнительныеСведения возвращая сопоставленую ТЗ.
//Запрос Пакета 2: Выбирает данные из Документ.КМ_Заказ - Сотрудников
//
//Параметры:
//	Заказ - ДокументСсылка.КМ_Заказ - Заказ каргомарт
// 
// Возвращаемое значение:
//  Запрос - Запрос
Функция ЗапросПолучитьJSONОбъектаЗаказа(Заказ) Экспорт
	
	Запрос = Новый Запрос;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ_КМ_Пункты.ПунктПогрузкиВыгрузкиСсылка,
	|	ТЗ_КМ_Пункты.Контрагент КАК КонтрагентПунктаПогрузкиВыгрузки
	|ПОМЕСТИТЬ Врм_ТЗ_КМ_Пункты
	|ИЗ
	|	&Вн_ТЗ_КМ_Пункты КАК ТЗ_КМ_Пункты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_КМ_Пункты.ПунктПогрузкиВыгрузкиСсылка,
	|	ТЗ_КМ_Пункты.КонтрагентПунктаПогрузкиВыгрузки,
	|	Контрагенты.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	Контрагенты.ИНН КАК КонтрагентИНН,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА 3
	|		ИНАЧЕ ВЫБОР
	|			КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				ТОГДА ВЫБОР
	|					КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ИЛИ Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|						ТОГДА 3
	|					ИНАЧЕ 4
	|				КОНЕЦ
	|			КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			И Контрагенты.Самозанятый = ИСТИНА
	|				ТОГДА ВЫБОР
	|					КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|					ИЛИ Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|				КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|				ИЛИ Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|					ТОГДА 2
	|				ИНАЧЕ 5
	|			КОНЕЦ
	|		КОНЕЦ
	|	КОНЕЦ КАК ФормаОрганизацииПредприятия,
	|	ЕСТЬNULL(Контрагенты.СтранаРегистрации.КодАльфа3, ""RUS"") КАК КонтрагентСтранаРегистрации
	|ПОМЕСТИТЬ Врм_ТЗ_КМ_Пункты_Контрагенты
	|ИЗ
	|	Врм_ТЗ_КМ_Пункты КАК ТЗ_КМ_Пункты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.Ссылка = ТЗ_КМ_Пункты.КонтрагентПунктаПогрузкиВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КМ_Заказ.Дата КАК Дата,
	|	КМ_Заказ.Номер КАК Номер,
	|	КМ_Заказ.Ссылка КАК ЗаказКаргомарт,
	|	КМ_Заказ.Организация КАК Организация,
	|	КМ_Заказ.Статус КАК Статус,
	|	КМ_Заказ.СтавкаНДС КАК СтавкаНДС,
	|	КМ_Заказ.СуммаСНДС КАК СуммаСНДС,
	|	КМ_Заказ.ТипГрузовика КАК ТипГрузовика,
	|	КМ_Заказ.ТоннажАвто КАК ТоннажАвто,
	|	КМ_Заказ.КубатураАвто КАК КубатураАвто,
	|	КМ_Заказ.ВесГруза КАК ВесГруза,
	|	КМ_Заказ.ОбъемГруза КАК ОбъемГруза,
	|	КМ_Заказ.ОписаниеГруза КАК ОписаниеГруза,
	|	КМ_Заказ.ТемператураОт КАК ТемператураОт,
	|	КМ_Заказ.ТемператураДо КАК ТемператураДо,
	|	КМ_Заказ.ТипПогрузкиРазгрузки КАК ТипПогрузкиРазгрузки,
	|	КМ_Заказ.ДопОборудованиеМашины КАК ДопОборудованиеМашины,
	|	КМ_Заказ.УсловияПеревозки,
	|	КМ_Заказ.УсловияПеревозкиДополнительно,
	|	КМ_Заказ.КомментарийПоОплате,
	|	КМ_Заказ.Метки,
	|	КМ_Заказ.СтратегияЗаданияЦены,
	|	КМ_Заказ.ТипЗаказа,
	|	КМ_Заказ.ШагИзмененияЦеныЗаказа КАК ШагИзмененияЦеныЗаказа,
	|	КМ_Заказ.КонечнаяДатаТоргов,
	|	КМ_Заказ.МоментВремени,
	|	КМ_Заказ.Представление,
	|	КМ_ЗаказМаршрут.НомерСтроки КАК МаршрутНомерСтроки,
	|	КМ_ЗаказМаршрут.ТипМаршрутнойТочки КАК ТипМаршрутнойТочки,
	|	КМ_ЗаказМаршрут.Комментарий,
	|	КМ_ЗаказМаршрут.ДатаМаршрутнойТочки,
	|	КМ_ЗаказМаршрут.ВремяС,
	|	КМ_ЗаказМаршрут.ВремяПо,
	|	КМ_ПунктыПогрузкиВыгрузки.ИД КАК ИДПунктаПогрузкиВыгрузки,
	|	КМ_ПунктыПогрузкиВыгрузки.Ссылка КАК ПунктПогрузкиВыгрузкиСсылка,
	|	КМ_ПунктыПогрузкиВыгрузки.КЛАДР КАК КЛАДР,
	|	КМ_ПунктыПогрузкиВыгрузки.ПолноеНаименование Как НаименованиеПунктаПогрузкиВыгрузки,
	|	КМ_ПунктыПогрузкиВыгрузки.НаселенныйПункт,
	|	КМ_ПунктыПогрузкиВыгрузки.Адрес,
	|	КМ_ПунктыПогрузкиВыгрузки.НомерДома,
	|	КМ_ПунктыПогрузкиВыгрузки.Комментарий КАК КомментарийПунктаПогрузкиВыгрузки,
	|	КМ_ПунктыПогрузкиВыгрузки.КоординатыШирота КАК КоординатыШирота,
	|	КМ_ПунктыПогрузкиВыгрузки.КоординатыДолгота КАК КоординатыДолгота,
	|	КМ_ПунктыПогрузкиВыгрузки.ФормаОрганизации КАК ФормаОрганизации,
	|	КМ_ПунктыПогрузкиВыгрузки.ЮридическоеНаименование,
	|	КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация.НомерСтроки КАК КонтактнаяИнформацияНомерСтроки,
	|	КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация.КонтактноеЛицо КАК КонтактноеЛицоНаименование,
	|	КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация.Телефон КАК Телефон,
	|	КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация.Добавочный КАК ТелефонДоп,
	|	ЕстьNULL(КИЮрАдресКонтрагента.Значение, """") КАК КонтрагентЮрАдрес,
	|	ЕСТЬNULL(ДСВидДокументаУдЛ.Значение, """") КАК КонтрагентВидУдостоверяющегоДокумента,
	|	ЕСТЬNULL(ДСНомерДокументаУдЛ.Значение, """") КАК КонтрагентНомерУдостоверяющегоДокумента,
	|	ЕСТЬNULL(ДСДатаДокументаУдЛ.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК КонтрагентДатаУдостоверяющегоДокумента,
	|	Врм_ТЗ_КМ_Пункты_Контрагенты.КонтрагентПунктаПогрузкиВыгрузки,
	|	Врм_ТЗ_КМ_Пункты_Контрагенты.КонтрагентНаименованиеПолное,
	|	Врм_ТЗ_КМ_Пункты_Контрагенты.КонтрагентИНН,
	|	Врм_ТЗ_КМ_Пункты_Контрагенты.ФормаОрганизацииПредприятия,
	|	Врм_ТЗ_КМ_Пункты_Контрагенты.КонтрагентСтранаРегистрации
	|ИЗ
	|	Документ.КМ_Заказ КАК КМ_Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КМ_Заказ.Маршрут КАК КМ_ЗаказМаршрут
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КМ_ПунктыПогрузкиВыгрузки КАК КМ_ПунктыПогрузкиВыгрузки
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КМ_ПунктыПогрузкиВыгрузки.КонтактнаяИнформация КАК
	|					КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация
	|				ПО КМ_ПунктыПогрузкиВыгрузки.Ссылка = КМ_ПунктыПогрузкиВыгрузкиКонтактнаяИнформация.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Врм_ТЗ_КМ_Пункты_Контрагенты КАК Врм_ТЗ_КМ_Пункты_Контрагенты
	|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КИЮрАдресКонтрагента
	|					ПО Врм_ТЗ_КМ_Пункты_Контрагенты.КонтрагентПунктаПогрузкиВыгрузки = КИЮрАдресКонтрагента.Ссылка
	|					И КИЮрАдресКонтрагента.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|					И КИЮрАдресКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДСВидДокументаУдЛ
	|					ПО ДСВидДокументаУдЛ.Объект = Врм_ТЗ_КМ_Пункты_Контрагенты.КонтрагентПунктаПогрузкиВыгрузки
	|					И ДСВидДокументаУдЛ.Свойство = &РеквизитВидУдостоверяющегоДокумента
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДСНомерДокументаУдЛ
	|					ПО ДСНомерДокументаУдЛ.Объект = Врм_ТЗ_КМ_Пункты_Контрагенты.КонтрагентПунктаПогрузкиВыгрузки
	|					И ДСНомерДокументаУдЛ.Свойство = &РеквизитНомерУдостоверяющегоДокумента
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДСДатаДокументаУдЛ
	|					ПО ДСДатаДокументаУдЛ.Объект = Врм_ТЗ_КМ_Пункты_Контрагенты.КонтрагентПунктаПогрузкиВыгрузки
	|					И ДСДатаДокументаУдЛ.Свойство = &РеквизитДатаУдостоверяющегоДокумента
	|				ПО КМ_ПунктыПогрузкиВыгрузки.Ссылка = Врм_ТЗ_КМ_Пункты_Контрагенты.ПунктПогрузкиВыгрузкиСсылка
	|			ПО КМ_ЗаказМаршрут.ПунктПогрузкиВыгрузки = КМ_ПунктыПогрузкиВыгрузки.Ссылка
	|		ПО КМ_Заказ.Ссылка = КМ_ЗаказМаршрут.Ссылка
	|ГДЕ
	|	КМ_Заказ.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КМ_ЗаказКонтакты.Сотрудник.КаргомартИД КАК КаргомартИД
	|ИЗ
	|	Документ.КМ_Заказ.Контакты КАК КМ_ЗаказКонтакты
	|ГДЕ
	|	КМ_ЗаказКонтакты.Ссылка = &Заказ";
	
	Врм_ТЗ_КМ_Пункты(Заказ);
	
	Запрос.УстановитьПараметр("Вн_ТЗ_КМ_Пункты", 						ТЗ_КМ_Пункты);
	Запрос.УстановитьПараметр("Заказ", 									Заказ);
	Запрос.УстановитьПараметр("ВидКМРабочийТелефон", 					Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица);
	Запрос.УстановитьПараметр("РеквизитДатаУдостоверяющегоДокумента", 	КМ_ОбщийМодульПовтИсп.РеквизитДатаУдостоверяющегоДокументаКонтрагента());
	Запрос.УстановитьПараметр("РеквизитНомерУдостоверяющегоДокумента", 	КМ_ОбщийМодульПовтИсп.РеквизитНомерУдостоверяющегоДокументаКонтрагента());
	Запрос.УстановитьПараметр("РеквизитВидУдостоверяющегоДокумента", 	КМ_ОбщийМодульПовтИсп.РеквизитВидУдостоверяющегоДокументаКонтрагента());
	
	Возврат Запрос;
	
КонецФункции

//Процедура заполения таблицы ТЗ_КМ_Сотрудники. Нужна для сопоставления УИД из КМ_Сотрудники.ФизическоеЛицо со
//справочником ФизическиеЛица, для получения из УИД - ФизическиеЛица.Ссылка. Далее эта ТЗ нужна дальнейшей обработки. 
//
//Параметры:
//	Владелец - СправочникСсылка.Организации - Владелец 
Процедура Врм_ТЗ_КМ_Сотрудники(Владелец)

    Запрос = Новый Запрос;
	Запрос.Текст ="
		|ВЫБРАТЬ
		|	КМ_Сотрудники.Ссылка,
		|	КМ_Сотрудники.Должность,
		|	КМ_Сотрудники.КаргомартИД,
		|	КМ_Сотрудники.Роль,
		|	КМ_Сотрудники.ДетальнаяИнформация,
		|	КМ_Сотрудники.Представление,
		|	КМ_Сотрудники.ФизическоеЛицо КАК УИД,
		|	КМ_Сотрудники.СтатусКонтактногоEMail
		|ИЗ
		|	Справочник.КМ_Сотрудники КАК КМ_Сотрудники
		|ГДЕ
		|	КМ_Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И КМ_Сотрудники.Владелец = &Организация";

	Запрос.УстановитьПараметр("Организация", Владелец);

	ТЗ_КМ_Сотрудники = Запрос.Выполнить().Выгрузить();
	
	ТС = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	ТЗ_КМ_Сотрудники.Колонки.Добавить("ФизическоеЛицо", ТС, "ФизическоеЛицо");
		
	Для каждого СтрокаТЗ из ТЗ_КМ_Сотрудники Цикл			
		СтрокаТЗ.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(СтрокаТЗ.УИД); 
	КонецЦикла;
		
	ТЗ_КМ_Сотрудники.Колонки.Удалить(ТЗ_КМ_Сотрудники.Колонки.Найти("УИД"));

КонецПроцедуры

//Функция возвращает текст для запроса. Используется в нескольких местах, в т.ч. модифицируется.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
Функция ИсходныйТекстЗапросСотрудники() Экспорт
	
	ИсходныйТекстЗапроса = 
	"ВЫБРАТЬ
	|	КМ_Сотрудники.Ссылка,
	|	КМ_Сотрудники.ФизическоеЛицо,
	|	КМ_Сотрудники.Должность,
	|	КМ_Сотрудники.КаргомартИД,
	|	КМ_Сотрудники.Роль,
	|	КМ_Сотрудники.ДетальнаяИнформация,
	|	КМ_Сотрудники.Представление,
	|	КМ_Сотрудники.СтатусКонтактногоEMail
	|ПОМЕСТИТЬ КМ_Сотрудники
	|ИЗ
	|	&ТЗ_КМ_Сотрудники КАК КМ_Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КМ_Сотрудники.Ссылка,
	|	КМ_Сотрудники.Должность,
	|	КМ_Сотрудники.КаргомартИД,
	|	КМ_Сотрудники.Роль,
	|	КМ_Сотрудники.ДетальнаяИнформация,
	|	КМ_Сотрудники.Представление,
	|	КМ_Сотрудники.ФизическоеЛицо,
	|	КИТелефон.Представление КАК Телефон,
	|	КИТелефон.Значение КАК ТелефонJSON,
	|	КИТелефон.ЗначенияПолей КАК ТелефонXML,
	|	КИКонтактныйТелефон.Представление КАК КонтактныйТелефон,
	|	КИКонтактныйТелефон.Значение КАК КонтактныйТелефонJSON,
	|	КИКонтактныйТелефон.ЗначенияПолей КАК КонтактныйТелефонXML,
	|	КИEMail.Представление КАК EMail,
	|	КИКонтактныйEMail.Представление КАК КонтактныйEMail,
	|	КМ_Сотрудники.СтатусКонтактногоEMail,
	|	ФизическиеЛица.Фамилия,
	|	ФизическиеЛица.Имя,
	|	ФизическиеЛица.Отчество
	|ИЗ
	|	КМ_Сотрудники КАК КМ_Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КИТелефон
	|		ПО КМ_Сотрудники.ФизическоеЛицо = КИТелефон.Ссылка
	|		И КИТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|		И КИТелефон.Вид = &ВКИТелефон
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КИКонтактныйТелефон
	|		ПО КМ_Сотрудники.ФизическоеЛицо = КИКонтактныйТелефон.Ссылка
	|		И КИКонтактныйТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|		И КИКонтактныйТелефон.Вид = &ВКИКонтактныйТелефон
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КИEMail
	|		ПО КМ_Сотрудники.ФизическоеЛицо = КИEMail.Ссылка
	|		И КИEMail.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|		И КИEMail.Вид = &ВКИEMail
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КИКонтактныйEMail
	|		ПО КМ_Сотрудники.ФизическоеЛицо = КИКонтактныйEMail.Ссылка
	|		И КИКонтактныйEMail.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|		И КИКонтактныйEMail.Вид = &ВКИКонтактныйEMail
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО КМ_Сотрудники.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	&УсловиеОтбора";
	
	Возврат ИсходныйТекстЗапроса;
	
КонецФункции

//Функция возвращает рузультат запроса. При необходимости ИсходныйТекстЗапросСотрудники модифициреутся.
// 
// Параметры:
//  Параметры - Структура - Вх.параметры ТЗ_КМ_Сотрудники (таблица значений), Организация (СправочникСсылка.Организации)
//  
// Возвращаемое значение:
//  ТаблицаЗначений - Результат выполнения запроса
Функция ТекстЗапросСотрудники(Параметры) Экспорт
	
	Врм_ТЗ_КМ_Сотрудники(Параметры.Организация);
	
	СправочникСсылкаФизическиеЛица = ПолучитьСсылкиНаОбъектыКонфигурации("Справочники_ВидыКонтактнойИнформации");
	
	Параметры.ЗапросСотрудники.Текст = ИсходныйТекстЗапросСотрудники();
    Параметры.ЗапросСотрудники.УстановитьПараметр("ТЗ_КМ_Сотрудники", 		ТЗ_КМ_Сотрудники);
	Параметры.ЗапросСотрудники.УстановитьПараметр("Организация", 			Параметры.Организация);
	Параметры.ЗапросСотрудники.УстановитьПараметр("ВКИEMail", 				СправочникСсылкаФизическиеЛица.EMailФизическиеЛица);
	Параметры.ЗапросСотрудники.УстановитьПараметр("ВКИКонтактныйEMail", 	КМ_ОбщийМодульПовтИсп.ВКИКонтактныйEMail());
	Параметры.ЗапросСотрудники.УстановитьПараметр("ВКИТелефон", 			СправочникСсылкаФизическиеЛица.ТелефонМобильныйФизическиеЛица);
	Параметры.ЗапросСотрудники.УстановитьПараметр("ВКИКонтактныйТелефон", 	СправочникСсылкаФизическиеЛица.ТелефонРабочийФизическиеЛица);
	
	Если Параметры.СотрудникиБД = Неопределено Тогда
		Параметры.ЗапросСотрудники.УстановитьПараметр("УсловиеОтбора", Истина);
	Иначе
		
		Если Параметры.СотрудникиКМ <> Неопределено Тогда
			
			ТекстДопЗапроса = " 
			|ОБЪЕДИНИТЬ ВСЕ
			|" + Прав(Параметры.ЗапросСотрудники.Текст, СтрДлина(Параметры.ЗапросСотрудники.Текст) - Найти(Параметры.ЗапросСотрудники.Текст, ";" )-82);
			
			ТекстДопЗапроса = СтрЗаменить(ТекстДопЗапроса, "&УсловиеОтбора", 
				"КМ_Сотрудники.КаргомартИД В (&СотрудникиКМ)");
			
			Параметры.ЗапросСотрудники.Текст = Параметры.ЗапросСотрудники.Текст + ТекстДопЗапроса;
			Параметры.ЗапросСотрудники.УстановитьПараметр("СотрудникиКМ", Параметры.СотрудникиКМ);
			 
		КонецЕсли;
		
		Параметры.ЗапросСотрудники.Текст = СтрЗаменить(Параметры.ЗапросСотрудники.Текст, "&УсловиеОтбора",
			"КМ_Сотрудники.Ссылка В (&СотрудникиБД)");
		
		Параметры.ЗапросСотрудники.УстановитьПараметр("СотрудникиБД", Параметры.СотрудникиБД);
		
	КонецЕсли;
	
	ТаблицаСоответствия = Параметры.ЗапросСотрудники.Выполнить().Выгрузить();
	
	Возврат ТаблицаСоответствия;
	
КонецФункции

//Функция возвращает текст запроса для формирования динамического списка для формы (Форма) обработки КМ_РабочееМесто.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
Функция РабочееМестоТекстЗапросаДС() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Номер,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.СуммаСНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		КМ_Заказ.Номер,
	|		МАКСИМУМ(КМ_Заказ.СтавкаНДС) КАК СтавкаНДС,
	|		МАКСИМУМ(КМ_Заказ.СуммаСНДС) КАК СуммаСНДС,
	|		МАКСИМУМ(ВЫБОР
	|			КОГДА ПунктыПогрузки.ПунктПогрузкиВыгрузки = &Пункт1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПунктОтправленияСовпадает,
	|		МАКСИМУМ(ВЫБОР
	|			КОГДА ПунктыВыгрузки.ПунктПогрузкиВыгрузки = &Пункт2
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПунктНазначенияСовпадает
	|	ИЗ
	|		Документ.КМ_Заказ КАК КМ_Заказ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КМ_Заказ.Маршрут КАК ПунктыВыгрузки
	|			ПО ПунктыВыгрузки.Ссылка = КМ_Заказ.Ссылка
	|			И ПунктыВыгрузки.ТипМаршрутнойТочки = 2
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КМ_Заказ.Маршрут КАК ПунктыПогрузки
	|			ПО ПунктыПогрузки.Ссылка = КМ_Заказ.Ссылка
	|			И ПунктыПогрузки.ТипМаршрутнойТочки = 1
	|	ГДЕ
	|		КМ_Заказ.Организация = &Организация
	|		И КМ_Заказ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	СГРУППИРОВАТЬ ПО
	|		КМ_Заказ.Номер) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ПунктОтправленияСовпадает = ИСТИНА
	|	И ВложенныйЗапрос.ПунктНазначенияСовпадает = ИСТИНА";
	
	Возврат ТекстЗапроса;
	
КонецФункции
#КонецОбласти

#Область РаботаСФормами

//Процедура заполняет реквизиты формы Справочники.КМ_Сотрудники.ФормаЭлемента
//
//Параметры:
//	Форма - Справочники.КМ_Сотрудники.ФормаЭлемента - Форма
Процедура ЗаполнитьДанныеФормыКМ_Сотрудники(Форма) Экспорт
	
	ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Форма.Объект.ФизическоеЛицо);
	
	Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Фамилия,
		|	ФизическиеЛица.Имя,
		|	ФизическиеЛица.Отчество,
		|	КИEMail.Представление КАК EMail,
		|	КИКонтактныйEMail.Представление КАК КонтактныйEMail,
		|	КИКонтактныйТелефон.Представление КАК КонтактныйТелефон,
		|	КИКонтактныйТелефон.Значение КАК КонтактныйТелефонJSON,
		|	КИКонтактныйТелефон.ЗначенияПолей КАК КонтактныйТелефонXML,
		|	КИТелефон.Представление КАК Телефон,
		|	КИТелефон.Значение КАК ТелефонJSON,
		|	КИТелефон.ЗначенияПолей КАК ТелефонXML
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КИТелефон
		|		ПО ФизическиеЛица.Ссылка = КИТелефон.Ссылка
		|		И КИТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|		И КИТелефон.Вид = &ВКИТелефон
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КИКонтактныйТелефон
		|		ПО ФизическиеЛица.Ссылка = КИКонтактныйТелефон.Ссылка
		|		И КИКонтактныйТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|		И КИКонтактныйТелефон.Вид = &ВКИКонтактныйТелефон
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КИEMail
		|		ПО ФизическиеЛица.Ссылка = КИEMail.Ссылка
		|		И КИEMail.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|		И КИEMail.Вид = &ВКИEMail
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КИКонтактныйEMail
		|		ПО ФизическиеЛица.Ссылка = КИКонтактныйEMail.Ссылка
		|		И КИКонтактныйEMail.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|		И КИКонтактныйEMail.Вид = &ВКИКонтактныйEMail
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &ФизическоеЛицо";
		Запрос.УстановитьПараметр("ФизическоеЛицо", 		ФизическоеЛицо);
		Запрос.УстановитьПараметр("ВКИEMail", 				Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
		Запрос.УстановитьПараметр("ВКИКонтактныйEMail", 	КМ_ОбщийМодульПовтИсп.ВКИКонтактныйEMail());
		Запрос.УстановитьПараметр("ВКИТелефон", 			Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
		Запрос.УстановитьПараметр("ВКИКонтактныйТелефон",	Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Выборка.Следующий();
		
		ТелефонБД 				= КМ_ОбщийМодульСервер.ДанныеТелефонаИзПолейКонтактнойИнформации(Выборка.Телефон, 
			Выборка.ТелефонJSON, 
			Выборка.ТелефонXML);
		КонтактныйТелефонБД 	= КМ_ОбщийМодульСервер.ДанныеТелефонаИзПолейКонтактнойИнформации(Выборка.КонтактныйТелефон, 
			Выборка.КонтактныйТелефонJSON, 
			Выборка.КонтактныйТелефонXML);
		Форма.ФизическоеЛицо 		= ФизическоеЛицо;
		Форма.Фамилия 				= Выборка.Фамилия;
		Форма.Имя 					= Выборка.Имя;
		Форма.Отчество 				= Выборка.Отчество;
		Форма.EMail 				= Выборка.EMail;
		Форма.КонтактныйEMail 		= Выборка.КонтактныйEMail;
		Форма.Телефон 				= ТелефонБД.Телефон;
		Форма.КонтактныйТелефон 	= КонтактныйТелефонБД.Телефон;
		Форма.КонтактныйТелефонДоп 	= КонтактныйТелефонБД.ТелефонДоп;
	
КонецПроцедуры

//Функция записывает в справочник ФизическиеЛица данные и возвращает УИД на них 
//
//Параметры:
// Параметры - Структура - ФизическоеЛицо, Фамилия, Имя, Отчеств, Телефон, КонтактныйТелефон, КонтактныйТелефонДоп, EMail,
// КонтактныйEMail
// 
// Возвращаемое значение:
//	УникальныйИдентификатор - СправочникСсылка.ФизическоеЛицо.УникальныйИдентификатор()
Функция КМ_Сотрудники_Форма_ПередЗаписьюНаСервере(Параметры) Экспорт
		
	Если ЗначениеЗаполнено(Параметры.ФизическоеЛицо) Тогда
		ОбъектФЛ = Справочники.ФизическиеЛица.ПолучитьСсылку(Параметры.ФизическоеЛицо).ПолучитьОбъект();
	Иначе
		ОбъектФЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();
	КонецЕсли;
	
	ФИО = Параметры.Фамилия + " " + Параметры.Имя + " " + Параметры.Отчество;
	
	ОбъектФЛ = СотрудникиПриСоздании(ОбъектФЛ, ФИО);
	
	ОбъектФЛ.ДополнительныеСвойства.Вставить("ФИОУстановлены", Истина);
	 
	КМ_ОбщийМодульСервер.ЗаполнитьСтрокуКонтактнойИнформацииТелефон(ОбъектФЛ.КонтактнаяИнформация,
		Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица,
		Параметры.Телефон);
	
	КМ_ОбщийМодульСервер.ЗаполнитьСтрокуКонтактнойИнформацииТелефон(ОбъектФЛ.КонтактнаяИнформация,
		Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,
		Параметры.КонтактныйТелефон, Параметры.КонтактныйТелефонДоп);
	
	КМ_ОбщийМодульСервер.ЗаполнитьСтрокуКонтактнойИнформацииEMail(ОбъектФЛ.КонтактнаяИнформация,
		Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица,
		Параметры.EMail);
	
	КМ_ОбщийМодульСервер.ЗаполнитьСтрокуКонтактнойИнформацииEMail(ОбъектФЛ.КонтактнаяИнформация,
		КМ_ОбщийМодульПовтИсп.ВКИКонтактныйEMail(),
		Параметры.КонтактныйEMail);
	
	ОбъектФЛ.Записать();
	
	Возврат ОбъектФЛ.Ссылка.УникальныйИдентификатор();
	
КонецФункции

//Процедура формирует интерфейс для формы (Форма) обработки КМ_РабочееМесто.
//
//Параметры:
//	Форма - Обработки.КМ_РабочееМесто.Форма - Форма
Процедура СформироватьФормуРабочееМесто(Форма) Экспорт

	стрРеквизитов = Новый Структура;
	
	стрРеквизитов.Вставить("ПодразделениеЗатрат", 				КМ_ОбщийМодульДФИ.ОписаниеТипаСправочник("ПодразделенияОрганизаций"));
	стрРеквизитов.Вставить("Субконто1_НГ", 						КМ_ОбщийМодульДФИ.ОписаниеТипаСправочник("Субконто"));
	стрРеквизитов.Вставить("Субконто2_СЗ", 						КМ_ОбщийМодульДФИ.ОписаниеТипаСправочник("Субконто"));
	стрРеквизитов.Вставить("СтатьяДДСОплатаТранспортныхУслуг", 	КМ_ОбщийМодульДФИ.ОписаниеТипаСправочник("СтатьиДвиженияДенежныхСредств"));
	стрРеквизитов.Вставить("ПодразделениеОрганизации", 			КМ_ОбщийМодульДФИ.ОписаниеТипаСправочник("ПодразделенияОрганизаций"));
	стрРеквизитов.Вставить("СчетЗатрат", 						КМ_ОбщийМодульДФИ.ОписаниеТипаПланСчетов("Хозрасчетный"));
	стрРеквизитов.Вставить("СчетДоходовРТУ", 					КМ_ОбщийМодульДФИ.ОписаниеТипаПланСчетов("Хозрасчетный"));
	стрРеквизитов.Вставить("СчетРасходовРТУ", 					КМ_ОбщийМодульДФИ.ОписаниеТипаПланСчетов("Хозрасчетный"));
	стрРеквизитов.Вставить("СчетУчетаНДС", 						КМ_ОбщийМодульДФИ.ОписаниеТипаПланСчетов("Хозрасчетный"));
	стрРеквизитов.Вставить("СчетУчетаНДСПоРеализации", 			КМ_ОбщийМодульДФИ.ОписаниеТипаПланСчетов("Хозрасчетный"));
	стрРеквизитов.Вставить("СпособУчетаНДС", 					КМ_ОбщийМодульДФИ.ОписаниеТипаПеречисление("СпособыУчетаНДС"));
	
	
	КМ_ОбщийМодульДФИ.СоздатьРеквизиты(Форма, стрРеквизитов);
	
	ГруппаНастройки = Форма.Элементы.Настройки;
	
	КМ_ОбщийМодульДФИ.СздПоле(Форма,"ПодразделениеЗатрат",				ГруппаНастройки,"Подразделение затрат",					1, "ПодразделениеЗатрат");
	КМ_ОбщийМодульДФИ.СздПоле(Форма,"Субконто1_НГ",						ГруппаНастройки,"Субконто1 НГ",							1, "Субконто1_НГ");
	КМ_ОбщийМодульДФИ.СздПоле(Форма,"Субконто2_СЗ",						ГруппаНастройки,"Субконто2 СЗ",							1, "Субконто2_СЗ");
	КМ_ОбщийМодульДФИ.СздПоле(Форма,"СтатьяДДСОплатаТранспортныхУслуг",	ГруппаНастройки,"СДДС для Трансп. усл.",				1, "СтатьяДДСОплатаТранспортныхУслуг");
	КМ_ОбщийМодульДФИ.СздПоле(Форма,"ПодразделениеОрганизации",			ГруппаНастройки,"Подразделение организации",			1, "ПодразделениеОрганизации");
	КМ_ОбщийМодульДФИ.СздПоле(Форма,"СчетЗатрат",						ГруппаНастройки,"СчетЗатрат",							1, "СчетЗатрат");
	КМ_ОбщийМодульДФИ.СздПоле(Форма,"СчетДоходовРТУ",					ГруппаНастройки,"СчетДоходовРТУ",						1, "СчетДоходовРТУ");
	КМ_ОбщийМодульДФИ.СздПоле(Форма,"СчетРасходовРТУ",					ГруппаНастройки,"СчетРасходовРТУ",						1, "СчетРасходовРТУ");
	КМ_ОбщийМодульДФИ.СздПоле(Форма,"СчетУчетаНДС",						ГруппаНастройки,"Способ учета НДС (в поступлениях)",	1, "СчетУчетаНДС");
	КМ_ОбщийМодульДФИ.СздПоле(Форма,"СчетУчетаНДСПоРеализации",			ГруппаНастройки,"Сч. уч. НДС по реал.",					1, "СчетУчетаНДСПоРеализации");
	
	КМ_ОбщийМодульДФИ.СздКнопка(Форма, "ЗаписатьНастройкиКаргомарт", 	ГруппаНастройки,"Записать настройки каргомарт", 	"ЗаписатьНастройкиКаргомарт", 	1,,);
	КМ_ОбщийМодульДФИ.СздКнопка(Форма, "ТестированиеПодключения", 		ГруппаНастройки,"Тестирование подключения", 		"ТестированиеПодключения", 		1,,);
	КМ_ОбщийМодульДФИ.СздКнопка(Форма, "УдалитьТокен", 					ГруппаНастройки,"Удалить токен", 					"УдалитьТокен", 				1,,);	

КонецПроцедуры

#КонецОбласти

//Функция получения настроек Каргомарт.
//
//Параметры:
//	Организация - СправочникСсылка.Организации - Организация для получения настроек интеграции с Каргомартом
//Возвращаемое значение:
//	Структура
Функция ПолучитьНастройкиКаргомарт(Организация) Экспорт
	
	ИмяОрганизации = СтрЗаменить(Строка(Организация)," ", "");
	ИмяОрганизации = СтрЗаменить(Строка(ИмяОрганизации),"""", "");
	
	Если (Кэш <> Неопределено)
		И (Кэш.Свойство("НастройкиКаргомарт" + ИмяОрганизации)) Тогда					
			
			Возврат Кэш["НастройкиКаргомарт" + ИмяОрганизации];
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК Справочник.ЗначенияСвойствОбъектов).ПолноеНаименование КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Организация
	|	И ДополнительныеСведения.Свойство = &РеквизитНастройкиКаргомарт";
	
	Запрос.УстановитьПараметр("Организация", 				Организация);
	Запрос.УстановитьПараметр("РеквизитНастройкиКаргомарт", КМ_ОбщийМодульПовтИсп.РеквизитНастройкиКаргомарт());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		НастройкиКаргомарт = ЗначениеИзСтрокиВнутр(Выборка.Значение);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(НастройкиКаргомарт) <> Тип("Структура")
		ИЛИ НастройкиКаргомарт.Свойство("АдресСервера") = Ложь 
		ИЛИ ЗначениеЗаполнено(НастройкиКаргомарт.АдресСервера) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиКаргомарт.Вставить("Логин", 	Строка(ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "ЛогинКаргомарт")));
	НастройкиКаргомарт.Вставить("Пароль", 	Строка(ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Организация, "ПарольКаргомарт")));
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Если НастройкиКаргомарт.Свойство("СчетУчетаНДС") = Ложь Тогда
		НастройкиКаргомарт.Вставить("СчетУчетаНДС", ПланыСчетов.Хозрасчетный.НайтиПоКоду("19.04"));
	КонецЕсли;

	Если НастройкиКаргомарт.Свойство("СчетЗатрат") = Ложь Тогда
		НастройкиКаргомарт.Вставить("СчетЗатрат", ПланыСчетов.Хозрасчетный.НайтиПоКоду("23"));
	КонецЕсли;

	Если НастройкиКаргомарт.Свойство("СчетДоходовРТУ") = Ложь Тогда
		НастройкиКаргомарт.Вставить("СчетДоходовРТУ", ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.1"));
	КонецЕсли;

	Если НастройкиКаргомарт.Свойство("СчетРасходовРТУ") = Ложь Тогда
		НастройкиКаргомарт.Вставить("СчетРасходовРТУ", ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1"));
	КонецЕсли;

	Если НастройкиКаргомарт.Свойство("Субконто1_НГ") = Ложь Тогда
		НастройкиКаргомарт.Вставить("Субконто1_НГ", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	КонецЕсли;

	Если НастройкиКаргомарт.Свойство("Субконто2_СЗ") = Ложь Тогда
		НастройкиКаргомарт.Вставить("Субконто2_СЗ", Справочники.СтатьиЗатрат.ПустаяСсылка());
	КонецЕсли;

	Если НастройкиКаргомарт.Свойство("ПодразделениеЗатрат") = Ложь Тогда
		НастройкиКаргомарт.Вставить("ПодразделениеЗатрат",
			Справочники.ПодразделенияОрганизаций.ОсновноеПодразделениеОрганизации(Организация));
	КонецЕсли;

	Если НастройкиКаргомарт.Свойство("СчетУчетаНДСПоРеализации") = Ложь Тогда
		НастройкиКаргомарт.Вставить("СчетУчетаНДСПоРеализации", ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03"));
	КонецЕсли;

	Если НастройкиКаргомарт.Свойство("СтатьяДДСОплатаТранспортныхУслуг") = Ложь Тогда
		НастройкиКаргомарт.Вставить("СтатьяДДСОплатаТранспортныхУслуг",
			Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику);
	КонецЕсли;

	Если НастройкиКаргомарт.Свойство("ПодразделениеОрганизации") = Ложь Тогда
		НастройкиКаргомарт.Вставить("ПодразделениеОрганизации",
			Справочники.ПодразделенияОрганизаций.ОсновноеПодразделениеОрганизации(Организация));
	КонецЕсли;

	Если НастройкиКаргомарт.Свойство("СпособУчетаНДС") = Ложь Тогда
		НастройкиКаргомарт.Вставить("СпособУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
	КонецЕсли;
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Структура;
	КонецЕсли;
	
	Если Не Кэш.Свойство("НастройкиКаргомарт" + ИмяОрганизации) Тогда
		Кэш.Вставить("НастройкиКаргомарт" + ИмяОрганизации, ОбщегоНазначения.СкопироватьРекурсивно(НастройкиКаргомарт));
	Иначе
		Кэш["НастройкиКаргомарт" + ИмяОрганизации] = ОбщегоНазначения.СкопироватьРекурсивно(НастройкиКаргомарт);
	КонецЕсли;
	
	
	Возврат НастройкиКаргомарт;
	
КонецФункции

//Функция заполняет и возвращает Объект физического лица.
//
//Параметры:
//	ОбъектФЛ 	- СправочникСсылка.ФизическиеЛица 	- Объект физического лица
//	ФИО 		- Строка 							- Строка с ФИО
//Возвращаемое значение:
//	СправочникСсылка.ФизическиеЛица - Заполненый объект физического лица
Функция СотрудникиПриСоздании(ОбъектФЛ, ФИО) Экспорт
	
	ОбъектФЛ.Наименование 	= ФИО;
	ОбъектФЛ.ФИО 			= ОбъектФЛ.Наименование;
	
	ФИО = СтрРазделить(ФИО, " ", Истина);
	
	ОбъектФЛ.Имя 			= ФИО[1];
	ОбъектФЛ.Отчество 		= ФИО[2];
	ОбъектФЛ.Фамилия 		= ФИО[0];
	
	Возврат ОбъектФЛ;
	
КонецФункции

Функция ОпределитьКонтрагента(КонтрагентОбъект) Экспорт
	
	КонтрагентОбъект.Комментарий = "Загружен из Каргомарт. Дата загрузки: " + Формат(ТекущаяДата(), "ДЛФ=DT");
	
	Возврат КонтрагентОбъект;
	
КонецФункции

Функция ЗаполнитьРеквизитыКонтрагента(КонтрагентОбъект, СвидетельствоОРегистрации) Экспорт
	
	КонтрагентОбъект.СвидетельствоСерияНомер = Строка(СвидетельствоОРегистрации.Серия) + " " + СвидетельствоОРегистрации.Номер;
	КонтрагентОбъект.СвидетельствоДатаВыдачи = СвидетельствоОРегистрации.Дата;
	
	Возврат  КонтрагентОбъект;
	
КонецФункции


//Функция возвразает СправочникМенеджер
//Параметры:
//	Имя - Строка - Имя в формате Справочники_ФизическиеЛица
//Возвращаемое значение:
//	СправочникМенеджер
Функция ПолучитьСсылкиНаОбъектыКонфигурации(Имя) Экспорт
	
	ИмяРодителяОбъекта 	= Лев(Имя, Найти(Имя, "_") - 1);
	
	ИмяОбъекта 			= Прав(Имя, СтрДлина(Имя) - Найти(Имя, "_"));
	
	Если (Кэш <> Неопределено)
		И (Кэш.Свойство("СсылкиНаОбъектыКонфигурации")) 
			И (Кэш.Свойство("ИмяРодителяОбъекта"))
				И (Кэш.Свойство("ИмяОбъекта")) Тогда			
				Возврат Кэш.СсылкиНаОбъектыКонфигурации[ИмяРодителяОбъекта][ИмяОбъекта];
	КонецЕсли;
			
	Если Кэш = Неопределено Тогда
		Кэш = Новый Структура;
	КонецЕсли;
			
	Если Не Кэш.Свойство("СсылкиНаОбъектыКонфигурации") Тогда
		Кэш.Вставить("СсылкиНаОбъектыКонфигурации", Новый Структура);
	КонецЕсли;
	
	Если Не Кэш.СсылкиНаОбъектыКонфигурации.Свойство(ИмяРодителяОбъекта) Тогда
			Кэш.СсылкиНаОбъектыКонфигурации.Вставить(ИмяРодителяОбъекта, Новый Структура);
	КонецЕсли;
	
	Если ИмяРодителяОбъекта = "Справочники" Тогда
		Кэш.СсылкиНаОбъектыКонфигурации[ИмяРодителяОбъекта].Вставить(ИмяОбъекта, Справочники[ИмяОбъекта]);
	ИначеЕсли ИмяРодителяОбъекта = "Документы" Тогда
		Кэш.СсылкиНаОбъектыКонфигурации[ИмяРодителяОбъекта].Вставить(ИмяОбъекта, Документы[ИмяОбъекта]);
	ИначеЕсли ИмяРодителяОбъекта = "Перечисления" Тогда
		Кэш.СсылкиНаОбъектыКонфигурации[ИмяРодителяОбъекта].Вставить(ИмяОбъекта, Перечисления[ИмяОбъекта]);
	ИначеЕсли ИмяРодителяОбъекта = "РегистрыСведений" Тогда	
		Кэш.СсылкиНаОбъектыКонфигурации[ИмяРодителяОбъекта].Вставить(ИмяОбъекта, РегистрыСведений[ИмяОбъекта]);		
	КонецЕсли;
	
	Возврат Кэш.СсылкиНаОбъектыКонфигурации[ИмяРодителяОбъекта][ИмяОбъекта];
	
КонецФункции

//Функция удаляет кэш по ключу (например настройки подключения)
//Параметры:
//	Ключ - Строка
Процедура ОчиститьКэш(Ключ) Экспорт
	
	Если (Кэш <> Неопределено)
			И Кэш.Свойство(Ключ) Тогда
		
		Кэш.Удалить(Ключ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти